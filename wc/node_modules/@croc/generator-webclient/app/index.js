'use strict';
var path    = require('path');
var chalk   = require('chalk');
var mkdirp  = require('mkdirp');
var Generator = require('yeoman-generator');
var common	= require('./../common/common');

function runServer () {
	mkdirp.sync(this.serverProjectDir);
  
	this.composeWith("@croc/webclient:server", { 
		nested: true, 
		appName: this.appName,
		clientProjectDir: this.clientProjectDir,
		serverProjectDir: this.serverProjectDir 
	}, {
		local: require.resolve("./../server")
	}).on('end',function(){
	});
};

function runClient () {
	mkdirp.sync(this.clientProjectDir);

	this.composeWith("@croc/webclient:client", { 
		nested: true, 
		appName: this.appName,
		clientProjectDir: this.clientProjectDir,
		serverProjectDir: this.serverProjectDir 
	}, {
		local: require.resolve("./../client")
	}).on('end',function(){
	});
};

var CrocWebclientGenerator = Generator.extend({
	constructor: function (args, options, config) {
		Generator.call(this, args, options);

		this.option("skip-logo", { type: Boolean, desc: "Suppress printing logo", default: false });
		// если надо переопределить папку templates: 
		// this.sourceRoot(path.join(__dirname, '../templates'));
	},

	askFor: function () {
		var cb = this.async();

		common.initVersion(this);
		common.welcome(this);

		var prompts = [{
			name: 'appName',
			message: 'Enter your app name',
			default: 'WebClientApp'
		}, {
			type: 'confirm',
			name: 'createServer',
			message: 'Would you like to create .Net Server VS-project?',
			default: true
		}, {
			name: 'serverProjectDir',
			message: 'Enter folder name for server project',
			default: 'Server',
			when: function (props) {
				return props.createServer
			}
		}, {
			type: 'confirm',
			name: 'createClient',
			message: 'Whould you like to create Client project?',
			default: true
		}, {
			name: 'clientProjectDir',
			message: 'Enter folder name for client project',
			default: 'Client',
			when: function (props) {
				return props.createClient
			}
		}];

		this.prompt(prompts).then(function (props) {
			this.appName = props.appName;
			this.createServer = props.createServer;
			this.createClient = props.createClient;
			this.clientProjectDir = props.clientProjectDir;
			this.serverProjectDir = props.serverProjectDir;
			cb();
    
		}.bind(this));
	},

	main: function () {

		if (this.createServer) {
			runServer.call(this);
		}
		if (this.createClient) {
			runClient.call(this);
		}
	}
});

module.exports  = CrocWebclientGenerator;