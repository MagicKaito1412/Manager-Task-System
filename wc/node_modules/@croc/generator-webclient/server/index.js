'use strict';
var util 	= require('util');
var path 	= require('path');
var chalk 	= require('chalk');
var mkdirp 	= require('mkdirp');
var Generator = require('yeoman-generator');
var child_process = require('child_process');
var common 	= require('./../common/common');

var storages = {
	"sqlite": {
		type: "sqlite",
        kind: "sqlite",
        description: "SQLite (database will created in App_Data dir)",
		providerType: "Croc.XFW3.Storage.SQLite.XStorageProviderSQLite, Croc.XFW3.Storage.SQLite",
        providerName: "Croc.XFW3.Storage.SQLite.XStorageProviderSQLite",
        nugetPackage: "XFW3.Storage.SQLite",
        connections: {
        	"default": "data source=|DataDirectory|$(DB).db;Foreign Keys=True",
        	"initialization": "data source=|DataDirectory|$(DB).db;Foreign Keys=True"
        },
	},
	"localdb": {
		type: "localdb",
		kind: "mssql",
		description: "SQL Server LocalDB (database will created in App_Data dir)",
		providerType: "Croc.XFW3.Storage.MsSql.XStorageProviderMsSql, Croc.XFW3.Storage.MsSql",
        providerName: "Croc.XFW3.Storage.MsSql.XStorageProviderMsSql",
        nugetPackage: "XFW3.Storage.MsSql",
        connections: {
        	"default": "Data Source=(localdb)\\v11.0;AttachDbFilename=|DataDirectory|$(DB).mdf;Initial Catalog=$(DB);Integrated Security=True;Async=true",
        	"initialization": "Data Source=(localdb)\\v11.0;AttachDbFilename=|DataDirectory|$(DB).mdf;Initial Catalog=$(DB);Integrated Security=True"
        }
	},
	"mssql": {
		type: "mssql",
		kind: "mssql",
		description: "SQL Server",
		providerType: "Croc.XFW3.Storage.MsSql.XStorageProviderMsSql, Croc.XFW3.Storage.MsSql",
        providerName: "Croc.XFW3.Storage.MsSql.XStorageProviderMsSql",
        nugetPackage: "XFW3.Storage.MsSql",
        connections: {
        	"default": "Initial Catalog=$(DB);Data Source=$(DB_HOST);User ID=$(OWNER);PWD=$(OWNER_PWD);Async=true",
        	"initialization": "Initial Catalog=$(DB);Data Source=$(DB_HOST);User ID=$(OWNER);PWD=$(OWNER_PWD)"
        }
	},
	"postgres": {
		type: "postgres",
		kind: "postgres",
		description: "PostgreSQL",
		providerType: "Croc.XFW3.Storage.PostgreSql.XStorageProviderPgSql, Croc.XFW3.Storage.PostgreSql",
        providerName: "Croc.XFW3.Storage.PostgreSql.XStorageProviderPgSql",
        nugetPackage: "XFW3.Storage.PostgreSql",
        connections: {
        	"default": "Host=$(DB_HOST);Port=5432;User Id=$(OWNER);Password=$(OWNER_PWD);Database=$(DB);Unicode=true;",
        	"initialization": "Host=$(DB_HOST);Port=5432;User Id=$(OWNER);Password=$(OWNER_PWD);Database=$(DB);Unicode=true;"
        }
	},
	"oracle": {
		type: "oracle",
		kind: "oracle",
		description: "Oracle",
		providerType: "Croc.XFW3.Storage.Oracle.XStorageProviderOracle, Croc.XFW3.Storage.Oracle",
        providerName: "Croc.XFW3.Storage.Oracle.XStorageProviderOracle",
        nugetPackage: "XFW3.Storage.Oracle",
        connections: {
        	"default": "Data Source=$(DB_HOST);User Id=$(OWNER);Password=$(OWNER_PWD)",
        	"initialization": "Data Source=$(DB_HOST);User Id=$(OWNER);Password=$(OWNER_PWD)"
        }
	}
};

var CrocWebclientServerGenerator = Generator.extend({
	constructor: function (args, options, config) {
		Generator.call(this, args, options);

		common.initVersion(this);
		this.appName = this.options.appName;
		this.nested  = this.options.nested;
		if (this.options.clientProjectDir) {
			this.clientProjectPath = "../" + this.options.clientProjectDir;
		}
		this.serverProjectDir = this.options.serverProjectDir;
	},

	prompting : function () {
		if (!this.nested) {
			common.welcome(this);
		}

		var cb = this.async();

		this.log('\n' + chalk.green.bold('\nGenerating server project') + 
			" in " + (this.serverProjectDir ? "'" + this.serverProjectDir + "' folder" : "the current folder")
			);

		var prompts = [];
		if (!this.appName) {
			prompts.push({
				name: 'appName',
				message: 'Enter your app name',
				default: this.options.appName
			});
		}
		prompts.push({
			name: 'rootNs',
			message: 'Enter root C# namespace (by default "Croc.' + (this.options.appName ? this.options.appName : '" + appName +"') + '.WebServer")'
		});

		if (!this.clientProjectPath) {
			prompts.push({
				name: 'clientProjectPath',
				message: 'Enter relative path to the client project',
				default: '../Client'
			});
		}

		prompts.push({
			type: 'list',
			name: 'dbType',
			message: 'Which type of DBMS would you like to use?',
			choices: Object.keys(storages).map(function (db) {
					return { value: db, name: storages[db].description }; 
				}),
			default: 'sqlite'
		});
		prompts.push({
			name: 'dbHost',
			message: 'Enter DB server host name',
			default: '.',
			when: function (answers) {
				return answers.dbType === 'mssql' || answers.dbType === 'oracle' || answers.dbType === 'postgres';
			}
		});

		prompts.push({
			name: 'dbName',
			message: 'Enter DB name of your application (empty for using the app name)'
		});

		prompts.push({
			type: 'confirm',
			name: 'generateDomainAssets',
			message: 'Do you want to generate a sample domain model',
			default: true
		});

		this.prompt(prompts).then(function (props) {
			this.appName = this.appName || props.appName || 'Demo';
			this.rootNs = props.rootNs || ('Croc.' + this.appName + '.WebServer');
			this.clientProjectPath = this.clientProjectPath || props.clientProjectPath;
			// change "/" to "\" as we're on Windows for sure:
			this.clientProjectPath = this.clientProjectPath.replace(/\//g, "\\");
			this.assemblyName = this.rootNs;
			this.dbName = props.dbName || this.appName;
			this.dbType = props.dbType;
			this.dbHost = props.dbHost;
			this.storage = storages[this.dbType];
			this.useLocalDb = this.dbType === "localdb";

			if (this.serverProjectDir) {
				this.targetPath = path.join(this.destinationRoot(), this.serverProjectDir)
			} else {
				this.targetPath = this.destinationRoot();
			}
			//this.targetPath = process.cwd();
			this.generateDomainAssets = props.generateDomainAssets;
			cb();
		}.bind(this));
	},

	writing : function () {
		var _root;

		if (this.serverProjectDir) {
			_root = this.destinationRoot();
			this.destinationRoot(this.serverProjectDir);
		}

		if (this.storage.type === 'localdb') {
			mkdirp.sync('App_Data');
			this.fs.copy(this.templatePath('App_Data/localdb/createdb.cmd'), 'App_Data/createdb.cmd');
			this.fs.copy(this.templatePath('App_Data/localdb/createdb.ps1'), 'App_Data/createdb.ps1');
			this.fs.copy(this.templatePath('App_Data/localdb/_createdb.sql'),'App_Data/createdb.sql');
		} else if (this.storage.type === 'sqlite') {
			mkdirp.sync('App_Data');
		}

		mkdirp.sync('.nuget');
		this.fs.copy(this.templatePath('.nuget/NuGet.Config'), '.nuget/NuGet.Config');

		mkdirp.sync('App_Start');
		mkdirp.sync('Controllers');
		mkdirp.sync('DomainObjects');
		mkdirp.sync('Metadata');

		this.fs.copyTpl(this.templatePath('_app.config'), 'app.config', this);
		this.fs.copyTpl(this.templatePath('_app.config.properties'), 'app.config.properties', this);
		this.fs.copyTpl(this.templatePath('Web.config'), 'Web.config', this);
		this.fs.copy(this.templatePath('Web.Debug.config'), 'Web.Debug.config');
		this.fs.copy(this.templatePath('Web.Release.config'), 'Web.Release.config');
		this.fs.copy(this.templatePath('start_server.cmd'), 'start_server.cmd');

		if (this.generateDomainAssets) {
			mkdirp.sync('Models');
			this.fs.copyTpl(this.templatePath('Models/_domainModel.xdm'), 'Models/domainModel.xdm', this)
		}

		this.fs.copyTpl(this.templatePath('_Server.csproj'), 'Server.csproj', this);

		if (_root) {
			this.destinationRoot(_root);
		}
	},

	_sayGoodbay: function () {
		this.log('\n' + chalk.yellow('Next steps for server project: '));

		this.log(			
			'  - open the project in Visual Studio \n' + 
			'  - install NuGet-packages from CROC Artifactory (see https://dev.rnd.croc.ru/webclient/docs/latest/docs/croc-nuget-repository.html ):\n' +
			'  -- ' + chalk.yellow.bold('XFW3.WebClient.Server') +'\n' +
			'  -- ' + chalk.yellow.bold('XFW3.WebClient.Server.Sample') +'\n' +			
			'  -- ' + chalk.yellow.bold(this.storage.nugetPackage) + '\n' +
			'  - make sure XFW3 DslDesigner is installed in Visual Studio (see https://wiki.rnd.croc.ru/display/rnd/VS+Gallery)'
		);
		if (this.generateDomainAssets) {
			this.log(
				'  - open Models/domainModel.xdm and generate artifacts (xml-metadata and C#-classes)'
			);
		} else {
			this.log(
				'  - create a new domain model in DslDesigner and generate artifacts (xml-metadata and C#-classes)'
			);
		}
		this.log(
			'  - make sure you have included cs-file with C#-classes into your VS project (for compiling)'
		);
		this.log(
			'  - check correctness of path to domain model xml-metadata and FactoryProvider\'s full type name in app.config'
		);
	},

	end: function () {
		var that = this;
		if (this.useLocalDb) {
			var pathPop = this.destinationRoot();
			if (this.serverProjectDir) {
				this.destinationRoot(this.serverProjectDir);
			}
			var pathData = path.join(this.destinationRoot(), 'App_Data');

			this.log("\n" + chalk.green.bold("\nCreating LocalDB\n"));
			var child = child_process.spawnSync("createdb.cmd", [], {cwd: pathData});
			this.log(child.stdout.toString());
			if (child.error) {
				this.log(chalk.red.bold("DB creation seems failed. Try running App_Data/createdb.sql manually in SMS"));
			}
			this.destinationRoot(pathPop);
		}
		that._sayGoodbay();
	}
});

module.exports = CrocWebclientServerGenerator;