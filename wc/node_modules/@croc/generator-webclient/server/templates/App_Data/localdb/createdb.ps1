# Most of this code was borrowed from https://gist.github.com/abombss/5103204

function Find-AutoLocalDb {
#  $localdb = Get-LocalDb $InstanceName -ErrorAction SilentlyContinue | select-object -first 1
  $instances = Get-LocalDb
  $name = $instances | Where-Object { $_.AutoCreate } | foreach { $_.Name }
  return $name
}

function Get-LocalDb {
  param(
    [Parameter(Position=1,ValueFromPipeline=$true)]
    [string[]]$InstanceName,
    [string]$ToolPath = (Find-LocalDbExe)
  )

  process {
    if ((-not $InstanceName) -or ($InstanceName.Count -eq 0)) {
      # Get a list of all instances
      $InstanceName = Invoke-LocalDb info -ToolPath $ToolPath
    }
    $instances = @()
    foreach($instance in $InstanceName) {
      [string[]] $result = Invoke-LocalDb info,$instance -ToolPath $ToolPath
#      Write-Verbose ([string]::Join("`n", $result))

      [hashtable]$props = @{ }
      foreach($line in $result) {
        # Fix error handling, why is sqllocaldb.exe returning 0 on errors here, it should exit with non zero exit code?
        if ($line -and $line.Contains("error:")) {
          throw ([String]::Join("`n", $result))
        }

        # TODO: Fix this parsing and switch its aweful
        [string[]]$parts = $line.Split(':', 2)
        if ( ($parts.Count -ge 1) -and ($parts[1])) {
          $value = $parts[1].Trim()
        } else {
          $value = [String]::Empty
        }
        $props.InstanceName = $instance
        switch ($parts[0]) {
          'State' { $props.State = $value }
          'Auto-create' { $props.AutoCreate = ($value -eq 'yes') }
          'Version' { $props.Version = $value }
          'Instance pipe name' { $props.PipeName = $value }
          'Last start time' { $props.LastStartTime = [DateTime]::Parse($value) }
          'Owner' { $props.Owner = $value }
          'Name' { $props.Name = $value }
          'Shared name' { $props.SharedName = $value }
        }
      }
      $ins = new-object psobject -Property $props
      $instances += $ins
    }
    return $instances
  }
}

function Find-LocalDbExe {
  if (get-command fSqlLocalDb.exe -ErrorAction SilentlyContinue) {
    (Get-Command SqlLocalDb.exe).Path
  } else {
    # Search the registry for the sql install and local db
    $sqlinstall = get-childitem 'HKLM:\SOFTWARE\Microsoft\Microsoft SQL Server\' |
      ? { ((split-path $_.name -Leaf) -match '^\d+$') -and (test-path (join-path $_.pspath 'tools\ClientSetup')) } |
      select-object -last 1

    #Write-Host $sqlinstall
    $pathToSqlTools = (Get-Item (join-path $sqlinstall.pspath '\tools\ClientSetup')).GetValue("Path")
    
    #Write-Host $pathToSqlTools

    $localDb = join-path $pathToSqlTools 'SqlLocalDb.exe'
    if (Test-Path $localDb) {
        $localDb
    } else {
      Write-Error "Could not find a sql localdb installed"
    }
  }
}

function Invoke-LocalDb {
  [CmdletBinding()]
  param(
    [Parameter(Position=1)]
    [string[]] $CommandArgs,
    [string]$ToolPath = (Find-LocalDbExe)
  )

  if (!(Test-Path $ToolPath)) {
      throw (new-object System.IO.FileNotFound($ToolPath))
  }

  Exec { & $ToolPath $CommandArgs }
}

function Stop-Instance {
  [CmdletBinding()]
  param(
    [Parameter(Position=1,ValueFromPipeline=$true)]
    [string]$InstanceName,
    [string]$ToolPath = (Find-LocalDbExe)
  )

  Invoke-LocalDb stop,$InstanceName -ToolPath $ToolPath
}

function Exec {
    [CmdletBinding()]
    param (
        [Parameter(Position=0, Mandatory=1)]
        [scriptblock]$Command,
        [Parameter(Position=1, Mandatory=0)]
        [string]$ErrorMessage = "Execution of command failed.`n$Command"
    )
    & $Command
    if ($LastExitCode -ne 0) {
        throw "Exec: $ErrorMessage"
    }
}

$ins = Find-AutoLocalDb
Write-Host "Found SQL LocalDB automatic instance - $ins"
Write-Host "Running 'App_Data\createdb.sql' script against (localdb)\${ins}"
& SQLCMD.EXE -S "(localdb)\${ins}" -i createdb.sql

Write-Host "Stopping instance"
Stop-Instance $ins
