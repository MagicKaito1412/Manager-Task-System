import lang = require("lib/core.lang");
import { InteropError, OptimisticConcurrencyException } from "interop/.interop";

import resources = require("i18n!lib/nls/resources");

/**
 * Error Types and Handlers.
 */

export interface CanceledError extends Error {
	isCanceled?: boolean;
}
export interface UnknownPartError extends Error {
	isUnknownPart?: boolean;
}

/**
 * Creates "Operation was canceled" error.
 * @returns {Error}
 */
export function canceled(): CanceledError {
	let e: CanceledError = new Error(resources["operation_was_canceled"]);
	e.isCanceled = true;
	return e;
}
/**
 * Checks error whether it's a "canceled" error.
 * @param {Error} error
 * @returns {boolean}
 */
export function isCanceled(error: any): boolean {
	return error && error.isCanceled;
}

/**
 * Checks if an error isn't an infrastructure failure.
 * @param {Error} error
 * @returns {boolean}
 */
export function isUnrecoverableError(error: InteropError): boolean {
	// Bad Data: повторять нельзя:
	// 400 - Bad Request
	// 403 - Forbidden
	// 409 - Conflict
	if (error) {
		let type = error.$className;

		return error.httpStatus === 400 || error.httpStatus === 403 || error.httpStatus === 409 ||
			isCanceled(error) ||
			type === "XSecurityException" ||
			type === "XInvalidDataException" ||
			type === "XBusinessLogicException" ||
			type === "XObjectNotFoundException" ||
			type === "XOptimisticConcurrencyException" ||
			type === "XIntegrityViolationException" ||
			type === "XReferenceIntegrityViolationException";
	}
	return false;
}

export function isObjectNotFound(error: InteropError): boolean {
	return error.serverError && error.$className === "XObjectNotFoundException";
}

export function isOptimisticConcurrency(error: any): error is OptimisticConcurrencyException {
	return error.serverError && error.$className === "XOptimisticConcurrencyException";
}

export function unknownPart(partName: string): UnknownPartError {
	let e: UnknownPartError = new Error("Cannot find a part with name '" + partName + "'");
	e.isUnknownPart = true;
	return e;
}

export function isUnknownPart(error: any): boolean {
	return error && error.isUnknownPart;
}
