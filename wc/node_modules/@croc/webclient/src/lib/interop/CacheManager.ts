import core = require("core");
import lang = core.lang;
import {LoadOptions, LoadPolicy, LoadPolicyRule, LoadQuery} from "lib/interop/.interop";
import { LoadRule } from "lib/interop/.interop.types";

class CacheManager extends lang.Observable {
	rule: LoadRule;
	cacheAge: number;

	/**
	 * @constructs CacheManager
	 * @extends Observable
	 * @param {Object} [options]
	 */
	constructor(options?: CacheManager.Options) {
		super();
		options = options || {};
		this.rule = options.defaultRule || this.options.defaultRule;
		this.cacheAge = options.cacheAge || this.options.cacheAge;
	}

	options: CacheManager.Options = {
		defaultRule: undefined,
		cacheAge: 60000   // milliseconds
	};

	/**
	 * Return load policy for DataFacadeSmart.
	 * @param query
	 * @param options
	 * @returns {{rule: (String|Number), maxAge: Number, loadFirst: String, allowLocal: Boolean, allowRemote: Boolean, shouldCache: Boolean}}
	 */
	getLoadPolicy(query: LoadQuery, options?: LoadOptions): LoadPolicy | string | LoadPolicyRule {
		let policy = {
			rule: this.rule,
			maxAge: this.cacheAge
		};
		options = options || {};
		if (!query.type && query.route) {
			// non-domain data is requested, local caching is not supported
			policy.rule = LoadRule.remoteOnly;
		} else if (options["preventCaching"] && policy.rule === LoadRule.cached) {
			policy.rule = LoadRule.localIfOffline;
		}

		return policy;
	}
}
CacheManager.mixin({
	rules: LoadRule
});

namespace CacheManager {
	export interface Options {
		defaultRule?: LoadRule;
		cacheAge?: number;
	}
}
export = CacheManager;
