import $ = require("jquery");
import core = require("core");
import PropertyEditor = require("lib/ui/pe/PropertyEditor");
import validation = require("lib/validation");
import { metadata } from "lib/domain/.domain";
import EnumMeta = metadata.EnumMeta;
import EnumMember = metadata.EnumMember;
import lang = core.lang;

class peEnumBase extends PropertyEditor {
	static defaultOptions: peEnumBase.Options = {
		ref: undefined,
		members: undefined,
		excludeMembers: undefined
	};

	protected isDomain: boolean;

	options: peEnumBase.Options;
	flags: boolean;

	/**
	 * @constructs peEnumBase
	 * @extends PropertyEditor
	 * @param options
	 */
	constructor (options: peEnumBase.Options ) {
		options = peEnumBase.mixOptions(options, peEnumBase.defaultOptions);
		super(options);
		this.flags = lang.coalesce(this.options.flags, options.ref && options.ref.flags);
	}

	setViewModel (viewModel: any): void {
		super.setViewModel(viewModel);
		this.isDomain = viewModel && viewModel.meta && viewModel.meta.props && viewModel.meta.props[this.viewModelProp];
	}

	members (): lang.Map<EnumMember> {
		let that = this,
			members: lang.Map<EnumMember>;
		if (that.options.members) {
			members = {};
			core.lang.forEach(that.options.members, (name: string) => {
				let member = that.options.ref.members[name];
				if (member) {
					members[name] = member;
				}
			});
		}
		if (that.options.excludeMembers) {
			members = members || core.lang.clone(that.options.ref.members);
			core.lang.forEach(that.options.excludeMembers, (name: string) => {
				delete members[name];
			});
		}
		return members || that.options.ref.members;
	}

	parseValue(v: any): any {
		let that = this;
		let enumMeta = that.options.ref;
		let valueParser = validation.getParser(enumMeta.vt || "i4");
		if (valueParser) {
			let result = valueParser.tryParse(that.options, v);
			if (result && result.parsedValue) {
				return result.parsedValue;
			}
		}
		if (v === "" || isNaN(v))
			return null;

		return v;
	}

    protected _onDisabledChange (disabled: boolean): void {
		this.element.find("input:not([data-disabled])").prop("disabled", !!disabled);
	}
}

peEnumBase.mixin({
	defaultOptions: peEnumBase.defaultOptions,
});

namespace peEnumBase {
	export interface Options extends PropertyEditor.Options {
		ref?: EnumMeta;
		flags?: boolean;
		members?: Array<string> | lang.Map<string>;
		excludeMembers?: Array<string> | lang.Map<string>;
		disabledMembers?: Array<string> | lang.Map<string>;
	}
}

core.ui.peEnumBase = peEnumBase;

export = peEnumBase;
