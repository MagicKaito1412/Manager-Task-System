import $ = require("jquery");
import core = require("core");
import peDropDownLookup = require("lib/ui/pe/peDropDownLookup");
import DataSource = require("lib/data/DataSource");
import utils = require("lib/utils");
import formatters = require("lib/formatters");
import "xcss!lib/ui/styles/peObjectDropDownLookup.css";

import interop = require("lib/interop/.interop");
import domain = require("lib/domain/.domain");
import lang = core.lang;
import LoadOptions = interop.LoadOptions;
import LoadQuerySpec = interop.LoadQuerySpec;
import LoadResponse = interop.LoadResponse;
import DomainObject = domain.DomainObject;
import UnitOfWork = domain.UnitOfWork;
import EntityMeta = domain.metadata.EntityMeta;
import IDataProvider = peDropDownLookup.IDataProvider;

class peObjectDropDownLookup extends peDropDownLookup {
	static defaultOptions: peObjectDropDownLookup.Options = {
	};

	options: peObjectDropDownLookup.Options;
	viewModel: DomainObject;
	dataProvider: IDataProvider<DomainObject, any>;

	/**
	 * @constructs peObjectDropDownLookup
	 * @extends peDropDownLookup
	 * @param options
	 */
	constructor(options?: peObjectDropDownLookup.Options) {
		options = peObjectDropDownLookup.mixOptions(options, peObjectDropDownLookup.defaultOptions);
		super(options);
	}

	protected createDataProvider(): IDataProvider<DomainObject, any> {
		let baseProvider = super.createDataProvider();
		if (baseProvider) {
			return baseProvider;
		}

		let that = this,
			options = that.options,
			dataSource = options.dataSource;
		if (!dataSource) {
			let entityType = options.entityType || options.urlSuffix || (options.ref && options.ref.name);
			dataSource = new DataSource(that.app, { entityType: entityType });
		}
		let dataProvider = dataSource.isDomain ?
			new peObjectDropDownLookup.DomainDataProvider(that) :
			new peObjectDropDownLookup.JsonDataProvider(that);
		dataProvider.dataSource = dataSource;
		return dataProvider;
	}
}

interface peObjectDropDownLookup {
	// override type of value
	value(v: DomainObject): void;
	value(): DomainObject;
}

peObjectDropDownLookup.mixin({
	defaultOptions: peObjectDropDownLookup.defaultOptions
});

namespace peObjectDropDownLookup {
	export interface JsonAdapter {
		getPresentation(jsonItem: any): string | formatters.SafeHtml;
		getId(jsonItem: any): string;
	}

	export interface Options extends peDropDownLookup.Options {
		ref?: EntityMeta;
		entityType?: string;
		urlSuffix?: string;
		uow?: UnitOfWork;
		dataProvider?: IDataProvider<DomainObject, any>;
		DataProvider?: new (pe?: peObjectDropDownLookup) => IDataProvider<DomainObject, any>;
		/**
		 * Json Adapter - an object with two methods: getId and getPresentation, which accept an json object from DataSource result
		 * It's only used with plain DataSource (DataSource returns json, not domain objects)
		 * @type {Object}
		 */
		jsonAdapter?: JsonAdapter;
		displayField?: string;
		idField?: string;
	}

	export class JsonDataProvider<TItem> extends peDropDownLookup.DataProviderBase<DomainObject, TItem> {
		protected pe: peObjectDropDownLookup;
		protected jsonAdapter: peObjectDropDownLookup.JsonAdapter;
		protected uow: UnitOfWork;
		private _ownUow: boolean;

		constructor(pe: peObjectDropDownLookup) {
			super(pe);

			let options = pe.options,
				jsonAdapter = options.jsonAdapter;
			if (jsonAdapter) {
				if (!lang.isFunction(jsonAdapter.getPresentation) || !lang.isFunction(jsonAdapter.getId)) {
					throw new Error("peDropDownLookup.ctor: jsonAdapter should have 'getPresentation' and 'getId' methods");
				}

				this.jsonAdapter = jsonAdapter;
			} else {
				if (!options.displayField || !options.idField) {
					throw new Error("peDropDownLookup.ctor: plain (json) DataSource was specified but none of required options: jsonAdapter or displayField/idField");
				}

				this.jsonAdapter = {
					getPresentation: function (value: any): string {
						return value ? value[options.displayField] : "";
					},
					getId: function (value: any): string {
						return value ? value[options.idField] : null;
					}
				};
			}
		}

		protected getItems(response: LoadResponse): TItem[] {
			return response.result as TItem[];
		}

		getValue(item: TItem): DomainObject {
			let id = this.jsonAdapter.getId(item),
				refType = this.pe.options.ref;
			this._ensureUow();
			return this.uow.get(refType || this.pe.options.entityType, id) as DomainObject;
		}

		getValuePresentation(value: DomainObject): string {
			let that = this;
			if (value === null) {
				return "";
			}
			if (!that.pe.isDataLoaded) {
				return formatters.formatPropHtml(that.pe.options, value);
			}
			// NOTE: we need to format the value in the same way as it's in dropDown list
			let item = lang.find(that.pe.items.all(), item => that.jsonAdapter.getId(item) === value.id);
			if (!item) {
				return formatters.formatPropHtml(that.pe.options, value);
			}
			return that.getItemPresentation(item).toString();
		}

		getItemPresentation(item: TItem): string | formatters.SafeHtml {
			return this.jsonAdapter.getPresentation(item);
		}

		private _ensureUow (): void {
			if (!this.uow) {
				this.uow = this.pe.options.uow || (this.pe.viewModel && this.pe.viewModel.uow);
				if (!this.uow) {
					this.uow = this.pe.app.createUnitOfWork({connected: true});
					this._ownUow = true;
				}
			}
		}

		dispose(): void {
			if (this.uow && this._ownUow) {
				this.uow.dispose();
			}
		}
	}

	export class DomainDataProvider extends peDropDownLookup.DataProviderBase<DomainObject, DomainObject> {
		protected pe: peObjectDropDownLookup;
		protected uow: UnitOfWork;
		private _ownUow: boolean;

		constructor(pe: peObjectDropDownLookup) {
			super(pe);

			this.uow = this.pe.options.uow;
			if (!this.uow) {
				this.uow = this.pe.app.createUnitOfWork({connected: true});
				this._ownUow = true;
			}
		}

		protected getItems(response: LoadResponse): DomainObject[] {
			return this.uow.fromServerResponse(response) as DomainObject[];
		}

		getValue(item: DomainObject): DomainObject {
			return item;
		}

		getValuePresentation(value: DomainObject): string {
			return formatters.formatPropValue(this.pe.options, value).toString();
		}

		getItemPresentation(item: DomainObject): string | formatters.SafeHtml {
			// NOTE: результат getItemPresentation, если он строка, вставляется как $.text(),
			// поэтому необходимости в дополнительном html-энкодинге нет .
			// Поэтому здесь мы не используем formatPropHtml (он всегда возвращает html как строку).
			// А если результат SafeHtml, то он вставляется как $.html.
			let options = this.pe.options;
			let formatterHtml = options.formatterHtml;
			if (lang.isFunction(formatterHtml)) {
				// явно заданный html-форматтер для свойства
				return formatters.safeHtml(formatterHtml(item));
			}
			let val = formatters.formatPropValue(options, item);
			if (!val) { return ""; }
			if (formatters.isHtml(val)) {
				return val;
			}
			return val.toString();
			// return formatters.formatPropHtml(this.pe.options, item);
		}

		dispose(): void {
			if (this.uow && this._ownUow) {
				this.uow.dispose();
			}
		}
	}
}

core.ui.peObjectDropDownLookup = peObjectDropDownLookup;

core.ui.PropertyEditor.DefaultMapping.register(function (propMd) {
	return propMd.presentation === "dropdown" ? core.ui.peObjectDropDownLookup : null;
}, { vt: "object" });

export = peObjectDropDownLookup;
