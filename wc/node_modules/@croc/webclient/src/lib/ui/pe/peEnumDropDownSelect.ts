import $ = require("jquery");
import core = require("core");
import peEnumDropDownBase = require("lib/ui/pe/peEnumDropDownBase");
import peEnumCheckbox = require("lib/ui/pe/peEnumCheckbox");
import resources = require("i18n!lib/nls/resources");
import "xcss!lib/ui/styles/peEnum.css";
import "xcss!lib/ui/styles/peEnumDropDownSelect.css";
import lang = core.lang;
import {IBindable} from "lib/binding";

class peEnumDropDownSelect extends peEnumDropDownBase {
	static defaultOptions: peEnumDropDownSelect.Options = {
		multipleHeight: undefined,
		multipleSize: undefined,
		modalMultiple: false
	};
	options: peEnumDropDownSelect.Options;
	protected _valuePresenter: JQuery;

	/**
	 * @constructs peEnumDropDownSelect
	 * @extends peEnumDropDownBase
	 * @param {peEnumDropDownSelect.Options} options
	 */
	constructor(options: peEnumDropDownSelect.Options) {
		options = peEnumDropDownSelect.mixContextOptions(options, peEnumDropDownSelect.defaultOptions, peEnumDropDownSelect.contextDefaultOptions);
		super(options);
	}

	protected doRender(domElement: JQuery|HTMLElement): lang.Promisable<void> {

		var that = this,
			options = that.options,
			flags = that.flags,
			bindable: IBindable,
			select;

		super.doRender(domElement);
		that.element.addClass("x-pe-enum-dropdown-select");
		select = that.select;

		if (!flags) {

			bindable = {
				get: function () {
					let v = select.val();
					if (!that.isDomain) {
						return that.parseValue(v);
					}
					return v;
				},
				set: function (v) {
					select.val(v);
				}
			};
		} else {

			if ((core.platform.isMobileDevice || options.modalMultiple) && that.navigationService) {

				that.select.hide();
				let valuePresenter = $("<div class='value-presentation'/>").appendTo(that.element);
				valuePresenter.on("click", function (e) {
					e.preventDefault();
					that._selectOptions();
				});

				that._valuePresenter = valuePresenter;

				bindable = {
					set: function (v) {
						let txtValue = "";
						if (v == undefined) {
							txtValue = options.placeholder;
						} else {
							lang.forEach(that.members(), (enumMember) => {
								if ((v & enumMember.value) == enumMember.value) {
									txtValue && (txtValue += "; ");
									txtValue += (enumMember.descr || enumMember.name);
								}
							});
						}
						valuePresenter.text(txtValue);
					}
				};

			} else {

				if (options.multipleSize !== undefined) {
					that.select.prop("size", options.multipleSize);
				}
				if (options.multipleHeight !== undefined) {
					that.select.css("height", options.multipleHeight);
				}

				bindable = {
					get: function () {
						return that._getFlagsValue();
					},
					set: function (v) {
						that._setFlagsValue(v);
					}
				};
			}

		}

		bindable.onchange = function (handler) {
			select.bind("change", handler);
			return {
				dispose: function () {
					select.unbind("change", handler);
				}
			};
		};

		that.databind(bindable);
	}

	protected _selectOptions() {
		var that = this,
			options = that.options,
			innerPE,
			innerViewModel = core.lang.Observable.create(),
			modelProp = that.viewModelProp;

		if (that.disabled()) {
			return;
		}

		innerPE = new peEnumCheckbox(options);
		innerViewModel[modelProp] = core.lang.Observable.accessor(modelProp);
		innerViewModel[modelProp](that.viewModel[modelProp]());
		innerPE.setViewModel(innerViewModel);

		that.navigationService.openModal({
			part: innerPE,
			dialogOptions: {
				header: options.placeholder,
				overlay: true
			},
			onReturn: (result) => {
				if (result === "ok") {
					that.viewModel[modelProp](innerViewModel[modelProp]());
				}
			}
		});
	}

	protected _setWidth(): void {
		this.select.css("width", this.options.width);
	}
}
namespace peEnumDropDownSelect {
	export interface Options extends peEnumDropDownBase.Options {
		multipleHeight?: number;
		multipleSize?: number;
		modalMultiple?: boolean;
	}
}

// backward compatibility:
peEnumDropDownSelect.mixin({
	defaultOptions: peEnumDropDownSelect.defaultOptions
});

core.ui.peEnumDropDownSelect = peEnumDropDownSelect;

core.ui.PropertyEditor.DefaultMapping.register(function (propMd: peEnumDropDownSelect.Options) {
	if (propMd.ref &&
		(
			core.platform.isMobileDevice ||
			(propMd.ref.flags && propMd.presentation === "select") ||
			(!propMd.ref.flags && propMd.presentation === "select")
		)) {
		return core.ui.peEnumDropDownSelect;
	}
}, { vt: "enum" });

export = peEnumDropDownSelect;

