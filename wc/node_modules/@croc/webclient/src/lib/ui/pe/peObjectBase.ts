import core = require("core");
import PropertyEditor = require("lib/ui/pe/PropertyEditor");

import domain = require("lib/domain/.domain");
import DomainObject = domain.DomainObject;
import EntityMeta = domain.metadata.EntityMeta;

class peObjectBase extends PropertyEditor {
	static defaultOptions: peObjectBase.Options = {
		ref: undefined,
		/**
		 * A kind of relationship
		 * @type {"full"|"aggregation"|"reference"}
		 */
		flavor: "full",
		/**
		 * If true then nested parts will be opened with 'freezeAppState' option
		 * @type {Boolean}
		 */
		freezeUrl: undefined
	};

	options: peObjectBase.Options;

	/**
	 * @description Base class for navigation property editors.
	 * @constructs peObjectBase
	 * @extends PropertyEditor
	 * @param options
	 */
	constructor(options?: peObjectBase.Options) {
		options = peObjectBase.mixOptions(options, peObjectBase.defaultOptions);
		super(options);

		if (this.options.flavor === "aggregation" && this.options.freezeUrl === undefined) {
			this.options.freezeUrl = true;
		}
	}
}

/*
interface peObjectBase {
	// set empty type of value - type should be overridden in child classes
	value(v: {}): void;
	value(): {};
}
*/

peObjectBase.mixin({
	defaultOptions: peObjectBase.defaultOptions
});

namespace peObjectBase {
	export interface Options extends PropertyEditor.Options {
		ref?: EntityMeta|string;
		flavor?: "full"|"aggregation"|"reference";
		freezeUrl?: boolean;
	}
}

export = peObjectBase;
