import $ = require("jquery");
import core = require("core");
import PropertyEditor = require("lib/ui/pe/PropertyEditor");
import binding = require("lib/binding");
import formatters = require("lib/formatters");
import "xcss!lib/ui/styles/peReadOnly.css";

import lang = core.lang;

class peReadOnly  extends PropertyEditor {
	static defaultOptions: peReadOnly.Options = {
		rows: 1,
		nullable: true
	};

	options: peReadOnly.Options;
	
	/**
	 * @class peReadOnly
	 * @extends PropertyEditor
	 * @param options
	 */
	constructor(options: peReadOnly.Options) {
		options = peReadOnly.mixOptions(options, peReadOnly.defaultOptions);
		super(options);
	}

	protected doRender(domElement: JQuery|HTMLElement): lang.Promisable<void> {
		var that = this,
			options = that.options;

		let presentation = that._generatePresentation(options);

		presentation.element.appendTo(domElement);
		that.element = presentation.element;
		that.element.addClass("x-pe-readonly form-control");
		if (options.placeholder) {
			that.element.attr("placeholder", options.placeholder);
		}

		that.databind(presentation.bindable);
		super.doRender.call(this, domElement);
	}

	protected _generatePresentation(options) {
		var element,
			bindable;

		if (options.vt === "boolean") {
			element = $("<input type='checkbox' readonly onclick='return false'/>");
			bindable = binding.html(element, "checked");
		} else if ((options.vt === "string" && options.isMultiline) || options.vt === "text") {
			element = $("<textarea readonly />");
			element.attr("rows", options.rows || 1);
		} else {
			element = $("<input type='text' readonly />");
		}

		if (!bindable) {
			bindable = element;
		}

		return {
			element: element,
			bindable: bindable
		};
	}

	protected createBindableProp() {
		let that = this;
		return binding.expr(that.viewModel, function () {
			let value = this[that.viewModelProp]();
			return formatters.formatPropValue(that.options, value);
		});
	}
}
namespace peReadOnly {
	export interface Options extends PropertyEditor.Options {
		rows?: number;
		/**
		 * Text for placeholder in input.
		 */
		placeholder?: string;
	}
}

// backward compatibility: access to static fields via prototype
peReadOnly.mixin(/** @lends peDateTime.prototype */{
	defaultOptions: peReadOnly.defaultOptions
});

core.ui.peReadOnly = peReadOnly;

// NOTE: peViewOnly should be created for read-only properties by default (with priority 10). Use less priority here.
core.ui.PropertyEditor.DefaultMapping.register(function (propMd) {
	return propMd.readOnly ? core.ui.peReadOnly : null;
}, { priority: 9 });

export = peReadOnly;

