import $ = require("jquery");
import core = require("core");
import peEnumBase = require("lib/ui/pe/peEnumBase");
import validation = require("lib/validation");

import resources = require("i18n!lib/nls/resources");
import Dialog = require("lib/ui/Dialog");

import { metadata } from "lib/domain/.domain";
import EnumMeta = metadata.EnumMeta;
import EnumMember = metadata.EnumMember;
import lang = core.lang;

class peEnumDropDownBase extends peEnumBase  {
	static defaultOptions: peEnumDropDownBase.Options = {
		width: "100%",
		noResultsText: resources["no_matches"],
		placeholder: undefined
	};

	options: peEnumDropDownBase.Options;
	select: JQuery;
	protected _tabIndex: number;

	/**
	 * @constructs peEnumDropDownBase
	 * @extends peEnumBase
	 * @param options
	 */
	constructor (options: peEnumDropDownBase.Options ) {
		options = peEnumDropDownBase.mixOptions(options, peEnumDropDownBase.defaultOptions);
		super(options);
	}

	protected tweakOptions(options: peEnumDropDownBase.Options): void {
		let placeholder = options.placeholder;
		if (!options.placeholder) {
			options.placeholder = options.flags
				? resources["select_value_prompt"]
				: resources["select_values_prompt"];
		}
	}

	protected _renderSelect (domElement: JQuery): JQuery {
		var that = this,
			options = that.options;

		let select = $("<select />").appendTo(domElement);
		select.addClass("form-control");

		select.attr("data-placeholder", options.placeholder);

		if (that.flags) {
			select.attr("multiple", "multiple");
		} else {
			// $("<option />").appendTo(select); - зачем это?
		}
		that._renderOptions(select);

		return select;
	}

	protected _renderOptions (select): void {
		let that = this,
			flags = that.flags;
		// render members as <options> except zero-value member for flags
		core.lang.forEach(that.members(), (enumMember: EnumMember) => {
			if (!flags || enumMember.value !== 0) {
				$("<option />", {
					value: enumMember.value,
					text: enumMember.descr || enumMember.name || enumMember.value
				}).appendTo(select);
			}
		});
	}

	render (domElement) {
		let that = this;
		let element = $("<div></div>").appendTo(domElement);
		element.addClass("x-pe-enum x-pe-enum-dropdown");

		that.element = element;
		that.select = that._renderSelect(element);

		if (that._tabIndex) {
			that._setTabIndex(that._tabIndex);
		}

		super.render(domElement);
	}

	protected _getFlagsValue() {
		let v = 0;
		this.select.find("option:selected").each((index, optElement) => {
			v = v | $(optElement).val();
		});
		return v;
	}

	protected _setFlagsValue(v) {
		let that = this;

		that.select.find("option").each(function(index, optElement){
			let elementVal = $(optElement).val();
			if ((v & elementVal) == elementVal) {
				$(optElement).attr("selected", "selected");
			} else {
				$(optElement).removeAttr("selected");
			}
		});
	}

	protected _setWidth (): void {}

	protected _onDisabledChange (disabled) {
		var that = this,
			select = that.select;

		// TODO: jQuery 3.x: use select.prop("disabled", disabled)
		disabled ?
			select.prop("disabled", "disabled") :
			select.removeAttr("disabled");

		// отключается/включается переход по табу
		// запоминается текущий tabIndex для того, что бы его вернуть, когда pe раздизейблится
		// выполняется только когда _tabIndex еще не задан
		disabled && (that._tabIndex === undefined) && (that._tabIndex = select[0].tabIndex);
		that._setTabIndex(disabled ? -1 : that._tabIndex || 0);
	}

	tabIndex (index): void {
		let that = this;
		if (!arguments.length) {
			return that._tabIndex || (that.element && that.element.find("select").prop("tabIndex"));
		} else {
			that._tabIndex = index;
			if (that.element) {
				that._setTabIndex(index);
			}
		}
	}

	protected _setTabIndex(index): void {
		this.select.prop("tabIndex", index);
	}
}

peEnumDropDownBase.mixin({
	defaultOptions: peEnumDropDownBase.defaultOptions,
});

namespace peEnumDropDownBase {
	export interface Options extends peEnumBase.Options {
		noResultsText?: string;
		placeholder?: string;
	}
}

core.ui.peEnumDropDownBase = peEnumDropDownBase;


export = peEnumDropDownBase;

