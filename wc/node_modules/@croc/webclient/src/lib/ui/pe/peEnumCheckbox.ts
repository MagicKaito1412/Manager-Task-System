import $ = require("jquery");
import core = require("core");
import peEnumBase = require("lib/ui/pe/peEnumBase");
import "xcss!lib/ui/styles/peEnum.css";
import "xcss!lib/ui/styles/peEnumCheckbox.css";

import { IBindable } from "lib/binding";
import { metadata } from "lib/domain/.domain";
import EnumMember = metadata.EnumMember;
import EnumMeta = metadata.EnumMeta;

import lang = core.lang;

class peEnumCheckbox extends peEnumBase {
	static defaultOptions: peEnumCheckbox.Options = {};

	options: peEnumCheckbox.Options;

	private _zeroMember: EnumMember;

	/**
	 * @constructs peEnumCheckbox
	 * @extends peEnumBase
	 * @param options
	 */
	constructor(options?: peEnumCheckbox.Options) {
		options = peEnumCheckbox.mixOptions(options, peEnumCheckbox.defaultOptions);
		super(options);
	}

	protected doRender(domElement: JQuery|HTMLElement): lang.Promisable<void> {
		let that = this,
			ref: EnumMeta = that.options.ref,
			$element: JQuery = $("<div class='x-pe-enum x-pe-enum-checkbox' />").appendTo(domElement);

		if (that.options.orientation === "horizontal") {
			$element.addClass("x-pe-enum-checkbox-horizontal");
		}
		let disabledMembers = {};
		if (that.options.disabledMembers) {
			core.lang.forEach(that.options.disabledMembers, (name: string) => {
				disabledMembers[name] = true;
			});
		}

		lang.forEach(that.members(), (enumMember: EnumMember, name: string) => {
			// для флагов нулевой элемент генерируется только если свойство нулабельное
			if (!that.flags || (enumMember.value !== 0 || that.options.nullable)) {
				let $input = $("<input />", {
								type: "checkbox",
								value: enumMember.value,
								name: that.options.name,
								disabled: disabledMembers && disabledMembers[name]
							});
				if (disabledMembers[name]) {
					$input.attr("data-disabled", "1")
				}
				$("<div></div>")
					.addClass(that.options.orientation === "horizontal" ? "checkbox-inline" : "checkbox")
					.append(
						$("<label />")
							.append($input)
							.append(enumMember.descr || name)
					)
					.appendTo($element);
			}
		});

		// эмуляция поведения радиобатонов для чекбоксов
		if (!that.flags) {
			$element.find("input").bind("change", function (): void {
				// все кроме кликнутого снимаются
				$element.find(":checkbox").not($(this)).prop("checked", false);
				that.options.nullable || $(this).prop("checked", true);
			});
		} else {
			// если это флаги - нужно добавить обработку нулевого элемента
			that._zeroMember = core.lang.find(that.members(), enumMember => enumMember.value === 0);
			// дополнительная логика при кликах на чекбоксах при условии наличии нулевого элемента и нулабельности свойства
			if (that._zeroMember && that.options.nullable) {
				let zeroCheckElement = $element.find(":checkbox[value='0']").bind("change", function (): void {
					// если кликнули по нулевому элементу - снимаем галки со всех остальных
					$element.find(":checkbox").not($(this)).prop("checked", false);
					$(this).prop("checked", $(this).prop("checked"));
				});
				// если кликнули по остальным галкам - снять галку нулевого элемента
				$element.find(":checkbox").not(zeroCheckElement).bind("change", function (): void {
					zeroCheckElement.prop("checked", false);
				});
			}
		}

		// принудительное фокусирование чекбокса при клике мышкой
		$element.find("input").click(e => {
			e.stopPropagation();
			$(e.currentTarget).focus();
		});
		// при клике по лейблу генерится "лишний" клик на чекбоксе - воспрепятствуем
		$element.find("label").click(e => {
			e.stopPropagation();
		});

		that.element = $element;
		that.databind(that._getBindable($element));

		return super.doRender(domElement);
	}

	protected _getBindable($element: JQuery): IBindable {
		let that = this,
			bindable: IBindable;

		if (that.flags) {
			bindable = {
				get(): any {
					let v = 0;
					$element.find("input:checked").each((index, el) => {
						v = v | $(el).val();
					});

					// сняты все галки
					if (!$element.find("input:checked").length) {
						// нет нулевого, свойство нулабельное - значение null
						// нет нулевого, свойство не ненулабельное - значение тоже null и будет ошибка валидации
						// есть нулевой, нулабельное - зачение null
						if (!that._zeroMember || that._zeroMember && that.options.nullable) {
							v = null;
						}
					}

					// для случая наличия нулевого элемента и ненулабельности - значение будет 0
					return v;
				},
				set(v: any): void {
					if (v == null) {
						$element.find("input:checked").prop("checked", false);
					} else if (v === 0 && that._zeroMember && that.options.nullable) {
						$element.find(":checkbox[value='0']").prop("checked", true);
					} else {
						$element.find("input").each((index, el) => {
							let elementVal = parseInt($(el).val()) || 0,
								checked = elementVal && (v & elementVal) === elementVal;
							$(el).prop("checked", checked);
						});
					}
				}
			};
		} else {
			bindable = {
				get(): any {
					let v = $element.find("input:checked").val();
					if (!that.isDomain) {
						return that.parseValue(v);
					}
					return v;
				},
				set(v: any): void {
					if (v == null) {
						$element.find("input:checked").prop("checked", false);
					} else {
						$element.find("input").each((index, el) => {
							let checked = $(el).val() == v; // don't use strict compare ===, string and numbers can be compared here
							$(el).prop("checked", checked);
						});
					}
				}
			};
		}

		bindable.onchange = function (handler: (e) => void): lang.IDisposable {
			$element.find("input").bind("change", handler);
			return {
				dispose(): void {
					$element.find("input").unbind("change", handler);
				}
			};
		};

		return bindable;
	}
}

namespace peEnumCheckbox {
	export interface Options extends peEnumBase.Options {
		orientation?: "vertical" | "horizontal";
	}
}

peEnumCheckbox.mixin({
	defaultOptions: peEnumCheckbox.defaultOptions
});

core.ui.peEnumCheckbox = peEnumCheckbox;

core.ui.PropertyEditor.DefaultMapping.register((propMd: peEnumCheckbox.Options) => {
	if (propMd.ref) {
		// либо явно указан presentation в виде чекбоксов,
		// либо это флаги и presentation по умолчанию
		if (propMd.presentation === "checkbox" || !propMd.presentation && (propMd.flags || propMd.ref.flags)) {
			return core.ui.peEnumCheckbox;
		}
	}
}, { vt: "enum" });

export = peEnumCheckbox;
