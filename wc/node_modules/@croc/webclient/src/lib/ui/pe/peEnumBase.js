define(["require", "exports", "core", "lib/ui/pe/PropertyEditor", "lib/validation"], function (require, exports, core, PropertyEditor, validation) {
    "use strict";
    var lang = core.lang;
    var peEnumBase = (function (_super) {
        __extends(peEnumBase, _super);
        /**
         * @constructs peEnumBase
         * @extends PropertyEditor
         * @param options
         */
        function peEnumBase(options) {
            var _this = this;
            options = peEnumBase.mixOptions(options, peEnumBase.defaultOptions);
            _this = _super.call(this, options) || this;
            _this.flags = lang.coalesce(_this.options.flags, options.ref && options.ref.flags);
            return _this;
        }
        peEnumBase.prototype.setViewModel = function (viewModel) {
            _super.prototype.setViewModel.call(this, viewModel);
            this.isDomain = viewModel && viewModel.meta && viewModel.meta.props && viewModel.meta.props[this.viewModelProp];
        };
        peEnumBase.prototype.members = function () {
            var that = this, members;
            if (that.options.members) {
                members = {};
                core.lang.forEach(that.options.members, function (name) {
                    var member = that.options.ref.members[name];
                    if (member) {
                        members[name] = member;
                    }
                });
            }
            if (that.options.excludeMembers) {
                members = members || core.lang.clone(that.options.ref.members);
                core.lang.forEach(that.options.excludeMembers, function (name) {
                    delete members[name];
                });
            }
            return members || that.options.ref.members;
        };
        peEnumBase.prototype.parseValue = function (v) {
            var that = this;
            var enumMeta = that.options.ref;
            var valueParser = validation.getParser(enumMeta.vt || "i4");
            if (valueParser) {
                var result = valueParser.tryParse(that.options, v);
                if (result && result.parsedValue) {
                    return result.parsedValue;
                }
            }
            if (v === "" || isNaN(v))
                return null;
            return v;
        };
        peEnumBase.prototype._onDisabledChange = function (disabled) {
            this.element.find("input:not([data-disabled])").prop("disabled", !!disabled);
        };
        peEnumBase.defaultOptions = {
            ref: undefined,
            members: undefined,
            excludeMembers: undefined
        };
        return peEnumBase;
    }(PropertyEditor));
    peEnumBase.mixin({
        defaultOptions: peEnumBase.defaultOptions
    });
    core.ui.peEnumBase = peEnumBase;
    return peEnumBase;
});
//# sourceMappingURL=peEnumBase.js.map