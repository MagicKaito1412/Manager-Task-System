define(["require", "exports", "core", "lib/ui/pe/peDropDownLookup", "lib/data/DataSource", "lib/formatters", "xcss!lib/ui/styles/peObjectDropDownLookup.css"], function (require, exports, core, peDropDownLookup, DataSource, formatters) {
    "use strict";
    var lang = core.lang;
    var peObjectDropDownLookup = (function (_super) {
        __extends(peObjectDropDownLookup, _super);
        /**
         * @constructs peObjectDropDownLookup
         * @extends peDropDownLookup
         * @param options
         */
        function peObjectDropDownLookup(options) {
            var _this = this;
            options = peObjectDropDownLookup.mixOptions(options, peObjectDropDownLookup.defaultOptions);
            _this = _super.call(this, options) || this;
            return _this;
        }
        peObjectDropDownLookup.prototype.createDataProvider = function () {
            var baseProvider = _super.prototype.createDataProvider.call(this);
            if (baseProvider) {
                return baseProvider;
            }
            var that = this, options = that.options, dataSource = options.dataSource;
            if (!dataSource) {
                var entityType = options.entityType || options.urlSuffix || (options.ref && options.ref.name);
                dataSource = new DataSource(that.app, { entityType: entityType });
            }
            var dataProvider = dataSource.isDomain ?
                new peObjectDropDownLookup.DomainDataProvider(that) :
                new peObjectDropDownLookup.JsonDataProvider(that);
            dataProvider.dataSource = dataSource;
            return dataProvider;
        };
        peObjectDropDownLookup.defaultOptions = {};
        return peObjectDropDownLookup;
    }(peDropDownLookup));
    peObjectDropDownLookup.mixin({
        defaultOptions: peObjectDropDownLookup.defaultOptions
    });
    (function (peObjectDropDownLookup) {
        var JsonDataProvider = (function (_super) {
            __extends(JsonDataProvider, _super);
            function JsonDataProvider(pe) {
                var _this = _super.call(this, pe) || this;
                var options = pe.options, jsonAdapter = options.jsonAdapter;
                if (jsonAdapter) {
                    if (!lang.isFunction(jsonAdapter.getPresentation) || !lang.isFunction(jsonAdapter.getId)) {
                        throw new Error("peDropDownLookup.ctor: jsonAdapter should have 'getPresentation' and 'getId' methods");
                    }
                    _this.jsonAdapter = jsonAdapter;
                }
                else {
                    if (!options.displayField || !options.idField) {
                        throw new Error("peDropDownLookup.ctor: plain (json) DataSource was specified but none of required options: jsonAdapter or displayField/idField");
                    }
                    _this.jsonAdapter = {
                        getPresentation: function (value) {
                            return value ? value[options.displayField] : "";
                        },
                        getId: function (value) {
                            return value ? value[options.idField] : null;
                        }
                    };
                }
                return _this;
            }
            JsonDataProvider.prototype.getItems = function (response) {
                return response.result;
            };
            JsonDataProvider.prototype.getValue = function (item) {
                var id = this.jsonAdapter.getId(item), refType = this.pe.options.ref;
                this._ensureUow();
                return this.uow.get(refType || this.pe.options.entityType, id);
            };
            JsonDataProvider.prototype.getValuePresentation = function (value) {
                var that = this;
                if (value === null) {
                    return "";
                }
                if (!that.pe.isDataLoaded) {
                    return formatters.formatPropHtml(that.pe.options, value);
                }
                // NOTE: we need to format the value in the same way as it's in dropDown list
                var item = lang.find(that.pe.items.all(), function (item) { return that.jsonAdapter.getId(item) === value.id; });
                if (!item) {
                    return formatters.formatPropHtml(that.pe.options, value);
                }
                return that.getItemPresentation(item).toString();
            };
            JsonDataProvider.prototype.getItemPresentation = function (item) {
                return this.jsonAdapter.getPresentation(item);
            };
            JsonDataProvider.prototype._ensureUow = function () {
                if (!this.uow) {
                    this.uow = this.pe.options.uow || (this.pe.viewModel && this.pe.viewModel.uow);
                    if (!this.uow) {
                        this.uow = this.pe.app.createUnitOfWork({ connected: true });
                        this._ownUow = true;
                    }
                }
            };
            JsonDataProvider.prototype.dispose = function () {
                if (this.uow && this._ownUow) {
                    this.uow.dispose();
                }
            };
            return JsonDataProvider;
        }(peDropDownLookup.DataProviderBase));
        peObjectDropDownLookup.JsonDataProvider = JsonDataProvider;
        var DomainDataProvider = (function (_super) {
            __extends(DomainDataProvider, _super);
            function DomainDataProvider(pe) {
                var _this = _super.call(this, pe) || this;
                _this.uow = _this.pe.options.uow;
                if (!_this.uow) {
                    _this.uow = _this.pe.app.createUnitOfWork({ connected: true });
                    _this._ownUow = true;
                }
                return _this;
            }
            DomainDataProvider.prototype.getItems = function (response) {
                return this.uow.fromServerResponse(response);
            };
            DomainDataProvider.prototype.getValue = function (item) {
                return item;
            };
            DomainDataProvider.prototype.getValuePresentation = function (value) {
                return formatters.formatPropValue(this.pe.options, value).toString();
            };
            DomainDataProvider.prototype.getItemPresentation = function (item) {
                // NOTE: результат getItemPresentation, если он строка, вставляется как $.text(),
                // поэтому необходимости в дополнительном html-энкодинге нет .
                // Поэтому здесь мы не используем formatPropHtml (он всегда возвращает html как строку).
                // А если результат SafeHtml, то он вставляется как $.html.
                var options = this.pe.options;
                var formatterHtml = options.formatterHtml;
                if (lang.isFunction(formatterHtml)) {
                    // явно заданный html-форматтер для свойства
                    return formatters.safeHtml(formatterHtml(item));
                }
                var val = formatters.formatPropValue(options, item);
                if (!val) {
                    return "";
                }
                if (formatters.isHtml(val)) {
                    return val;
                }
                return val.toString();
                // return formatters.formatPropHtml(this.pe.options, item);
            };
            DomainDataProvider.prototype.dispose = function () {
                if (this.uow && this._ownUow) {
                    this.uow.dispose();
                }
            };
            return DomainDataProvider;
        }(peDropDownLookup.DataProviderBase));
        peObjectDropDownLookup.DomainDataProvider = DomainDataProvider;
    })(peObjectDropDownLookup || (peObjectDropDownLookup = {}));
    core.ui.peObjectDropDownLookup = peObjectDropDownLookup;
    core.ui.PropertyEditor.DefaultMapping.register(function (propMd) {
        return propMd.presentation === "dropdown" ? core.ui.peObjectDropDownLookup : null;
    }, { vt: "object" });
    return peObjectDropDownLookup;
});
//# sourceMappingURL=peObjectDropDownLookup.js.map