import $ = require("jquery");
import core = require("core");
import binding = require("lib/binding");
import PropertyEditor = require("lib/ui/pe/PropertyEditor");
import "xcss!lib/ui/styles/peBoolean.css";

const checkStates = {
	unchecked: 0,
	checked: 1,
	indeterminate: 2
};

import lang = core.lang;
import {IBindable} from "lib/binding";

class peBoolean  extends PropertyEditor {
	static defaultOptions: peBoolean.Options = {
	};

	/**
	 * Default options by context
	 */
	static contextDefaultOptions: lang.Map<PropertyEditor.Options> = {
		"inline": {
			hideHelp: true
		}
	};

	options: peBoolean.Options;

	/**
	 * @constructs peBoolean
	 * @extends PropertyEditor
	 * @param {Object} options
	 */
	constructor(options: peBoolean.Options) {
		options = peBoolean.mixContextOptions(options,
			peBoolean.defaultOptions,
			peBoolean.contextDefaultOptions
		);
		super(options);
		if ((this.options.threeStates === undefined) && this.options.nullable) {
			this.options.threeStates = true;
		} else if (this.options.threeStates && !this.options.nullable) {
			// NOTE: illegal combination: we can't store '3rd state' in a not-null property
			this.options.threeStates = false;
		}
	}

	protected doRender(domElement: JQuery|HTMLElement): lang.Promisable<void> {
		var that = this,
			options = that.options;

		let element = $("<input type='checkbox'/>").appendTo(domElement);
		if (options.showLabel) {
			element.wrap("<div class='checkbox'></div>");
			element.wrap("<label></label>");
			let $parent = element.parent();
			$parent.append(that.title());
			// NOTE: ObjectEditorPresenter для опции pe hint выводит тултип при наведении на иконку "?",
			// которая в свою очередь выводится в шаблоне EditorPage.peContainer
			// Но иконка выводится для label, если задана опция showLabel, то следовательно label в шаблоне не выводится
			// Выведем иконку помощи (если есть hint) справа от лейбла
			if (!options.hideHelp && options.hint) {
				let iconHtml = core.ui.iconProvider.getIcon("help", {addCssClass: "x-pe-help"});
				if (iconHtml) {
					$parent.append(" " + iconHtml);
				}
			}

		}
		element.addClass("x-pe-bool");
		element.attr("name", options.name);
		// принудительное фокусирование чекбокса при клике мышкой
		element.bind("click", function (): void {
			$(this).focus();
		});

		that.element = element;

		let bindableElement: IBindable;
		if (options.threeStates) {
			// поддержка nullable чекбоксов
			// TODO добавить поддержку стокового браузера android и Safari mobile on iOS 3.1
			// см. трик с прозрачностью http://stackoverflow.com/questions/1726096/tri-state-check-box-in-html
			// определение поддержки indeterminate - http://www.softwire.com/blog/index.php/2012/06/18/using-tri-state-checkboxes-in-html/

			let correctionChangeHandler = function() {
				let checkState = element.data("check_state");
				element.data("check_state", !checkState ? checkStates.indeterminate : (checkState - 1));
			};

			bindableElement = {
				get: function () {
					return (element.data("check_state") === checkStates.indeterminate)
						? null
						: !!element.data("check_state");
				},
				set: function (v) {
					if (v == null) {
						element.prop("indeterminate", true);
						element.data("check_state", checkStates.indeterminate);
					} else {
						element.prop("indeterminate", false);
						element.prop("checked", !!v);
						element.data("check_state", v ? checkStates.checked : checkStates.unchecked);
					}
				},
				onchange: function (handler) {
					element.bind("change", correctionChangeHandler);
					element.bind("change", handler);
					return {
						dispose: () => {
							element.unbind("change", handler);
							element.unbind("change", correctionChangeHandler);
						}
					};
				}
			};
		} else if (options.nullable) {
			bindableElement = binding.html(element, "checkedNull");
		} else {
			bindableElement = binding.html(element, "checked");
		}

		that.databind(bindableElement);

		super.doRender.call(that, domElement);
	}
}
namespace peBoolean {
	export interface Options extends PropertyEditor.Options {
		/**
		 * Checkbox with tree state (checked=>true, unchecked=>false, indeterminate=>null)
		 * @type {Boolean}
		 */
		threeStates?: boolean;
		/**
		 * Show label (title) for checkbox. Also it enables showing help icon (if hint && !hideHelp)
		 */
		showLabel?: boolean;
	}
}

// backward compatibility: access to static fields via prototype
peBoolean.mixin(/** @lends peBoolean.prototype */{
	defaultOptions: peBoolean.defaultOptions
});

core.ui.peBooleanCheckbox = peBoolean;
core.ui.peBoolean = peBoolean;

PropertyEditor.DefaultMapping["boolean"] = peBoolean;
PropertyEditor.DefaultMapping.register(function (propMd) {
	return propMd.presentation === "checkbox" ?  core.ui.peBoolean : null;
}, { vt: "boolean" });

export = peBoolean;
