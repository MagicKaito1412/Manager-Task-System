import $ = require("jquery");
import core = require("core");
import peEnumBase = require("lib/ui/pe/peEnumBase");
import utils = require("lib/utils");
import resources = require("i18n!lib/nls/resources");

import "xcss!lib/ui/styles/peEnum.css";
import "xcss!lib/ui/styles/peEnumRadio.css";

import { metadata } from "lib/domain/.domain";
//import EnumMeta = metadata.EnumMeta;
//import EnumMember = metadata.EnumMember;
import lang = core.lang;

class peEnumRadio extends peEnumBase {
	static defaultOptions: peEnumRadio.Options = {
		useValueAsLabel: undefined,
		orientation: "vertical",        // "horizontal"
		changeTrigger: "keyPressed",    // "lostFocus"
		nullValueText: resources["not_specified"],
		showNullValue: true
	};

	options: peEnumRadio.Options;
	showNullValue: boolean;

	/**
	 * @constructs peEnumRadio
	 * @extends peEnumBase
	 * @param options
	 */
	constructor(options: peEnumRadio.Options) {
		options = peEnumRadio.mixOptions(options, peEnumRadio.defaultOptions);
		super(options);
	}

	protected doRender(domElement: JQuery|HTMLElement): lang.Promisable<void> {
		let that = this,
			bindable;

		let element = $("<div/>").appendTo(domElement);
		element.addClass("x-pe-enum x-pe-enum-radio");

		let groupName = that.options.name + "_" + (that.viewModel.id || utils.generateGuid());
		let isHorizontal = that.options.orientation === "horizontal";
		that.showNullValue = that.options.nullable && that.options.showNullValue;
		if (that.showNullValue) {
			// add "null" option:
			let id = groupName + "_null";
			$("<div></div>")
				.addClass(isHorizontal ? "radio-inline" : "radio")
				.append(
					$("<label />")
						.attr("for", id)
						.append($("<input />", {type: "radio", id: id, value: "", name: groupName }))
						.append(that.options.nullValueText)
				)
				.appendTo(element);
		}
		let disabledMembers = {};
		if (that.options.disabledMembers) {
			core.lang.forEach(that.options.disabledMembers, (name: string) => {
				disabledMembers[name] = true;
			});
		}
		core.lang.forEach(that.members(), (enumMember: metadata.EnumMember, name: string) => {
			let id = groupName + "_" + enumMember.value;
			let $input = $("<input />", {
							type: "radio",
							id: id,
							value: enumMember.value,
							name: groupName,
							disabled: disabledMembers[name]
						});
			if (disabledMembers[name]) {
				$input.attr("data-disabled", "1")
			}
			$("<div></div>")
				.addClass(isHorizontal ? "radio-inline" : "radio")
				.append(
					$("<label />")
						.attr("for", id)
						.append($input)
						.append(that.options.useValueAsLabel ? enumMember.value : enumMember.descr || name)
				)
				.appendTo(element);
		});

		// принудительное фокусирование батона при клике мышкой
		element.bind("click", function (e: JQueryMouseEventObject): void {
			if (e.target.tagName === "INPUT") {
				$(e.target).focus();
			}
		});

		bindable = {
			get(): any {
				let v = element.find("input:checked").val();
				if (!that.isDomain) {
					return that.parseValue(v);
				}
				return v !== undefined ? v : null;
			},
			set(v: any): void {
				if (v != null) {
					element.find("input[value='" + v + "']").prop("checked", true);
				} else if (that.showNullValue) {
					element.find("input[value='']").prop("checked", true);
				} else {
					element.find("input:checked").prop("checked", false);
				}
			},
			onchange(handler: () => void): lang.IDisposable {
				// когда обновляется значение
				if (that.options.changeTrigger === "keyPressed") {
					// перемещение по группе (ползаем стрелками и перемещаем фокус)
					element.find("input").bind("change", handler);
				} else {
					// уходим из группы радиобатонов
					that.element.focusout(() => {
						window.setTimeout(() => {
							if ($("[id*='" + that.id + "']").is($(document.activeElement))) {
								handler();
							}
						}, 200);
					});
				}
				return {
					dispose(): void {
						element.find("input").unbind("change", handler);
					}
				};
			}
		};

		that.element = element;
		that.databind(bindable);

		return super.doRender(domElement);
	}

	focus(): void {
		if (this.element) {
			let input = this.element.find("input");
			let checked = input.filter(":checked");
			let target = checked[0] || input[0];
			if (target) {
				$(target).focus();
			}
		}
	}
}

namespace peEnumRadio {
	export interface Options extends peEnumBase.Options {
		useValueAsLabel?: boolean;
		orientation?: "vertical" | "horizontal";
		changeTrigger?: "keyPressed" | "lostFocus";
		nullValueText?: string;
		showNullValue?: boolean;
	}
}

peEnumRadio.mixin({
	defaultOptions: peEnumRadio.defaultOptions
});

core.ui.peEnumRadio = peEnumRadio;

core.ui.PropertyEditor.DefaultMapping.register((propMd: peEnumRadio.Options) => {
	return (propMd.ref && !propMd.flags && !propMd.ref.flags && propMd.presentation === "radio") ? core.ui.peEnumRadio : null;
}, { vt: "enum" });

export = peEnumRadio;
