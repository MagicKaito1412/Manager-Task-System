import $ = require("jquery");
import core = require("core");
import View = require("lib/ui/handlebars/View");
import template = require("xhtmpl!lib/ui/templates/AppToolbar.hbs");
import Part  = require("lib/ui/Part");
import Menu = require("lib/ui/menu/Menu");
import AppNavMenu = require("lib/ui/menu/AppNavMenu");
import AppNavMenuPresenter = require("lib/ui/menu/AppNavMenuPresenter");
import LanguageMenu = require("lib/ui/menu/LanguageMenu");
import SystemMenu = require("lib/ui/menu/SystemMenu");
import OnlineBeacon = require("lib/ui/OnlineBeacon");
import PopupView = require("lib/ui/PopupView");
import MenuNavGridPresenter = require("lib/ui/menu/MenuNavGridPresenter");
import resources = require("i18n!lib/nls/resources");
import "xcss!lib/ui/styles/appToolbar.css";


class AppToolbar extends View {
	defaultOptions: AppToolbar.Options;

	options: AppToolbar.Options;
	sysMenu: SystemMenu;
	eventPublisher: core.events.EventPublisher;
	navMenuPresenter: AppNavMenuPresenter;
	langMenu: LanguageMenu;
	onlineBeacon: OnlineBeacon;
	authMenu; // TODO

	/**
	 * Application navigation menu.
	 * @observable-property {AppNavMenu}
	 */
	@core.lang.decorators.observableAccessor()
	appNavMenu: core.lang.ObservableProperty<Menu>;

	/**
	 * @constructs View
	 * @extends StatefulPart
	 * @param {Application} app
	 * @param {View.defaultOptions} options View options
	 */
	constructor(app: core.Application, options?: AppToolbar.Options) {
		options = AppToolbar.mixOptions(options, AppToolbar.prototype.defaultOptions);
		super(options);

		this.eventPublisher = app.eventPublisher;
		this.initComponents(app);
	}

	initComponents(app: core.Application): void {
		let that = this;
		that.initSystemMenu(app);
		that.initNavToolbar(app);
		that.initLanguageMenu(app);
		that.initAuthMenu(app);
		that.initOnlineBeacon(app);
	}

	initSystemMenu(app: core.Application): void {
		let that = this,
			menuItem,
			opt;
		if (that.options.sysMenu) {
			that.sysMenu = app.sysMenu;
			if (!that.sysMenu) {
				opt = core.lang.isObject(that.options.sysMenu) ? that.options.sysMenu :	{};
				that.sysMenu = new SystemMenu(opt);
				// Field `Application.sysMenu` is used by modules
				app.sysMenu = that.sysMenu;

				menuItem = that.sysMenu.getRootItem("app-navigation");
				if (menuItem && !menuItem.getPart) {
					menuItem.getPart = function () {
						let viewOptions = {
							viewModel: that.appNavMenu(),
							body: new MenuNavGridPresenter(that.options.navGridPresenter),
							title: resources["app-navigation"],
							disposeOnClose: true,
							showCross: true,
							height: undefined, // auto-height
							width: undefined // auto-width
						};
						return new PopupView(viewOptions);
					};
				}
			}
		}
	}

	initNavToolbar(app/*: core.Application*/): void {
		let that = this,
			navMenu,
			opt;
		// top navigation menu (switching areas)
		if (that.options.navToolbar) {
			that.navMenuPresenter = app.navMenuPresenter;
			if (!that.navMenuPresenter) {
				navMenu = that.appNavMenu();
				if (!navMenu) {
					// create a fake empty menu so AppNavMenuPresenter can render
					navMenu = Menu.create({items: []});
				}
				opt = core.lang.isObject(that.options.navToolbar) ? that.options.navToolbar : {};
				opt.viewModel = navMenu;
				that.navMenuPresenter = new AppNavMenuPresenter(opt);
			}
			that.bind("change:appNavMenu", function (sender, value) {
				that.navMenuPresenter.setViewModel(value);
				window.setTimeout(function () {
					that.navMenuPresenter.rerender();
				}, 50);
			});
		}
	}

	initLanguageMenu(app/*: core.Application*/): void {
		let that = this;
		if (that.options.langMenu) {
			let opt = core.lang.isObject(that.options.langMenu) ? <LanguageMenu.Options>that.options.langMenu : {};
			that.langMenu = app.langMenu || new LanguageMenu(app.config, opt);
		}
	}

	initOnlineBeacon(app/*: core.Application*/): void {
		let that = this;
		if (that.options.onlineBeacon) {
			let opt = core.lang.isObject(that.options.onlineBeacon) ? that.options.onlineBeacon : {};
			that.onlineBeacon = app.onlineBeacon || new OnlineBeacon(app, opt);
		}
	}

	initAuthMenu(app/*: core.Application*/): void {
		let that = this,
			menuClass = core.ui["AuthMenu"];
		// authentication menu (login/logout)
		if (that.options.authMenu && app.config.security && menuClass) {
			// NOTE: AuthMenu can be absent if Windows-auth is enabled for the whole site
			let opt = core.lang.isObject(that.options.authMenu) ? that.options.authMenu : {};
			that.authMenu = app.authMenu || new menuClass(app.dataFacade, that.eventPublisher, opt);
		}
	}

	protected afterRender(): void {
		let that = this,
			$domElement = that.$domElement,
			$navbar = $domElement.find(".x-app-navbar"),
			theme = that.options.theme;

		if (theme) {
			let cssClass: string;
			if (theme === "dark") {
				cssClass = "x-app-navbar--dark";
			} else if (theme === "light") {
				cssClass = "x-app-navbar--light";
			}
			$navbar.addClass(cssClass);
		}
		if (that.options.cssClass) {
			$navbar.addClass(that.options.cssClass);
		}

		if (that.navMenuPresenter) {
			$navbar.bind("domChanged", () => {
				that.navMenuPresenter.reflow();
			});
		}

		if (that.options.affix) {
			let opt = that.options.affix;
			if (!core.lang.isObject(opt)) {
				opt = {};
			}
			opt.element = $navbar;
			that.eventPublisher.publish("ui.affix.add_element", opt);
		}

		super.afterRender();
	}

	protected onReady(): void {
		let navMenuPresenter = this.navMenuPresenter;
		if (navMenuPresenter) {
			navMenuPresenter.reflow();
		}
	}
}

AppToolbar.mixin({
	defaultOptions: {
		template: template,
		sysMenu: {
			items: [{
				name: "app-navigation",
				title: resources["app-navigation"],
				order: -1
			}]
		},
		navToolbar: true,
		navGridPresenter: {
			itemCssClass: "x-navigation"
		},
		langMenu: true,
		onlineBeacon: true,
		authMenu: true,
		affix: {
			suspendByScreenWidth: 600,
			stuckBehaviors: [] // reset default behaviors
		},
		theme: undefined,      // "light" -> "x-app-navbar--light", "dark" -> "x-app-navbar-dark"
		cssClass: undefined,
		unbound: true
	}
});
namespace AppToolbar {
	export interface Options extends Part.Options {
		template?: HandlebarsTemplateDelegate;
		sysMenu?: Menu.Options;
		navToolbar?: boolean | AppNavMenuPresenter.Options;
		navGridPresenter?: MenuNavGridPresenter.Options;
		langMenu?: boolean | LanguageMenu.Options;
		onlineBeacon?: boolean | any; // TODO: OnlineBeacon.Options;
		authMenu?: boolean | any; // TODO: AuthMenu.Options;
		affix?: any;
		theme?: string;      // "light" -> "x-app-navbar--light", "dark" -> "x-app-navbar-dark"
		cssClass?: string;
	}
}

core.ui.AppToolbar = AppToolbar;
export = AppToolbar;
