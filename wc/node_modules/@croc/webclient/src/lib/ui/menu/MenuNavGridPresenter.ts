import $ = require("jquery");
import core = require("core");
import binding = require("lib/binding");
import Part = require("lib/ui/Part");
import Menu = require("lib/ui/menu/Menu");
import AppNavMenu = require("lib/ui/menu/AppNavMenu");
import MenuPresenterBase = require("lib/ui/menu/MenuPresenterBase");
import "xcss!lib/ui/styles/menuNav.css";

class MenuNavGridPresenter extends MenuPresenterBase {
	/**
	 * @type {Object}
	 */
	static defaultOptions: MenuNavGridPresenter.Options = {
		/**
		 * Columns number. if you change this options - change style .x-app-nav-cell (width)
		 * @type {Number}
		 */
		columns: 3,
		classes: {
			root: "x-app-nav-grid",
			cell: "x-app-nav-cell",
			section: "x-app-nav-section"
		}
	};

	options: MenuNavGridPresenter.Options;

	/**
	 * Grid menu presenter for navigation menus
	 * @constructs MenuNavGridPresenter
	 * @extends MenuPresenterBase
	 * @param {Object} options
	 */
	constructor(options: MenuNavGridPresenter.Options) {
		options = MenuNavGridPresenter.mixOptions(options, MenuNavGridPresenter.defaultOptions);
		super(options);
	}

	protected _createRootEl(domElement: JQuery|HTMLElement): JQuery {
		return $("<tbody></tbody>").appendTo($("<table class='" + this.options.classes.root + "'></table>").appendTo(domElement));
	}

	protected _createItemEl(item: Menu.Item): JQuery {
		let anchor = $("<a href='" + (item.url || "#") + "'></a>");

		if (this.options.itemCssClass) {
			anchor.toggleClass(this.options.itemCssClass);
		}
		return anchor;
	}

	protected _processItems(items: Menu.Item[], menuRoot: JQuery): void {
		let that = this,
			cnt = 0;

		if (items && items.length > 0) {
			let menuRowContainer;
			items.forEach((item: Menu.Item) => {
				if (cnt % that.options.columns === 0) {
					menuRowContainer = $("<tr></tr>").appendTo(menuRoot);
				}
				let itemElm = that._processItem(item);
				if (itemElm) {
					cnt++;
					if (item.cssClass) {
						itemElm.addClass(item.cssClass);
					}
					itemElm.appendTo(menuRowContainer);
				}
			});
		}
	}

	protected _processItem(item: Menu.Item): JQuery {
		let that = this;
		if (item.hidden) { return; }
		if (item.command) {
			if (!core.lang.unlazy(item.command).canExecute()) { return; }
		}
		let itemCellContainer = $("<td class='" + that.options.classes.cell +"' />");
		let itemContainer = $("<div class='" + that.options.classes.section +"' />").appendTo(itemCellContainer);

		if (!that.options.hideHeaders) {
			let itemEl = that._createActionItem(item);
			itemEl = $("<h4></h4>").append(itemEl);
			itemContainer.append(itemEl);
		}

		if ((item.items && item.items.length) || item.getMenu) {
			let subItemsContainer = that._createSubItems(item);
			if (subItemsContainer) {
				if (!that.options.hideHeaders) {
					itemContainer.append($("<hr/>"));
				}
				subItemsContainer.appendTo(itemContainer);
			}
		}

		return itemCellContainer;
	}

	_createSubItems(item: Menu.Item): JQuery {
		let that = this,
			subItemsContainer = $("<ul/>"),
			subMenuItems = item.getMenu ?
				item.getMenu().items :
				item.items;

		if (subMenuItems && subMenuItems.length > 0) {

			subMenuItems.forEach((item: Menu.Item) => {
				if (item.hidden) { return; }
				if (item.command) {
					if (!core.lang.unlazy(item.command).canExecute()) { return; }
				}
				let itemEl = that._createActionItem(item);
				if (itemEl) {
					if (item.cssClass) {
						itemEl.addClass(item.cssClass);
					}
					itemEl = $("<li></li>").append(itemEl);
					itemEl.appendTo(subItemsContainer);
				}
			});
		}
		return subItemsContainer;
	}

	protected _onSelectedItemChanged(sender: Menu, name: string): void {
		let that = this;
		let $sel = that.$domElement;
		$sel.find("a.active").removeClass("active");
		$sel.find(".x-app-nav-cell.active").removeClass("active");
		$sel.find("a[name='" + name + "']").addClass("active").parents(".x-app-nav-cell").addClass("active");
	}
}

MenuNavGridPresenter.mixin({
	defaultOptions: MenuNavGridPresenter.defaultOptions
});

namespace MenuNavGridPresenter {
	export interface Options extends MenuPresenterBase.Options {
		/**
		 * Columns number. if you change this options - change style .x-app-nav-cell (width)
		 * @type {Number}
		 */
		columns?: number;
		hideHeaders?: boolean;
		classes?: ClassesOptions;
	}

	export interface ClassesOptions extends MenuPresenterBase.ClassesOptions {
		cell?: string;
		section?: string;
	}
}

core.ui.MenuNavGridPresenter = MenuNavGridPresenter;

export = MenuNavGridPresenter;
