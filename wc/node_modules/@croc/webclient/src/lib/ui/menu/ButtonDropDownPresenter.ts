import $ = require("jquery");
import core = require("core");
import Component = require("lib/ui/Component");
import "lib/ui/menu/DropDownMenuPresenter";


class ButtonDropDownPresenter extends Component{
	static defaultOptions: ButtonDropDownPresenter.Options = {
		isLink : false,
		anchorHtml: undefined
	};

	options: ButtonDropDownPresenter.Options;

	/**
	 * Menu presenter as a button with a dropdown
	 * @class ButtonDropDownPresenter
	 * @extends Component
	 */
	constructor(options?: ButtonDropDownPresenter.Options) {
		options = ButtonDropDownPresenter.mixOptions(options, ButtonDropDownPresenter.defaultOptions);
		super(options);

		if (options && options.viewModel) {
			this.setViewModel(options.viewModel);
		}
	}

	setViewModel(model) {
		let that = this;
		if (that.viewModel && that.viewModel.unbind) {
			that.viewModel.unbind("change", null, that);
		}
		super.setViewModel(model);
		if (that.viewModel && that.viewModel.bind) {
			that.viewModel.bind("change", that.rerender, that);
		}
		if (that.domElement) {
			that.rerender();
		}
	}

	doRender(domElement) {
		var that = this,
			sel = $(domElement),
			title,
			anchor;

		title = that.options.anchorHtml || that.viewModel.title || "";

		anchor = $("<a href='#' class='dropdown-toggle'>" +
			title +
			"<span class='caret' style='margin-left: 5px'></span></a>").appendTo(sel);

		if (!that.options.isLink) {
			sel.addClass("btn-group x-menu-btn");
			anchor.addClass("btn btn-default");
		}

		that.presenter = core.ui.DropDownMenuPresenter.create(that.viewModel);

		super.doRender(domElement);
	}

	/**
	 * @deprecated use rerender instead
	 */
	refresh(): void {
		this.rerender();
	}

	dispose(options?: core.ui.Part.CloseOptions): void {
		let that = this;
		if (that.viewModel && that.viewModel.unbind) {
			that.viewModel.unbind("change", null, that);
			that.viewModel = undefined;
		}
		super.dispose(options);
	}
}

ButtonDropDownPresenter.mixin({
	defaultOptions: ButtonDropDownPresenter.defaultOptions
});

namespace ButtonDropDownPresenter {
	export interface Options extends Component.Options {
		isLink?: boolean;
		anchorHtml?: string;
		viewModel?: any;
	}
}
core.ui.ButtonDropDownPresenter = ButtonDropDownPresenter;

export = ButtonDropDownPresenter;
