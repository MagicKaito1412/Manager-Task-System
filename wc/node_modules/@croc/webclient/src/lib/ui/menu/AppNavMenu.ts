import core = require("core");
import Menu = require("lib/ui/menu/Menu");
import formatters = require("lib/formatters");

class AppNavMenu extends Menu {
	_areaManager: core.composition.AreaManager;

	/**
	 * @class AppNavMenu
	 * @extends Menu
	 * @param {AreaManager} areaManager
	 * @param args
	 * @param {...Object} One or more options. {@link Menu.constructor}
	 */
	constructor(areaManager: core.composition.AreaManager, ...args: Menu.Options[]) {
		if (!areaManager){
			throw new Error("AppNavMenu.ctor: there is no areaManager was specified.");
		}

		areaManager.getAreas().forEach((area: core.composition.Area) => {
			area.ensureInitialized();
		});

		let defaultItems = AppNavMenu.createDefaultMenu(areaManager);
		super({ items: defaultItems }, ...args);

		this._areaManager = areaManager;
		this.bindToCommands();

		// navigation menu is radio by default
		this.radio = core.lang.coalesce(this.options.radio, true);

		if (this.radio) {
			this._areaManager.bind("changeArea", this._onCurrentStateChanged, this);
			this._areaManager.getAreas().forEach((area: core.composition.Area) => {
				area.bind("change:currentState", this._onCurrentStateChanged, this);
			});
		}
	}

	static createDefaultMenu(areaManager: core.composition.AreaManager): Menu.Item[] {
		let stateMan = areaManager.app.stateManager;
		return areaManager.getAreas()
			.map((area: core.composition.Area) => {
				let title = area.title;
				let item = {
					name: area.name || "default",
					title: title ? title.toString() : undefined,
					html: formatters.isHtml(title) ? title.toHTML() : undefined,
					hideIfDisabled: true,
					commandName: "NavigateArea",
					params: {
						area: area.name
					},
					url: stateMan.getAreaUrl(area.name),
					items: []
				};
				core.lang.forEach(area.states, (state: core.composition.AreaState, stateName: string) => {
					item.items.push({
						name: (item.name + "#" + (stateName || "defaultState")),
						title: state.title || stateName,
						hideIfDisabled: true,
						commandName: "NavigateState",
						params: {
							area: area.name,
							state: state.name
						},
						url: stateMan.getAreaStateUrl(area.name, stateName)
					});
				});
				if (item.items.length === 1) {
					// We won't adding an item for the single only state:
					// 1. high chance it has meaningless title, 2.
					item.items = [];
				}
				return item;
			});
	}

	bindToCommands(): void {
		let that = this;
		that.acceptVisitor(function (item) {
			let area;
			if (item.commandName === "NavigateArea") {
				area = that._areaManager.getArea(item.params["area"]);
				if (area) {
					item.command = core.commands.createBoundCommand({
						execute: that.doNavigateArea.bind(that),
						canExecute: function(): boolean {
							return !this.hidden();
						}
					}, area);
				}
			} else if (item.commandName === "NavigateState") {
				area = that._areaManager.getArea(item.params["area"]);
				if (area) {
					let state = area.getState(item.params["state"]);
					item.command = core.commands.createBoundCommand({
						execute: that.doNavigateState.bind(that),
						canExecute: function (): boolean {
							return !this.hidden();
						}
					}, state);
				}
			}
		});
	}

	doNavigateArea(args): void {
		window.setTimeout(() => {
			this._areaManager.activateArea(args.area);
		}, 0);
	}

	doNavigateState(args): void {
		window.setTimeout(() => {
			this._areaManager.activateState(args.area, args.state);
		}, 0);
	}

	_onCurrentStateChanged(): void {
		let that = this,
			area = that._areaManager.getActiveArea(),
			areaName = area.name || "default",
			state = area.currentState,
			rootItem = that.getItem(areaName),
			miName = areaName + "#" + ((state && state.name) || "defaultState");
		if (rootItem) {
			if (rootItem.items && rootItem.items.length > 0) {
				that.selectedItem(miName);
			} else {
				that.selectedItem(rootItem.name);
			}
		}
	}
}

core.ui.AppNavMenu = AppNavMenu;
export = AppNavMenu;
