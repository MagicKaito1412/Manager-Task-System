import $ = require("jquery");
import core = require("core");
import binding = require("lib/binding");
import Part = require("lib/ui/Part");
import Menu = require("lib/ui/menu/Menu");
import MenuPresenterBase = require("lib/ui/menu/MenuPresenterBase");
import DropDownMenuPresenter = require("lib/ui/menu/DropDownMenuPresenter");
import "xcss!lib/ui/styles/menuButtons.css";

class MenuButtonsPresenter extends MenuPresenterBase {
	static defaultOptions: MenuButtonsPresenter.Options = {
		ungrouped: false,
		inline: false,
		classes: {
			root: "x-menu-buttons",
			rootInline: "x-menu-buttons-inline",
			rootRadio: "x-menu-buttons-radio",
			item: "btn btn-default",
			itemDefault: "btn-primary",
			submenuContainer: "btn-group"
		}
	};
	options: MenuButtonsPresenter.Options;

	/**
	 * Menu presenter based on Bootstrap buttons (.btn, .btn-group)
	 * @constructs MenuButtonsPresenter
	 * @extends MenuPresenterBase
	 */
	constructor(options: MenuButtonsPresenter.Options) {
		options = MenuButtonsPresenter.mixOptions(options, MenuButtonsPresenter.defaultOptions);
		super(options);
	}

	protected _createRootEl(domElement: JQuery): JQuery {
		let options = this.options,
			rootEl;
		if (options.inline) {
			rootEl = domElement;
			this.options.classes.rootInline && rootEl.addClass(this.options.classes.rootInline);
		} else {
			rootEl = $("<div></div>").appendTo(domElement);
		}
		this.options.classes.root && rootEl.addClass(this.options.classes.root);

		if (!options.ungrouped) {
			rootEl.addClass(options.orientation === "vertical" ? "btn-group-vertical" : "btn-group");
		}
		if (this.radio) {
			rootEl.attr("data-toggle", "buttons");
			this.options.classes.rootRadio && rootEl.addClass(this.options.classes.rootRadio);
		}
		return rootEl;
	}

	_createSubmenuContainer(item: Menu.Item): JQuery {
		return $("<div class='" + this.options.classes.submenuContainer + "'></div>");
	}

	protected _createItemEl(item: Menu.Item): JQuery {
		let btn = $("<button type='button' class='" + this.options.classes.item + "' />");
		this._addItemCommonAttrs(item, btn);
		btn.button();
		return btn;
	}

	_setupClickHandle(menuRoot: JQuery): void {
		let that = this;
		if (that.viewModel) {
			menuRoot.find("button").not(".dropdown-toggle").buttonClick(function (e: JQueryEventObject): void {
				e.preventDefault();
				let name = this.getAttribute("name");
				let args = { $event: e };
				that.viewModel.execute(name, args);
			});
		}
	}

	protected _onSelectedItemChanged(sender: Menu, name: string): void {
		let $domElement = this.$domElement;
		$domElement.find(".btn.active").removeClass("active");
		if (name) {
			let btn = $domElement.find(".btn[name='" + name + "']");
			// NOTE: да, можно использовать методы BS-плагина (см. http://getbootstrap.com/javascript/#buttons-checkbox-radio),
			// но для этого должна быть другая разметка (input type=radio):
			// btn.button("toggle");
			// Необходимость этого неясна, учитывая, что _createItemEl уже не сможет вернуть один элемент кнопки (их два: label/input)
			if (btn.length)
				btn.addClass("active");
		}
	}

	focusItem(name: string): void {
		this.$domElement.find("button[name='" + name + "']").focus();
	}
}
MenuButtonsPresenter.mixin({
	defaultOptions: MenuButtonsPresenter.defaultOptions,
});

namespace MenuButtonsPresenter {
	export interface Options extends MenuPresenterBase.Options {
		ungrouped?: boolean;
		inline?: boolean;

		classes?: ClassesOptions;
	}

	export interface ClassesOptions extends MenuPresenterBase.ClassesOptions {
		rootInline?: string;
		rootRadio?: string;
	}
}

core.ui.MenuButtonsPresenter  = MenuButtonsPresenter ;

export = MenuButtonsPresenter;