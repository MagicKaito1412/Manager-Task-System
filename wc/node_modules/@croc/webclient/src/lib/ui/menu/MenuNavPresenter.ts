import $ = require("jquery");
import core = require("core");
import binding = require("lib/binding");
import Part = require("lib/ui/Part");
import Menu = require("lib/ui/menu/Menu");
import MenuPresenterBase = require("lib/ui/menu/MenuPresenterBase");
import DropDownMenuPresenter = require("lib/ui/menu/DropDownMenuPresenter");
import "xcss!lib/ui/styles/menuNav.css";

class MenuNavPresenter extends MenuPresenterBase {
	static defaultOptions: MenuNavPresenter.Options = {
		classes: {
			root: "x-menu-nav",
			item: "x-menu-item",
			itemDefault: "x-menu-item-default",
			submenuContainer: "x-menu-item-dropdown"
		}
	};

	/**
	 * Menu presenter for navigation menus (based on links)
	 * @constructs MenuNavPresenter
	 * @extends MenuPresenterBase
	 * @param options
	 */
	constructor(options?: MenuPresenterBase.Options) {
		options = MenuNavPresenter.mixOptions(options, MenuNavPresenter.defaultOptions);
		super(options);
	}

	protected _createRootEl(domElement: JQuery|HTMLElement): JQuery {
		return $("<ul class='" + this.options.classes.root + "'></ul>").appendTo(domElement);
	}

	protected _createItemEl(item: Menu.Item): JQuery {
		let anchor = $("<a class='" + this.options.classes.item + "' href='" + (item.url || "#") + "'></a>");
		this._addItemCommonAttrs(item, anchor);

		return anchor;
	}

	protected _createActionItemContainer(itemEl: JQuery): JQuery {
		let el = $("<li></li>");
		el.append(itemEl);
		return el;
	}

	protected _createSubmenuContainer(item: Menu.Item): JQuery {
		return $("<li class='" + this.options.classes.submenuContainer + "'></li>");
	}

	protected _setupClickHandle(menuRoot: JQuery): void {
		let that = this;
		menuRoot.find("li > a").buttonClick(function (e: JQueryEventObject): void {
			if (core.html.isExternalClick(e)) {
				// if user clicks a link with ctrl/shift/alt/wheel then let the browser to process the click
				return;
			}
			/*
			let $anchor = $(e.currentTarget);
			if ($anchor.attr("href") && $anchor.attr("target") === "_blank") {
				return;
			}*/

			let name = this.getAttribute("name");
			if (name) {
				let item = that.viewModel.getItem(name);
				if (item && item.command) {
					e.preventDefault();
					that.viewModel.executeItem(item, { $event: e });
				}
			}
			//that.viewModel.execute(name, { $event: e });
		});
	}

	protected _onSelectedItemChanged(sender: Menu, name: string): void {
		let $domElement = this.$domElement;
		$domElement.find("a.active").removeClass("active");
		$domElement.find("a[name='" + name + "']").addClass("active");
	}
}
namespace MenuNavPresenter {
	export interface Options extends MenuPresenterBase.Options {}
}

core.ui.MenuNavPresenter = MenuNavPresenter;

export = MenuNavPresenter;
