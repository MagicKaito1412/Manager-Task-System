import core = require("core");
import Menu = require("lib/ui/menu/Menu");

import Area = core.composition.Area;
import AreaState = core.composition.AreaState;
import Item = AreaStatesMenu.Item;

class AreaStatesMenu extends Menu {
	items: Item[]; // override base type

	private _disposes: core.lang.IDisposable[];

	/**
	 * Menu for area's states. Accepts an area instance in costructor and generates single level menu
	 * with items for each the area's state.
	 * @constructs AreaStatesMenu
	 * @extends Menu
	 * @option {Area} area Area with states
	 */
	constructor(area: Area, additionalMenu?: Menu.Options) {
		let stateMan = area.areaManager.app.stateManager,
			// NOTE: use single command for all items and use its arguments
			command = core.createCommand({
				execute: (args) => {
					area.activateState(args.stateName);
				}
			}),
			menuItems: Item[] = [];

		core.lang.forEach(area.states, function (state: AreaState, stateName: string) {
			menuItems.push({
				name: stateName,
				title: state.title || stateName,
				command: command,
				params: { stateName: stateName },
				hidden: state.hidden(),
				url: stateMan.getAreaStateUrl(area.name, stateName)
			});
		});

		// NOTE: we're setting radio=false because we'll track selectedItem manually
		let menuMd: Menu.Options = {items: menuItems, radio: false};
		if (additionalMenu) {
			menuMd = Menu.merge(menuMd, additionalMenu)
		}

		super(menuMd);

		this._disposes = [];
		core.lang.forEach(area.states, (state: AreaState, stateName: string) => {
			this._subscribe(state, "change:hidden", (sender, val) => {
				this.getItem(stateName).hidden = val;
				this.trigger("change");
			});
		});

		this.bindToCommands();

		if (area.currentState) {
			this.selectedItem(area.currentState.name);
		}
		this._subscribe(area, "change:currentState", (sender, value) => {
			this.selectedItem(value);
		});
	}

	dispose(): void {
		for (let d of this._disposes) {
			d.dispose();
		}
		this._disposes = undefined;

		super.dispose();
	}

	protected _subscribe(obj: core.lang.Observable, eventName: string, callback: Function, context?) {
		let disposable = obj.subscribe(eventName, callback, context);
		this._disposes.push(disposable);
	}
}

namespace AreaStatesMenu {
	export interface Item extends Menu.Item {
		url?: string;
	}
}

core.ui.AreaStatesMenu = AreaStatesMenu;
export = AreaStatesMenu;
