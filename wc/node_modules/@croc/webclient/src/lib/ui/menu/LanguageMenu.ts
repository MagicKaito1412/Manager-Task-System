import $ = require("jquery");
import core = require("core");
import Menu = require("lib/ui/menu/Menu");
import Component = require("lib/ui/Component");
import ButtonDropDownPresenter = require("lib/ui/menu/ButtonDropDownPresenter");
import "xcss!lib/ui/styles/languageMenu.css";

class LanguageMenu extends Component {
	static defaultOptions: LanguageMenu.Options = {
		rootPresentation: "code", // "code" | "icon" | "title",
		rootIconCssClass : "flags-24",	// see standards styles in languageMenu.css
		itemPresentation: "icon+title", // "code" | "icon" | "title"
		itemIconCssClass: "flags-24"	// see standards styles in languageMenu.css
	};
	options: LanguageMenu.Options;

	/**
	 * @class LanguageMenu
	 * @extends Component
	 * @param {XConfig} config
	 * @param {Object} options
	 */
	constructor(config, options: LanguageMenu.Options) {
		options = LanguageMenu.mixOptions(options, LanguageMenu.defaultOptions);
		super(options);

		let cmd = core.createCommand({
				execute: function (args) {
					core.platform.language(args.name);
				}
			}),
			items: Menu.Item[] = [],
			curLangCode = core.platform.language(),
			curLang;

		if (!config.supportedLanguages || !curLangCode || !config.supportedLanguages [curLangCode]) {
			this.presenter = {
				render: () => {}
			};
		} else {
			core.lang.forEach(config.supportedLanguages, (lang, name) => {
				lang.code = name;
				lang.codeText = lang.short || lang.code;
				items.push({
					name: name,
					html: this._getItemHtml(lang, "item"),
					title: lang.title,
					command: cmd
				});
			});
			curLang = config.supportedLanguages[curLangCode];
			this.presenter = new ButtonDropDownPresenter({
				isLink: true,
				anchorHtml: this._getItemHtml(curLang, "root"),
				viewModel: Menu.create({items: items})
			});
		}
	}

	_getItemHtml(lang, context: "item" | "root"): string {
		let that = this,
			presentation = context === "item" ? that.options.itemPresentation : that.options.rootPresentation,
			icoClass = context === "item" ? that.options.itemIconCssClass : that.options.rootIconCssClass,
			html = "",
			opts = presentation.split("+");

		opts.forEach(function (opt) {
			if (html) {
				html += "&nbsp;&nbsp;";
			}
			switch (opt) {
				case "icon":
					html += "<i class='" + icoClass + " " + icoClass + "-" + lang.code + "'/>";
					break;
				case "code":
					html += lang.codeText.toUpperCase();
					break;
				case "title":
					html += lang.title;
					break;
			}
		});
		if (!html) {
			html = lang.title;
		}
		return html;
	}
}

LanguageMenu.mixin({
	defaultOptions: LanguageMenu.defaultOptions
});

namespace LanguageMenu {
	export interface Options extends Component.Options {
		/**
		 * Any combination of: "code" | "icon" | "title"
		 */
		rootPresentation?: string;
		rootIconCssClass?: string;	// see standards styles in languageMenu.css
		/**
		 * any co,bination of: "code" | "icon" | "title"
		 */
		itemPresentation?: string;
		itemIconCssClass?: string;	// see standards styles in languageMenu.css
	}
}

core.ui.LanguageMenu = LanguageMenu;
export = LanguageMenu;
