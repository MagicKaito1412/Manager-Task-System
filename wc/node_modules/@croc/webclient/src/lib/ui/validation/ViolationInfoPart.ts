import core = require("core");
import View = require("lib/ui/handlebars/View");
import defaultTemplate = require("xhtmpl!lib/ui/templates/ViolationInfoPart.hbs");

import Menu = require("lib/ui/menu/Menu");
import ObjectEditor = require("lib/ui/editor/ObjectEditor");
import { SafeHtml } from "lib/formatters";
import { ViolationSeverity } from "lib/validation";

class ViolationInfoPart  extends View {
	static defaultOptions: ViolationInfoPart.Options = {
		template: defaultTemplate,
		severity: "error",
		message: undefined,
		menu: undefined
	};

	/**
	 * @observable-property {String}
	 */
	@core.lang.decorators.observableAccessor()
	message: core.lang.ObservableProperty<string | SafeHtml>;

	severity: ViolationSeverity;
	menu: Menu;

	violation: ObjectEditor.Violation;
	persistent?: boolean;

	/**
	 * class for object editor info
	 * @constructs ViolationInfoPart
	 * @extends View
	 * @param {Object} options
	 * @param {String|SafeHtml} options.message
	 * @param {Number} options.severity
	 * @param {String} options.menu
	 */
	constructor (options: ViolationInfoPart.Options) {
		options = ViolationInfoPart.mixOptions(options, ViolationInfoPart.defaultOptions);
		super(options);
		this.message(options.message);
		this.severity = options.severity;
		this.menu = options.menu;
		this.persistent = options.persistent;
	}

	protected doRender (domElement: JQuery): void {
		let that = this;
		super.doRender(domElement);
		if (that.severity) {
			that.$domElement.find(".x-context-part").addClass("x-context-part--" + that.severity);
		}
	}
}

namespace ViolationInfoPart {
	export interface Options extends View.Options {
		message?: string | SafeHtml;
		severity?: ViolationSeverity;
		/**
		 * true means do not remove part on violations collection rebuild
		 */
		persistent?: boolean;
		menu?: Menu;
	}
}

export = ViolationInfoPart;
