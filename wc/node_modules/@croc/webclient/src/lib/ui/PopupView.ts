import jquery = require("jquery");
import core = require("core");
import Popup = require("lib/ui/Popup");
import defaultTemplate = require("xhtmpl!lib/ui/templates/PopupView.hbs");
import resources = require("i18n!lib/nls/resources");

import "xcss!lib/ui/styles/popupView.css";
import Menu = require("lib/ui/menu/Menu");
import Options = Popup.Options;
import Command = core.commands.Command;
import lang = core.lang;

class PopupView extends Popup {
	/** @type {Object} */
	static defaultOptions: PopupView.Options = {
		template: defaultTemplate,
		rootCssClass: "x-popupview",
		/** whether show close button */
		showCross: true
	};

	options: PopupView.Options;
	commands: PopupView.KnownCommands;
	menu: Menu;
	title: string;

	/**
	 * @constructs PopupView
	 * @extends Popup
	 * @description PopupView consists of a scaffolding frame (specified by template option)
	 * and an inner part (specified by body or bodyTemplate options).
	 * @param {PopupView.defaultOptions} options
	 */
	constructor(options: PopupView.Options) {
		options = PopupView.mixOptions(options, PopupView.defaultOptions);
		super(options);

		this.commands = core.lang.extend(this.createCommands(), this.options.commands || {});
		this.title = this.options.title;

		this.menu = new core.ui.Menu(this.getDefaultMenuMetadata());
		if (this.options.menu) {
			this.menu.mergeWith(this.options.menu);
		}
	}

	getDefaultMenuMetadata(): Menu.Options {
		if (this.options.showCross) {
			return { items: [
				{ name: "close", icon: "close", title: resources.close, command: this.commands.Close, order: 100 }
			]};
		}
	}

	/**
	 * Create commands
	 * @protected
	 * @returns {{Close: (Command)}}
	 */
	createCommands(): PopupView.KnownCommands {
		let that = this;
		let cmdClose = core.createCommand({
				name: "Close",
				execute: function () {
					that.close();
				}
			});
		return {
			Close: cmdClose
		};
	}
}
namespace PopupView {
	export interface Options extends Popup.Options {
		title?: string;
		showCross?: boolean;
		height?: number; 	// undefined for auto-height
		width?: number;		// undefined for auto-width
		/**
		 * Object with menu commands
		 */
		commands?: lang.Map<Command>;
		/**
		 * Menu metadata (by default Dialog creates menu with 'Ok' and 'Cancel' items).
		 * `false` or `null` for disabling menu. `true` for default menu.
		 */
		menu?: Menu.Options;
	}
	export interface KnownCommands extends lang.Map<Command> {
		Close?: Command;
	}
}

PopupView.mixin({
	defaultOptions: PopupView.defaultOptions
});

// popup element can host other overlayers
//core.html.overlay.targets.push(".x-popupview");

core.ui.PopupView = PopupView;
export = PopupView;
