import core = require("core");
import View = require("lib/ui/handlebars/View");
import List = require("lib/ui/list/List");
import ObjectListPaginatorBase = require("lib/ui/list/ObjectListPaginatorBase");
import Menu = require("lib/ui/menu/Menu");
import template = require("xhtmpl!lib/ui/templates/ObjectListPaginator.hbs");
import resources = require("i18n!lib/nls/resources");

import lang = core.lang;
import { LoadQueryParams } from "interop/.interop";
import ICommand = core.commands.ICommand;
import LoadOptions = List.LoadOptions;
import DataLoadEventArgs = List.DataLoadEventArgs;

class ObjectListPaginator extends ObjectListPaginatorBase {
	defaultOptions: ObjectListPaginator.Options;

	options: ObjectListPaginator.Options;

	/**
	 * Paginator for ObjectList for mode 'throttle' (with command 'LoadMore')
	 * @constructs ObjectListPaginator
	 * @extends ObjectListPaginatorBase
	 * @param options
	 */
	constructor(options?: ObjectListPaginator.Options) {
		options = ObjectListPaginator.mixOptions(options, ObjectListPaginator.prototype.defaultOptions);
		options.mode = "throttle";
		super(options);
	}

	/**
	 * @protected
	 * @virtual
	 * @returns {Object.<String,ICommand>}
	 */
	protected createCommands(): lang.Map<ICommand> {
		let that = this;
		return {
			LoadMore: new core.commands.BoundCommand(that.doLoadMore, that.canLoadMore, that)
		};
	}

	protected doLoadMore(args: LoadOptions = {}): lang.Promise<any[]> {
		let that = this,
			pageParams: LoadQueryParams = {
				$skip: (that._loadParams.$skip || 0) + that._top,
				$top: that._top
			};

		args.params = lang.append(args.params || {}, pageParams, that._loadParams);
		return that.list().loadMore(args);
	}
	protected canLoadMore(): boolean {
		let that = this;
		return !that.list().isLoading() && that._hasNext && that._loadParams && that._top > 0;
	}

	protected _onDataLoaded(list: List<any>, args: DataLoadEventArgs<any>): void {
		super._onDataLoaded(list, args);
		this.hasMoreItems(!!this._hasNext);
	}
}

ObjectListPaginator.mixin({
	defaultOptions: {
		template: template,
		pageSize: 100,
		menu: { items: [
			{
				name: "LoadMore",
				html: function (): string {
					let that = this.params.paginator, // the parameter `paginator` is specified while initialization of the menu
						title = that.pageSize > 0 ? lang.stringFormat(resources.loadNMore, that.pageSize) : resources.loadMore;
					return lang.encodeHtml(title);
				},
				isDefaultAction: true,
				hideIfDisabled: true
				//}, {
				//	name: "LoadAll",
				//	title: resources.loadAll,
				//	hideIfDisabled: true,
				//	commandName: "LoadMore",
				//	params: { // command params
				//		params: { $top: -1 } // load params
				//	}
			}
		]}
	}
});

namespace ObjectListPaginator {
	export interface Options extends ObjectListPaginatorBase.Options {
	}
}

core.ui.ObjectListPaginator = ObjectListPaginator;

export = ObjectListPaginator;
