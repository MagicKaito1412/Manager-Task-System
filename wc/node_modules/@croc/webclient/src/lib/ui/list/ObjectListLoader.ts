import core = require("core");
import utils = require("lib/utils");

import { IDataSource, LoadQuery, LoadQuerySpec, LoadQueryParams, LoadOptions, LoadResponse } from "lib/interop/.interop";
import { DomainObject, UnitOfWork } from "lib/domain/.domain";
import * as list from "lib/ui/list/.list";
import Application = core.Application;
import DataSource = core.data.DataSource;
import ObjectListColumn = list.ObjectListColumn;
import IObjectListLoader = ObjectListLoader.IObjectListLoader;
type ObjectListLoaderResult = list.ObjectListLoaderResult<DomainObject>;
type IObjectList = list.IObjectList<DomainObject>;

type MaterializeArgs = {
	items: DomainObject[];
	dsResult: LoadResponse;
};

class ObjectListLoader implements IObjectListLoader {
	options: ObjectListLoader.Options;

	app: Application;
	uow: UnitOfWork;
	entityType: string;
	dataSource: IDataSource;
	columns: ObjectListColumn[];

	private _reloadOpId: string;

	/**
	 * @constructs ObjectListLoader
	 * @param {Application} app
	 * @param {Object} options
	 * @param {DataSource} options.dataSource
	 * @param {String} [options.entityType]
	 * @param {Object} [options.loadPolicy]
	 * @param {Boolean} [options.cancellable]
	 * @param {UnitOfWork} [options.uow]
	 * @param {Function} [options.onMaterialize]
	 */
	constructor(app: Application, options: ObjectListLoader.Options) {
		let that = this;

		that.app = app;
		that.options = options;

		that.dataSource = that.options.dataSource;
		if (!that.dataSource) { throw new Error("ObjectListLoader: option dataSource must be specified."); }

		that.entityType = that.options.entityType || (that.dataSource as DataSource).entityType;
		that.columns = (that.dataSource as DataSource).columns;
		that.uow = that.options.uow || that.app.createUnitOfWork();
	}

	buildQuery(list: IObjectList, params?: LoadQueryParams): LoadQuery {
		let ds = this.dataSource;
		if (!ds.buildQuery) {
			throw new Error("DataSource does not implement buildQuery method");
		}
		return ds.buildQuery({ params: params });
	}

	load(list: IObjectList, params?: LoadQueryParams): core.lang.Promise<ObjectListLoaderResult> {
		let that = this,
			query: LoadQuerySpec = {
				params: params
			},
			options = {
				opId: that.options.cancellable ? utils.generateGuid() : undefined,
				policy: that.options.loadPolicy
			};

		if (!that.dataSource) {
			return null;
		}
		that._reloadOpId = options.opId;

		that.onLoading(query, options);
		let task = that.dataSource.load(query, options);
		return task.then((dsResult: LoadResponse) => {
			that._reloadOpId = undefined;
			let items = that.onMaterialize(dsResult);
			return { items: items, hints: dsResult.hints };
		}, error => {
			that._reloadOpId = undefined;
			return that.onError(error);
		});
	}

	cancel(): void {
		let that = this,
			opId = that._reloadOpId,
			ds = that.dataSource;
		if (opId && ds.cancel) {
			ds.cancel(opId);
			that._reloadOpId = undefined;
		}
	}
	protected onLoading(query: LoadQuerySpec, options: LoadOptions): void {
		// TODO:
	}
	protected onMaterialize(dsResult: LoadResponse): DomainObject[] {
		let that = this,
			items = <DomainObject[]>that.uow.fromServerResponse(dsResult);

		if (that.options.onMaterialize) {
			let args = { items: items, dsResult: dsResult };
			that.options.onMaterialize.call(that, args);
			items = args.items;
		}
		return items;
	}
	protected onError(error: Error): Error {
		return error;
	}
}

namespace ObjectListLoader {
	export interface Options {
		dataSource: IDataSource;
		entityType?: string;
		loadPolicy?: any;
		cancellable?: boolean;
		uow?: UnitOfWork;
		/**
		 * @this {ObjectListLoader} Loader instance
		 */
		onMaterialize?: (args: MaterializeArgs) => void;
	}

	export interface IObjectListLoader extends list.IObjectListLoader<DomainObject> {
		entityType?: string;
		columns?: ObjectListColumn[];
		buildQuery?(list: IObjectList, params?: LoadQueryParams): LoadQuery;
	}
}

core.ui.ObjectListLoader = ObjectListLoader;

export = ObjectListLoader;
