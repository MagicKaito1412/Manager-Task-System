import core = require("core");
import View = require("lib/ui/handlebars/View");
import List = require("lib/ui/list/List");
import Menu = require("lib/ui/menu/Menu");
import resources = require("i18n!lib/nls/resources");

import lang = core.lang;
import { LoadQueryParams } from "interop/.interop";
import { IObjectListPaginator, PagingOptions } from "ui/list/.list";
import ICommand = core.commands.ICommand;
import DataLoadEventArgs = List.DataLoadEventArgs;
import {ObjectListState} from "lib/ui/list/.list.types";

abstract class ObjectListPaginatorBase extends View implements IObjectListPaginator {
	options: ObjectListPaginatorBase.Options;

	pageSize: number;
	commands: lang.Map<ICommand>;
	menu: Menu;

	protected _hasNext: boolean;
	protected _loadParams: LoadQueryParams;
	protected _top: number;

	/**
	 * The number of skipped items
	 * @observable-property {Number}
	 */
	@lang.decorators.observableAccessor()
	skippedItems: lang.ObservableProperty<number>;

	/**
	 * @observable-property {Boolean}
	 */
	@lang.decorators.observableAccessor({init: false})
	protected hasMoreItems: lang.ObservableProperty<boolean>;

	/**
	 * @observable-property {String}
	 */
	@lang.decorators.observableAccessor()
	protected message: lang.ObservableProperty<string>;

	/**
	 * Base class for ObjectList's paginators
	 * @constructs ObjectListPaginatorBase
	 * @extends View
	 * @param options
	 */
	constructor(options?: ObjectListPaginatorBase.Options) {
		super(options);
	}

	/**
	 * Parent list
	 * @observable-property {ObjectList}
	 */
	list(v?: List<any>): List<any> {
		if (!arguments.length) {
			return ObjectListPaginatorBase._get(this, "list");
		}

		let changeArgs = ObjectListPaginatorBase._set(this, "list", v);
		if (changeArgs) {
			this._onListChanged(v, changeArgs.oldValue);
		}
	}

	/**
	 * @protected
	 * @virtual
	 * @returns {Menu}
	 */
	protected createMenu(): Menu {
		return new Menu(this.options.menu);
	}

	/**
	 * @protected
	 * @virtual
	 * @returns {Object.<String,ICommand>}
	 */
	protected abstract createCommands(): lang.Map<ICommand>;

	protected _onListChanged(list: List<any>, old: List<any>): void {
		this._uninit(old);
		this._init(list);
	}

	protected _init(list: List<any>): void {
		if (!list) { return; }
		let that = this;

		that.pageSize = that.options.pageSize || 0;
		that.commands = that.createCommands();
		that.menu = that.createMenu();
		that.menu.bindToPart(that, { list: list, paginator: that });

		list.bind(List.events.DATA_LOADING, that._onDataLoading, that);
		list.bind(List.events.DATA_LOADED, that._onDataLoaded, that);
		list.bind("change:state", that._onListStateChanged, that);
	}

	protected _uninit(list: List<any>): void {
		if (!list) { return; }
		let that = this;
		list.unbind(List.events.DATA_LOADING, null, that);
		list.unbind(List.events.DATA_LOADED, null, that);
		list.unbind("change:state", null, that);
	}

	protected _onListStateChanged (list: List<any>, state: ObjectListState) {
		if (state === ObjectListState.initial) {
			this.hasMoreItems(false);
		}
	}

	protected _onDataLoading(list: List<any>, args: DataLoadEventArgs<any> = {}): void {
		let that = this,
			params;
		if (that.pageSize) {
			params = args.params || (args.params = {});
			params.$top = params.$top || that.pageSize;
		}
	}

	protected _onDataLoaded(list: List<any>, args: DataLoadEventArgs<any> = {}): void {
		let that = this,
			params: LoadQueryParams = args.params || {},
			hints = args.hints || {},
			items = args.items || [],
			hasNext: boolean = hints.hasNext;
		if (hasNext == null && params.$top > 0) {
			hasNext = items.length === params.$top;
		}
		that._hasNext = hasNext;

		if (hints.paging || that.options.force) {
			that._loadParams = params;
			that._top = Math.min(hints.maxObjects || 1/0, that.pageSize || params.$top || items.length);
			that.message(undefined);
		} else {
			that._loadParams = undefined;
			that._top = undefined;
			that.message(hasNext ? lang.stringFormat(resources["objectList.maxRowsExceeded"], items.length) : undefined);
		}
	}

	dispose(options?: core.ui.Part.CloseOptions): void {
		let list = this.list();
		this._uninit(list);
		super.dispose(options);
	}
}

namespace ObjectListPaginatorBase {
	export interface Options extends View.Options, PagingOptions {
		menu?: Menu.Options;
		/**
		 * Number of rows on page. Set to 0 to use server restrictions only.
		 */
		pageSize?: number;
		/**
		 * Support paging even if no hint `paging` in the server response
		 */
		force?: boolean;
	}
}

core.ui.ObjectListPaginatorBase = ObjectListPaginatorBase;

export = ObjectListPaginatorBase;
