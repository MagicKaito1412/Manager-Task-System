import core = require("core");
import support = require("lib/domain/support");
import View = require("lib/ui/handlebars/View");
import defaultTemplate = require("xhtmpl!lib/ui/templates/ObjectComparePart.hbs");
import resources = require("i18n!lib/nls/resources");

import lang = core.lang;
import domain = require("lib/domain/.domain");

import DomainObject = domain.DomainObject;
import DomainObjectData = domain.DomainObjectData;
import UnitOfWork = domain.UnitOfWork;
import PropertyMeta = domain.metadata.PropertyMeta;
import Options = ObjectComparePart.Options;

class PropViewModel extends lang.Observable {
	/**
	 * @constructs PropViewModel
	 * @extends Observable
	 * @param propMeta
	 */
	constructor(propMeta?: PropertyMeta) {
		super();
		if (propMeta) {
			this.meta = propMeta;
			this.title(propMeta.descr);
		}
	}

	/**
	 * @observable-property {Part}
	 */
	part: lang.ObservableProperty<ObjectComparePart>;

	/**
	 * @observable-property {String}
	 */
	title: lang.ObservableProperty<string>;

	/**
	 * @observable-property {Boolean}
	 */
	checked: lang.ObservableProperty<boolean>;

	meta: PropertyMeta;

	isPropEqual(): boolean {
		var part = this.part(),
			propMeta = this.meta,
			localRaw = support.getPropRaw(part.local(), propMeta),
			originalRaw = support.getPropRaw(part.original(), propMeta);
		return localRaw === undefined || originalRaw === undefined || lang.isEqual(localRaw, originalRaw);
	}

	localHtml(): string {
		return this.getHtml(this.part().local());
	}

	originalHtml(): string {
		return this.getHtml(this.part().original());
	}

	protected getHtml(obj: DomainObject): string {
		return this.part().propHtml(obj, this.meta);
	}
}
PropViewModel.mixin( /** @lends PropViewModel.prototype */{
	/**
	 * @observable-property {Part}
	 */
	part: lang.Observable.accessor("part"),

	/**
	 * @observable-property {String}
	 */
	title: lang.Observable.accessor("title"),

	/**
	 * @observable-property {Boolean}
	 */
	checked: lang.Observable.accessor("checked"),
});

class PropViewModelSimple extends PropViewModel {
	protected getter: (obj: DomainObject) => string;

	constructor(getter: (obj: DomainObject) => string, title: string) {
		super();
		this.getter = getter;
		this.title(title);
	}

	isPropEqual(): boolean {
		var that = this,
			part = that.part();
		return that.getter(part.local()) === that.getter(part.original());
	}

	protected getHtml(obj: DomainObject): string {
		return this.getter(obj);
	}
}

class ObjectComparePart extends View {
	static PropViewModel = PropViewModel;

	static defaultOptions: Options = {
		template: defaultTemplate,
		hint: resources["objectResolution.info"],
		targetColumnTitle: resources["objectResolution.column.server_value"],
		sourceColumnTitle: resources["objectResolution.column.local_value"],
		hintSeverity: "info",
		showMetadata: false
	};

	options: Options;

	/**
	 * @observable-property {*}
	 */
	@lang.decorators.observableAccessor()
	local: lang.ObservableProperty<DomainObject>;

	/**
	 * @observable-property {*}
	 */
	@lang.decorators.observableAccessor()
	original: lang.ObservableProperty<DomainObject>;

	/**
	 * @observable-property {ObservableCollection}
	 */
	@lang.decorators.observableAccessor()
	props: lang.ObservableProperty<lang.ObservableCollection<PropViewModel>>;

	///**
	// * @observable-property {Boolean}
	// */
	//checkedAll: lang.ObservableProperty<boolean>;

	title: string;
	hint: string;
	hintSeverity: string;
	targetColumnTitle: string;
	sourceColumnTitle: string;

	/**
	 * @constructs ObjectComparePart
	 * @extends View
	 * @param options
	 */
	constructor(options?: Options) {
		options = ObjectComparePart.mixOptions(options, ObjectComparePart.defaultOptions);
		super(options);

		this.title = this.options.title;
		this.hint = this.options.hint;
		this.hintSeverity = this.options.hintSeverity || "info";
		this.targetColumnTitle = this.options.targetColumnTitle;
		this.sourceColumnTitle = this.options.sourceColumnTitle;

		this.setViewModel();
	}

	setViewModel(): void {
		let that = this;
		that._initLocal(that.options.local);
		that._initOriginal(that.options.original);
		that._initPropsModels();
	}

	protected _initLocal(data: DomainObjectData): DomainObject {
		let that = this,
			localUow: UnitOfWork,
			local: DomainObject;
		// create local object
		if (data) {
			localUow = core.Application.current.createUnitOfWork();
			local = localUow.fromJson(data);
			that.local(local);
			return local;
		}
	}

	protected _initOriginal(data: DomainObjectData): DomainObject;
	protected _initOriginal(data: string, id: string): DomainObject;
	protected _initOriginal(data, id?: string): DomainObject {
		let that = this,
			originalUow: UnitOfWork,
			original: DomainObject;
		// create original object
		originalUow = core.Application.current.createUnitOfWork();
		if (id && data) {
			original = <DomainObject>originalUow.get(data, id);
		} else if (data) {
			original = originalUow.fromJson(<DomainObjectData>data);
		}
		that.original(original);
		return original;
	}

	propHtml(obj: DomainObject, propMeta): string {
		if (!obj || !obj.isLoaded || support.getPropRaw(obj, propMeta) === undefined) { return ""; }

		if (!propMeta.many) {
			return lang.encodeHtml(obj.getFormatted(propMeta.name));
		}

		return obj.get(propMeta.name).all().map((o) => {
			return lang.encodeHtml(o);
		}).join("<br/>");
	}

	protected _initPropsModels(): void {
		let that = this,
			local = that.local(),
			original = that.original(),
			props: PropViewModel[] = [];

		// type and id
		if (that.options.showMetadata) {
			props.push(new PropViewModelSimple(obj => obj.meta.name, "{type}"));
			props.push(new PropViewModelSimple(obj => obj.id, "{id}"));
		}

		// domain props
		lang.forEach(local.meta.props, (propMeta) => {
			// ignore not loaded properties in original object
			if (support.getPropRaw(original, propMeta) === undefined) { return; }
			props.push(new PropViewModel(propMeta));
		});

		// set part for all props
		props.forEach((prop) => {
			prop.part(that);
		});

		// sort
		props = lang.sort(props, function (propA, propB) {
			let isPropAEqual = propA.isPropEqual() ? 1 : 0,
				isPropBEqual = propB.isPropEqual() ? 1 : 0;
			return isPropAEqual - isPropBEqual;
		});

		that.props(new lang.ObservableCollection(props));
	}
}

ObjectComparePart.mixin(/** @lends ObjectComparePart.prototype */ {
	defaultOptions: ObjectComparePart.defaultOptions, // for backward compatibility
});

namespace ObjectComparePart {
	export interface Options extends View.Options {
		title?: string;
		local?: DomainObjectData;
		original?: DomainObjectData;
		hint?: string;
		targetColumnTitle?: string;
		sourceColumnTitle?: string;
		hintSeverity?: string;
		showMetadata?: boolean;
	}
}

core.ui.ObjectComparePart = ObjectComparePart;

export = ObjectComparePart;
