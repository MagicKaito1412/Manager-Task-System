import $ = require("jquery");
import core = require("core");
import binding = require("lib/binding");
import View = require("lib/ui/handlebars/View");
import template = require("xhtmpl!lib/ui/templates/ExpandablePanel.hbs");
import resources = require("i18n!lib/nls/resources");
import "xcss!lib/ui/styles/expandablePanel.css";

import lang = core.lang;
import { IPart } from "lib/ui/.ui";

class ExpandablePanel extends View {
	static defaultOptions: ExpandablePanel.Options = {
		template: template,
		body: undefined,
		expandedProp: undefined,
		expandTitle: resources["expandablePanel.expand"],
		collapseTitle: resources["expandablePanel.collapse"],
		expanded: false
		//TODO: collapsible: true
	};
	private _body: IPart;
	private _bodyOwned: boolean;
	private _expandedProp: string;
	private _expanding: boolean;
	private _bodyViewModel: any;
	private _disposable: lang.IDisposable;
	private container: JQuery;
	options: ExpandablePanel.Options;
	commands: core.lang.Map<core.commands.ICommand>;

	/**
	 * @class ExpandablePanel
	 * @extends View
	 * @param {Object} options
	 */
	constructor(options: ExpandablePanel.Options) {
		options = ExpandablePanel.mixOptions(options, ExpandablePanel.defaultOptions);
		super(options);

		this._body = this.options.body;
		this._expandedProp = this.options.expandedProp;
		this.expanded(!!this.options.expanded);
		this.commands = this.createCommands();
	}

	/**
	 * @observable-property {Boolean}
	 */
	@lang.decorators.observableAccessor({init: false})
	expanded: lang.ObservableProperty<boolean>;

	createCommands(): core.lang.Map<core.commands.ICommand> {
		return {
			Toggle: core.createCommand({
				execute: (args) => {
					args.part.toggle();
				}
			}),
			Expand: core.createCommand({
				execute: (args) => {
					args.part.expand();
				}
			}),
			Collapse: core.createCommand({
				execute: (args) => {
					args.part.collapse();
				}
			})
		};
	}

	expand(): void {
		this._expanding = true;
		this.expanded(true);
	}

	collapse(): void {
		// hide body with animation
		this.container.find(".x-expandable-body").slideUp("fast", () => {
			this.expanded(false);
			this._refresh();
		});
	}

	toggle(): void {
		if (this.expanded()) {
			this.collapse();
		} else {
			this.expand();
		}
	}

	body(): IPart {
		var that = this,
			part = that._body;
		if (typeof part === "string") {
			part = core.createPart(part);
			if (that.navigationService && typeof part.setNavigationService === "function") {
				part.setNavigationService(that.navigationService);
			}
			if (that._bodyViewModel && typeof part.setViewModel === "function") {
				part.setViewModel(that._bodyViewModel);
			}
			that._body = part;
			that._bodyOwned = true;
		}
		return part;
	}

	setViewModel(viewModel: any): void {
		this._bodyViewModel = viewModel;
	}

	/**
	 * Привязывает свойство expanded к _bodyViewModel и возвращает значение expanded.
	 * Используется в шаблоне.
	 */
	boundExpanded(): boolean {
		let that = this;
		if (!that._disposable && that._expandedProp && that._bodyViewModel) {
			that._disposable = binding.databind(
				binding.expr(that, that.expanded),
				binding.expr(that._bodyViewModel, that._expandedProp)
			);
		}
		return that.expanded();
	}

	isParentExpandable(): boolean {
		return this.$domElement.hasClass("x-expandable");
	}

	protected doRender(domElement: JQuery|HTMLElement): lang.Promisable<void> {
		let container = $(domElement);

		super.doRender(domElement);

		if (!container.hasClass("x-expandable")) {
			container = container.children(".x-expandable");
		}

		if (this.expanded()) {
			container.removeClass("x-collapsed").addClass("x-expanded");
		} else {
			container.removeClass("x-expanded").addClass("x-collapsed");
		}

		// в процессе разворачивания "тело" изначально скрыто, покажем его с анимацией
		if (this._expanding) {
			this._expanding = false;
			container.find(".x-expandable-body").slideDown("fast", () => {
				this._refresh();
			});
		}

		this.container = container;
	}

	dispose(options?: core.ui.Part.CloseOptions): void {
		let that = this;
		super.dispose(options);

		if (that._disposable) {
			that._disposable.dispose();
		}
		if (that._bodyOwned) {
			that._body.dispose();
		}
		that.container = undefined;
	}

	protected _refresh(): void {
		this.notifyDOMChanged();
	}
}

// backward compatibility: access to static fields via prototype
ExpandablePanel.mixin({
	defaultOptions: ExpandablePanel.defaultOptions
});

namespace ExpandablePanel {
	export interface Options extends View.Options {
		body?: IPart;
		expandedProp?: string;
		expandTitle?: string;
		collapseTitle?: string;
		expanded?: boolean;
	}
}

core.ui.ExpandablePanel = ExpandablePanel;
export = ExpandablePanel;
