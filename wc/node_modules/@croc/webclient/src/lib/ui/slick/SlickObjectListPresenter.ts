import core = require("core");
import SlickObjectListDataPresenter = require("lib/ui/slick/SlickObjectListDataPresenter");
import ObjectListPresenterBase = require("lib/ui/list/ObjectListPresenterBase");
import ContextPartCarousel = require("lib/ui/validation/ContextPartCarousel");
import List = require("lib/ui/list/List");
import peObjectList = require("lib/ui/pe/peObjectList");
import peObjectListTemplate = require("xhtmpl!lib/ui/templates/peObjectList.hbs");

import lang = core.lang;
import { IPart } from "lib/ui/.ui";
import { IList, ObjectListColumn } from "ui/list/.list";
import { Violation } from "lib/validation";
import { ContextPartComponentMixin } from "lib/ui/validation/ContextPartMixin";
import Options = SlickObjectListPresenterBase.Options;

/**
 * Base presenter for ObjectList based on SlickGrid.
 */
class SlickObjectListPresenterBase extends ObjectListPresenterBase {
	static defaultOptions: Options = {
		DataPresenter: SlickObjectListDataPresenter,
		hasCheckboxes: true,
		cssClass: "x-list-slick"
	};

	options: Options;
	dataPresenter: SlickObjectListDataPresenter;

	/**
	 * @constructs SlickObjectListPresenterBase
	 * @extends ObjectListPresenterBase
	 * @param {Object} options
	 */
	constructor(options?: Options) {
		options = SlickObjectListPresenterBase.mixOptions(options, SlickObjectListPresenterBase.defaultOptions);
		super(options);
	}

	focus(): void {
		let that = this;
		if (!that.dataPresenter) { return; }
		let grid = that.dataPresenter.grid,
			gridElement = that.dataPresenter.gridElement;

		if (grid && gridElement && gridElement.is(":visible")) {
			grid.focus();
			// focus on the active cell if there are any rows in the grid
			if (!grid.getActiveCell()) {
				grid.setActiveCell(lang.last(grid.getSelectedRows()) || 0, 0);
			}
		} else if (that.domElement) {
			// no rows - focus on the first button in menuRow
			that.$domElement.find(".x-list-menu-row-container :input:not(:disabled):visible:first").focus();
		}
	}

	scrollToSelf(): void {
		if (!this.dataPresenter) { return; }

		let grid = this.dataPresenter.grid;
		if (grid && grid.getDataLength()) {
			this.dataPresenter.scrollToSelf();
		} else {
			core.html.scrollToElement({element: this.domElement, align: "center"});
		}
	}

	/**
	 * Refresh specified items
	 * @param items Items ot refresh. If not specified, then all items will be refreshed.
	 */
	refreshItems(items?: any[]|any): void {
		this.dataPresenter.refreshItems(items);
	}
}

namespace SlickObjectListPresenterBase {
	export interface Options extends ObjectListPresenterBase.Options {
		hasCheckboxes?: boolean;
		affixParts?: boolean;
		affixHeader?: boolean;
		gridCssClass?: string;
		gridOptions?: {
			autoHeight?: boolean;
			[key: string]: any;
		};
	}
}


// SlickObjectListPresenter: begin

class SlickObjectListPresenter extends SlickObjectListPresenterBase {
	static defaultOptions: Options = {
		affixHeader: true,
		affixParts: true
	};

	partsCarousel: ContextPartCarousel;
	protected contextParts: lang.ObservableCollection<IPart>;

	/**
	 * @constructs SlickObjectListPresenter
	 * @extends ObjectListPresenterBase
	 * @param {Object} options
	 */
	constructor(options?: Options) {
		options = SlickObjectListPresenter.mixOptions(options, SlickObjectListPresenter.defaultOptions);
		super(options);

		this.partsCarousel = new ContextPartCarousel();
		this.partsCarousel.bind("moved", () => {
			this._activateViolation(this.partsCarousel.currentViolation());
		});
	}

	setViewModel(list: IList & ContextPartComponentMixin): void {
		super.setViewModel(list);

		let that = this;
		if (list.contextParts) {
			that.partsCarousel.items().source(list.contextParts);
			if (list.userSettings) {
				list.userSettings.attach("contextParts", that.partsCarousel.userSettings);
			}
		}
		if (that.dataPresenter && that.dataPresenter.userSettings) {
			list.userSettings.attach("dataPresenter", that.dataPresenter.userSettings);
		}
	}

	dispose(options?: core.ui.Part.CloseOptions): void {
		this.partsCarousel.dispose();
		super.dispose(options);
	}

	protected beforeRender(domElement?: JQuery|HTMLElement): void {
		if (this.options.affixParts) {
			this.partsCarousel.initAffix(domElement, ".x-list-data-container");
		}

		super.beforeRender(domElement);
	}

	protected afterRender(domElement?: JQuery|HTMLElement): void {
		super.afterRender(domElement);

		let $element = this.$domElement;
		$element.on("click", ".x-context-part", e => {
			e.preventDefault();
			this._activateViolation(this.partsCarousel.currentViolation());
		});
	}

	activateContextParts(): void {
		this.partsCarousel.activate();
	}

	protected _activateViolation(violation: Violation): void {
		let that = this,
			list = that.viewModel.list();
		if (violation && violation.object) {
			list.activeItem(violation.object);
			// set active column in dataPresenter
			if (violation.props) {
				let column: ObjectListColumn = lang.find(list.columns,
					col => !col.hidden && col.prop && violation.props.indexOf(col.prop) >= 0);
				if (column) {
					that.dataPresenter.setActiveColumn(column);
				}
			}
			that.focus();
			that.scrollToSelf();
		}
	}
}

SlickObjectListPresenter.mixin({
	defaultOptions: SlickObjectListPresenter.defaultOptions
});

namespace SlickObjectListPresenter {
	export interface Options extends SlickObjectListPresenterBase.Options { }
}

// SlickObjectListPresenter: end

// peSlickObjectListPresenter: begin

class peSlickObjectListPresenter extends SlickObjectListPresenterBase {
	static defaultOptions: Options = {
		template: peObjectListTemplate,
		affixHeader: false,
		affixMenu: false,
		menuRowCssClass: "x-menu-bar",
		gridCssClass: "x-pe-object-list-grid",
		gridOptions: {
			autoHeight: false
		},
		showTitle: false,
		templates: ["hint", "data", "menuRow"]
	};

	/**
	 * @constructs peSlickObjectListPresenter
	 * @extends SlickObjectListPresenter
	 * @param options
	 */
	constructor(options?: Options) {
		options = peSlickObjectListPresenter.mixOptions(options, peSlickObjectListPresenter.defaultOptions);
		super(options);
	}

	protected _initPaginator(list: IList): void {
		// do nothing, skip creation of paginator
	}
}

peSlickObjectListPresenter.mixin({
	defaultOptions: peSlickObjectListPresenter.defaultOptions
});

namespace peSlickObjectListPresenter { }

// peSlickObjectListPresenter: end

core.ui.SlickObjectListPresenter = SlickObjectListPresenter;
List.defaultOptions.Presenter = SlickObjectListPresenter;

core.ui.peSlickObjectListPresenter = peSlickObjectListPresenter;
peObjectList.defaultOptions.Presenter = peSlickObjectListPresenter;

export = SlickObjectListPresenter;
