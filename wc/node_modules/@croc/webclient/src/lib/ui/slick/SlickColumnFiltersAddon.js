define(["require", "exports", "lib/core.jquery", "core", "lib/ui/slick/SlickObjectListDataPresenter", "i18n!lib/nls/resources", "lib/ui/Popup"], function (require, exports, $, core, SlickObjectListDataPresenter, resources) {
    "use strict";
    exports.__esModule = true;
    var lang = core.lang;
    var SlickColumnFilterBase = (function (_super) {
        __extends(SlickColumnFilterBase, _super);
        /**
         * @constructs SlickColumnFilterBase
         * @extends Part
         * @param options
         * @param {ObjectListColumn} options.column
         */
        function SlickColumnFilterBase(options) {
            var _this = this;
            options = SlickColumnFilterBase.mixOptions(options, SlickColumnFilterBase.defaultOptions);
            _this = _super.call(this, options) || this;
            _this.column = _this.options.column;
            return _this;
        }
        SlickColumnFilterBase.prototype.tweakOptions = function (options) {
            var pe = options.pe;
            // ensure vt is initialized
            if (!pe.vt || pe.vt === "object") {
                pe.vt = "string";
            }
            // column filters are always nullable
            pe.nullable = true;
            // facets (e.g. minLen) should not be applied to column filters, turn validation rules off
            pe.rules = [];
            _super.prototype.tweakOptions.call(this, options);
        };
        SlickColumnFilterBase.prototype._triggerFilterChanged = function () {
            this.trigger(this.events.FILTER_CHANGED, this);
        };
        SlickColumnFilterBase.prototype._createPE = function (options, viewModel) {
            options = lang.append(options || {}, this.options.pe);
            return core.ui.PropertyEditor.DefaultMapping.create(options, viewModel || this);
        };
        SlickColumnFilterBase.defaultOptions = {
            /**
             * @prototype {Object} pe metadata of inner PE
             */
            pe: {
                contextName: "inline",
                changeTrigger: "keyPressed"
            }
        };
        SlickColumnFilterBase.events = {
            FILTER_CHANGED: "filterChanged"
        };
        __decorate([
            lang.decorators.constant(SlickColumnFilterBase.events)
        ], SlickColumnFilterBase.prototype, "events");
        return SlickColumnFilterBase;
    }(core.ui.Part));
    var SlickColumnFilterValue = (function (_super) {
        __extends(SlickColumnFilterValue, _super);
        /**
         * @constrcuts SlickColumnFilterValue
         * @extends SlickColumnFilterBase
         * @param options
         */
        function SlickColumnFilterValue(options) {
            var _this = _super.call(this, options) || this;
            var that = _this;
            that.matcher = that.options.matcher || that.defaultMatcher;
            that.bind("change:value", that._triggerFilterChanged, that);
            return _this;
        }
        SlickColumnFilterValue.prototype.defaultMatcher = function (value, filterValue) {
            // NOTE: value and filterValue are not empty here
            return value.toString().toLowerCase().indexOf(filterValue.toString().toLowerCase()) >= 0;
        };
        // Filter API
        SlickColumnFilterValue.prototype.match = function (value) {
            var filterValue = this.value();
            if (lang.isNullOrEmpty(filterValue)) {
                return true;
            }
            if (lang.isNullOrEmpty(value)) {
                return false;
            }
            return this.matcher(value, filterValue);
        };
        SlickColumnFilterValue.prototype.isEmpty = function () {
            return lang.isNullOrEmpty(this.value());
        };
        SlickColumnFilterValue.prototype.clear = function () {
            this.value(null);
        };
        SlickColumnFilterValue.prototype.focus = function () {
            var pe = this.pe;
            if (pe) {
                pe.focus();
            }
        };
        // Part API
        SlickColumnFilterValue.prototype.doRender = function (domElement) {
            var that = this;
            _super.prototype.doRender.call(this, domElement);
            var $div = $("<div class='x-pe'></div>").appendTo(domElement);
            that.pe = that._createPE({ name: "value" });
            that.pe.render($div);
            that.registerChild(that.pe, true);
        };
        __decorate([
            lang.decorators.observableAccessor()
        ], SlickColumnFilterValue.prototype, "value");
        return SlickColumnFilterValue;
    }(SlickColumnFilterBase));
    var SlickColumnFilterEnum = (function (_super) {
        __extends(SlickColumnFilterEnum, _super);
        function SlickColumnFilterEnum(options) {
            var _this = _super.call(this, options) || this;
            var peMd = _this.options.pe;
            var ref = peMd.ref;
            _this.isFlags = lang.coalesce(peMd.flags, ref && ref.flags);
            return _this;
        }
        SlickColumnFilterEnum.prototype.defaultMatcher = function (value, filterValue) {
            return this.isFlags ? (value & filterValue) === filterValue : value == filterValue;
        };
        return SlickColumnFilterEnum;
    }(SlickColumnFilterValue));
    var SlickColumnFilterRange = (function (_super) {
        __extends(SlickColumnFilterRange, _super);
        /**
         * @constructs SlickColumnFilterRange
         * @extends SlickColumnFilterBase
         * @param {Object} options
         */
        function SlickColumnFilterRange(options) {
            var _this = this;
            options = SlickColumnFilterRange.mixOptions(options, SlickColumnFilterRange.defaultOptions);
            _this = _super.call(this, options) || this;
            var that = _this;
            that.commands = that.options.commands;
            that.menu = new core.ui.Menu(that.options.menu);
            that.menu.bindToPart(that);
            that.bind("change:from", that._triggerFilterChanged, that);
            that.bind("change:to", that._triggerFilterChanged, that);
            return _this;
        }
        // Filter API
        SlickColumnFilterRange.prototype.match = function (value) {
            var that = this, from = that.from(), to = that.to();
            return (lang.isNullOrEmpty(from) || (value != null && from <= value)) &&
                (lang.isNullOrEmpty(to) || (value != null && value <= to));
        };
        SlickColumnFilterRange.prototype.isEmpty = function () {
            return lang.isNullOrEmpty(this.from()) && lang.isNullOrEmpty(this.to());
        };
        SlickColumnFilterRange.prototype.clear = function () {
            this.from(null);
            this.to(null);
        };
        SlickColumnFilterRange.prototype.focus = function () {
            var peFrom = this.peFrom;
            if (peFrom) {
                peFrom.focus();
            }
        };
        // Part API
        SlickColumnFilterRange.prototype.doRender = function (domElement) {
            var that = this;
            _super.prototype.doRender.call(this, domElement);
            var $from = $("<div class='x-pe'></div>");
            that.peFrom = that._createPE({ name: "from" });
            that.peFrom.render($from);
            var $to = $("<div class='x-pe'></div>");
            that.peTo = that._createPE({ name: "to" });
            that.peTo.render($to);
            var $menu = $("<div class='x-menu-bar'></div>"), menuPresenter = new core.ui.MenuPresenter({ viewModel: that.menu });
            menuPresenter.render($menu);
            that.$domElement.append($from, $to, $menu);
            that.registerChild(that.peFrom, true);
            that.registerChild(that.peTo, true);
            that.registerChild(menuPresenter, true);
        };
        SlickColumnFilterRange.defaultOptions = {
            menu: { items: [
                    { name: "Clear", title: resources.clear }
                ] },
            commands: {
                Clear: function (that) {
                    return new core.commands.BoundCommand(that.clear, // execute
                    function () { return !that.isEmpty(); }, // canExecute
                    that);
                }
            },
            pe: {
                openPickerOn: "both" // for peDateTime only!
            }
        };
        __decorate([
            lang.decorators.observableAccessor()
        ], SlickColumnFilterRange.prototype, "from");
        __decorate([
            lang.decorators.observableAccessor()
        ], SlickColumnFilterRange.prototype, "to");
        return SlickColumnFilterRange;
    }(SlickColumnFilterBase));
    // See https://github.com/Microsoft/TypeScript/issues/4890
    // TODO: вынести в core.lang?
    function override(Super) {
        var methods = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            methods[_i - 1] = arguments[_i];
        }
        var C = (function (_super) {
            __extends(C, _super);
            function C() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return C;
        }(Super));
        for (var _a = 0, methods_1 = methods; _a < methods_1.length; _a++) {
            var name_1 = methods_1[_a];
            C.prototype[name_1] = Super.prototype[name_1];
        }
        return C;
    }
    var SlickObjectListDataPresenterOverrides = override(SlickObjectListDataPresenter, "setViewModel", "dispose", "onGridInitialized");
    var SlickObjectListDataPresenterAddon = (function (_super) {
        __extends(SlickObjectListDataPresenterAddon, _super);
        function SlickObjectListDataPresenterAddon() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        SlickObjectListDataPresenterAddon.prototype.setViewModel = function (viewModel) {
            var that = this;
            _super.prototype.setViewModel.call(this, viewModel);
            that.viewModel.bind("dataLoaded", that._onListDataLoaded, that);
            that.viewModel.selection.bind("change", that._onSelectionChange, that);
        };
        SlickObjectListDataPresenterAddon.prototype.dispose = function () {
            var that = this;
            that.viewModel.unbind("dataLoaded", null, that);
            that.viewModel.selection.unbind("change", null, that);
            if (that.columnFilters) {
                lang.forEach(that.columnFilters, function (filter) {
                    filter.dispose();
                });
                that.columnFilters = undefined;
            }
            _super.prototype.dispose.call(this);
        };
        SlickObjectListDataPresenterAddon.prototype.onGridInitialized = function (args) {
            var that = this, grid = args.grid;
            if (that.options.columnFilters) {
                that.columnFilters = {};
                for (var _i = 0, _a = that.viewModel.columns; _i < _a.length; _i++) {
                    var col = _a[_i];
                    var filter = that._createColumnFilter(col);
                    if (filter) {
                        filter.bind("filterChanged", that._applyColumnFiltersAsync, that);
                        that.columnFilters[col.prop] = filter;
                    }
                }
                grid.onHeaderCellRendered.subscribe(function (e, args) {
                    var col = args.column.source, filter = col && col.prop && that.columnFilters[col.prop];
                    if (filter) {
                        $("<span class='slick-column-filter'></span>")
                            .click(that._onColumnFilterClick.bind(that, col))
                            .appendTo(args.node);
                        if (!filter.isEmpty()) {
                            $(args.node).addClass("slick-header-column-filtered");
                        }
                    }
                });
                grid.onBeforeHeaderCellDestroy.subscribe(function (e, args) {
                    $(".slick-column-filter", args.node).remove();
                });
                // Force the grid to re-render the header now that the events are hooked up.
                grid.setColumns(grid.getColumns());
            }
            _super.prototype.onGridInitialized.call(this, args);
        };
        SlickObjectListDataPresenterAddon.prototype._createColumnFilter = function (col) {
            if (!col || col.role !== "data" || !col.prop) {
                return;
            }
            var that = this, filterOpt = col.filter;
            // filter === null || filter === false => no filter
            if (filterOpt !== undefined && !filterOpt) {
                return;
            }
            if (lang.isFunction(filterOpt)) {
                return filterOpt.call(that, col);
            }
            // create options for SlickColumnFilterBase
            var options = {
                column: col,
                pe: {}
            };
            // extend by explicitly specified filter options
            lang.extend(options, filterOpt);
            // extend by domain metadata
            var list = that.viewModel;
            if (list.findDomainProp) {
                var prop = list.findDomainProp(col);
                lang.append(options.pe, prop);
            }
            // calculate vt
            options.pe.vt = options.pe.vt || options.vt || col.vt;
            // choose SlickColumnFilterBase implementation
            var Ctor;
            if (lang.isString(filterOpt)) {
                Ctor = that.ColumnFilterClasses[filterOpt];
            }
            else if (filterOpt && filterOpt.name) {
                Ctor = that.ColumnFilterClasses[filterOpt.name];
            }
            if (!Ctor) {
                switch (options.pe.vt) {
                    case "dateTime":
                    case "date":
                    case "time":
                    case "dateTimeTz":
                    case "timeTz":
                    case "ui1":
                    case "i2":
                    case "i4":
                    case "float":
                    case "double":
                    case "decimal":
                        Ctor = SlickColumnFilterRange;
                        break;
                    case "enum":
                        Ctor = SlickColumnFilterEnum;
                        break;
                    default:
                        Ctor = SlickColumnFilterValue;
                        break;
                }
            }
            return new Ctor(options);
        };
        SlickObjectListDataPresenterAddon.prototype._calcColumnFilters = function (item) {
            var that = this;
            if (lang.isFunction(item.hasChanges) && item.hasChanges()) {
                return true;
            }
            return lang.every(that.columnFilters, function (filter, prop) {
                var col = filter.column, getter = col.getter, v = getter ? getter.call(item, col) : lang.get(item, prop);
                return filter.match(v);
            });
        };
        SlickObjectListDataPresenterAddon.prototype._applyColumnFilters = function () {
            var that = this;
            // set 'where' condition for items (selection will be auto-updated)
            that.viewModel.items.where(function (item) { return that._calcColumnFilters(item); });
            // toggle 'slick-header-column-filtered' css class for headers
            if (that.grid && that.gridElement) {
                var $headers_1 = that.gridElement.find(".slick-header-column");
                var appliedSome_1 = false;
                that.grid.getColumns().forEach(function (col, i) {
                    var prop = col.source && col.source.prop;
                    if (prop) {
                        var filter = that.columnFilters[prop];
                        var applied = !!(filter && !filter.isEmpty());
                        if (applied) {
                            appliedSome_1 = true;
                        }
                        $headers_1.eq(i).toggleClass("slick-header-column-filtered", applied);
                    }
                });
                that.applied = appliedSome_1;
            }
        };
        SlickObjectListDataPresenterAddon.prototype._onColumnFilterClick = function (col, e) {
            e.preventDefault();
            e.stopPropagation();
            var that = this, filter = that.columnFilters[col.prop];
            // NOTE: The filter may be still rendered if previous popup is closing with animation at the moment.
            // This can happen on click to the filter icon when popup is already opened.
            if (!filter || filter.domElement) {
                return;
            }
            var $target = $(e.target), $headerColumn = $target.closest(".slick-header-column", that.gridElement.get(0)), $header = $headerColumn.closest(".slick-header", that.gridElement.get(0)), $viewport = $(".slick-viewport", that.gridElement), popup = new core.ui.Popup({
                rootCssClass: "x-grid-column-filter",
                unbound: true,
                body: filter,
                preserveBody: true
            });
            function close() {
                popup.close();
            }
            function reposition() {
                var $popup = popup.$domElement, offset = $target.offset(), position = {
                    top: offset.top + $target.height(),
                    left: offset.left
                };
                $popup.within(that.gridElement, position);
            }
            popup.bind("ready", function () {
                $headerColumn.addClass("slick-header-column-active");
                $header.on("affixStuck affixUnstuck", reposition);
                $viewport.on("scroll", close);
                core.$window.on("resize", close);
            });
            popup.bind("unload", function () {
                $headerColumn.removeClass("slick-header-column-active");
                $header.off("affixStuck affixUnstuck", reposition);
                $viewport.off("scroll", close);
                core.$window.off("resize", close);
            });
            popup.render(that.gridElement);
            reposition();
            filter.focus();
        };
        SlickObjectListDataPresenterAddon.prototype._onListDataLoaded = function () {
            var that = this, filters = that.columnFilters;
            if (filters) {
                lang.forEach(filters, function (filter) {
                    // NOTE: unbind and bind again to prevent applying each filter separately
                    filter.unbind("filterChanged", null, that);
                    filter.clear();
                    filter.bind("filterChanged", that._applyColumnFiltersAsync, that);
                });
                // apply all filters at once
                that._applyColumnFilters();
            }
        };
        SlickObjectListDataPresenterAddon.prototype._onSelectionChange = function (sender, args) {
            var that = this;
            var filters = that.columnFilters;
            if (!filters || !that.applied) {
                return;
            }
            // there is at least one applied (active) column filter
            if (args && args.added) {
                for (var _i = 0, _a = args.added; _i < _a.length; _i++) {
                    var item = _a[_i];
                    if (that.viewModel.items.indexOf(item) < 0) {
                        // we've found the object which is in selection but not in items,
                        // this means that it's hidden by filters. clear them.
                        that._onListDataLoaded();
                        return;
                    }
                }
            }
        };
        __decorate([
            lang.decorators.constant({
                "value": SlickColumnFilterValue,
                "enum": SlickColumnFilterEnum,
                "range": SlickColumnFilterRange
            })
        ], SlickObjectListDataPresenterAddon.prototype, "ColumnFilterClasses");
        __decorate([
            lang.decorators.constant(lang.debounce(SlickObjectListDataPresenterAddon.prototype._applyColumnFilters, 200, true))
        ], SlickObjectListDataPresenterAddon.prototype, "_applyColumnFiltersAsync");
        return SlickObjectListDataPresenterAddon;
    }(SlickObjectListDataPresenterOverrides));
    lang.extend(SlickObjectListDataPresenter.prototype, SlickObjectListDataPresenterAddon.prototype);
});
//# sourceMappingURL=SlickColumnFiltersAddon.js.map