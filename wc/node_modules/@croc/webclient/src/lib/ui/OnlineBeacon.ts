import $ = require("jquery");
import core = require("core");
import binding = require("lib/binding");
import View = require("lib/ui/handlebars/View");
import template = require("xhtmpl!lib/ui/templates/OnlineBeacon.hbs");
import ConfirmDialog = require("lib/ui/ConfirmDialog");
import Menu = require("lib/ui/menu/Menu");
import DropDownMenuPresenter = require("lib/ui/menu/DropDownMenuPresenter");
import resources = require("i18n!lib/nls/resources");
import "xcss!lib/ui/styles/onlineBeacon.css";

import lang = core.lang;
import { IApplication } from "lib/.core";
import {DataFacadeSmart} from "core.interop";

class OnlineBeacon extends View {
	static defaultOptions: OnlineBeacon.Options = {
		template: template,
		unbound: true // NOTE: main layout is fixed
	};

	static defaultMenu: Menu.Options = {
		items: [{
			name: "online",
			title: resources["interop.go_online"],
			hideIfDisabled: true
		}, {
			name: "offline",
			title: resources["interop.go_offline"],
			hideIfDisabled: true
		}, {
			name: "check",
			title: resources["interop.check_connection"]
		}]
	};

	options: OnlineBeacon.Options;
	app: IApplication;
	dataFacade: DataFacadeSmart;
	commands: core.lang.Map<core.commands.ICommand>;
	menu: Menu;

	/**
	 * @class OnlineBeacon
	 * @extends View
	 * @param {Application} app
	 * @param {Object} [options]
	 */
	constructor(app: IApplication, options: OnlineBeacon.Options) {
		options = OnlineBeacon.mixOptions(options, OnlineBeacon.defaultOptions);
		super(options);

		this.app = app;
		// NOTE: OnlineBeacon can only work with DataFacadeSmart
		this.dataFacade = <DataFacadeSmart>app.dataFacade;
		this.commands = this.createCommands();
		this.menu = this.createMenu();
		if (this.menu) {
			this.menu.bindToPart(this);
		}
	}

	createMenuDefaults(): Menu.Options {
		return Menu.defaultsFor(OnlineBeacon.defaultMenu, "OnlineBeacon");
	}

	createMenu(): Menu {
		return new Menu(this.createMenuDefaults(), this.options.menu);
	}

	/**
	 * Create commands
	 * @protected
	 * @returns {{
		 * 		online: (Command),
		 * 		offline: (Command),
		 * 		check: (Command),
		 * 		resolve: (Command)
		 * 	}}
	 */
	createCommands(): core.lang.Map<core.commands.ICommand> {
		let that = this;
		return {
			online: core.createCommand({
				execute: () => {
					that.dataFacade.manuallyDisconnected(false);
				},
				canExecute: () => {
					return that.dataFacade.manuallyDisconnected();
				}
			}),
			offline: core.createCommand({
				execute: () => {
					ConfirmDialog.create({
						header: resources["interop.go_offline"],
						text: resources["interop.go_offline_prompt"]
					}).render().done(function (result) {
						if (result === "yes") {
							that.dataFacade.manuallyDisconnected(true);
						}
					});
				},
				canExecute: () => {
					return !that.dataFacade.manuallyDisconnected();
				}
			}),
			check: core.createCommand({
				execute: () => {
					that.dataFacade.checkConnection().then((result) => {
						if (!result || (<any>result).notificationPublished) {
							return;
						}
						if (result.serverOnline) {
							that.app.eventPublisher.publish("ui.OnlineBeacon.online", core.SystemEvent.create({
								kind: core.SystemEvent.Kind.notification,
								priority: "low",
								message: resources["interop.server_online"]
							}));
						} else {
							that.app.eventPublisher.publish("ui.OnlineBeacon.offline", core.SystemEvent.create({
								kind: core.SystemEvent.Kind.notification,
								priority: "low",
								message: resources["interop.server_offline"]
							}));
						}
					});
				}
			}),
			resolve: core.createCommand({
				execute: () => {
					that.app.stateManager.applyState({ area: "offline" });
				}
			})
		};
	}
}

// backward compatibility: access to static fields via prototype
OnlineBeacon.mixin({
	defaultOptions: OnlineBeacon.defaultOptions,
	defaultMenu: OnlineBeacon.defaultMenu
});

namespace OnlineBeacon {
	export interface Options extends View.Options {
		menu?: Menu.Options;
	}
}

core.ui.OnlineBeacon = OnlineBeacon;

export = OnlineBeacon;
