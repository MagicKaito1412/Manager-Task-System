import $ = require("jquery");
import core = require("core");
import Part = require("lib/ui/Part");

class ObjectDetails extends Part {
	/**
	 * @deprecated
	 * @constructs ObjectDetails
	 * @param options
	 */
	constructor(options) {
		super();
		options = options || {};
		this.viewModel = options.viewModel;
	}

	protected doRender(domElement: JQuery|HTMLElement): core.lang.Promisable<void> {
		super.doRender(domElement);

		var that = this,
			html = "",
			obj = that.viewModel,
			propName,
			prop,
			propValue;

		if (!obj) {
			html = "<span class='label label-default'>You need to select object</span>"
		} else {
			html += "<dl>";
			for (propName in obj.meta.props) {
				prop = obj.meta.props[propName];
				if (prop.vt === "object") {
					if (prop.many) {
						propValue = "<button id='btnLoad' data-prop='" + prop.name + "'>load</button>";
					} else {
						propValue = obj.get(prop.name);
						propValue = propValue ? propValue.toString() : "";
					}
				} else {
					propValue = obj.get(prop.name);
				}
				html += "<dt>" + prop.descr + " </dt>";
				html += "<dd>" + propValue + "</dd>";
			}
			html += "</dl>";
		}
		that.$domElement.empty();
		$(html).appendTo(that.$domElement);

		$("#btnLoad").on("click", function (e) {
			e.preventDefault();
			let source = this,
				propName = $(this).attr("data-prop");
			obj.get(propName).load().then((propValue) => {
				source.disabled = true;
				try {
					$(source).replaceWith("<dd>Count: " + propValue.count() + "</dd>");
				} catch (ex) {
					$(source).replaceWith("<dd>Error on prop loading: " + ex.message + "</dd>");
				}
			});
		});
	}

	setViewModel (viewModel): void {
		this.viewModel = viewModel;
		if (this.domElement) {
			this.rerender();
		}
	}
}

core.ui.ObjectDetails = ObjectDetails;

export = ObjectDetails;
