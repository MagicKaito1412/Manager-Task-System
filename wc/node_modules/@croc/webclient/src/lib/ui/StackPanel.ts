import jquery = require("jquery");
import core = require("core");
import Part = require("lib/ui/Part");
import {IPart} from "lib/ui/.ui";

class StackPanel extends Part {
	items: StackPanel.Item[];
	options: StackPanel.Options;

	/**
	 * @constructs StackPanel
	 * @extends Component
	 * @param options
	 */
	constructor (options: StackPanel.Options) {
		super(options);
		options || (options = {});
		this.items = [];
		if (options.items) {
			if (core.lang.isArray(options.items)) {
				for (let i = 0; i < options.items.length; i += 1) {
					this._add(options.items[i], "part" + i);
				}
			} else {
				for (let name in options.items) {
					let item = options.items[name];
					this._add(item , name);
				}
			}
		}
	}
	protected _add (itemOpt: StackPanel.ItemOption, name?: string): void {
		if (itemOpt) {
			let item: StackPanel.Item;
			if (typeof itemOpt === "string") {
				item = {partName: itemOpt};
			} else if (itemOpt["part"]) {
				item = {part: itemOpt["part"]};
			} else if (itemOpt["render"]) {
				item = {part: <IPart>itemOpt};
			}
			if (item) {
				item.name = name;
				this.items.push(item);
			}
		}
	}

	render(domElement: JQuery|HTMLElement): core.lang.Promisable<void> {
		let container = $(domElement);

		container.empty();
		let table = $("<table style='width:100%'></table>").appendTo(container);

		// phase 1: create table with a row for each item
		for (let i = 0; i < this.items.length; i += 1) {
			let item = this.items[i];
			let tr = $("<tr></tr>").appendTo(table);
			let td = $("<td></td>").appendTo(tr);
			td.attr("id", i);
			if (item.height) {
				tr.css({height: item.height});
			}
			if (!item.part && item.partName)
				item.part = core.createPart(item.partName);
			if (!item.part)
				throw new Error("StackPanel.render: cannot render item '" + item.name + "' as it doesn't have connected part");

			if (item.part.setNavigationService)
				item.part.setNavigationService(this.navigationService);

			item.part.render(td);
		}
	}
}
namespace StackPanel {
	export interface Options extends Part.Options {
		items?: StackPanel.ItemOption[] | core.lang.Map<StackPanel.ItemOption>;
	}
	export type ItemOption = string | IPart | {part: IPart};
	export interface Item {
		part?: IPart;
		partName?: string;
		name?: string;
		height?: string | number;
	}
}
core.ui.StackPanel = StackPanel;

export = StackPanel;
