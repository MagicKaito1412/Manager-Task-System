import $ = require("jquery");
import core = require("core");
import ObjectEditorPresenterBase = require("lib/ui/editor/ObjectEditorPresenterBase");
import Menu = require("lib/ui/menu/Menu");
import resources = require("i18n!lib/nls/resources");
import "xcss!lib/ui/styles/objectWizardCommon.css";

import EditorPage = require("lib/ui/editor/EditorPage");
import ObjectWizard = require("./ObjectWizard");

class ObjectWizardPresenterBase extends ObjectEditorPresenterBase {
	static defaultOptions: ObjectWizardPresenterBase.Options = {
		unbound: true
	};

	viewModel: ObjectWizard;
	//secContainer: JQuery;

	/**
	 * @constructs ObjectWizardPresenterBase
	 * @extends ObjectEditorPresenterBase
	 * @param {Object} [options]
	 */
	constructor (options?: ObjectEditorPresenterBase.Options) {
		options = ObjectWizardPresenterBase.mixOptions(options, ObjectWizardPresenterBase.defaultOptions);
		super(options);
	}

	protected doRender(domElement: JQuery|HTMLElement): void {
		let that = this,
			menuPage = that.viewModel.menuPage;
		super.doRender(domElement);
		that.container = $(domElement).find(".x-editor-wizard");
		//that.renderSections(0);
		if (menuPage) {
			$(domElement).on("keyup", function (e) {
				return !menuPage.executeHotkey(e);
			});
		}
	}

	activatePage (page: EditorPage): void {
		let that = this,
			index,
			pages = that.viewModel.pages,
			// страница нелинейного мастера когда на неё заходят первый раз не имеет контейнера. нужно создать.
			pageSel = that.ensurePageContainer(page);

		page.render(pageSel);
		pageSel.show();
		index = pages.indexOf(page);
		if (index === -1) {
			throw new Error("ObjectWizardPresenterBase.activatePage: unknown page " + page.name || page.title);
		}
		//that.renderSections(index);
		that.notifyDOMChanged();
	}

	/**
	 * Return page number. Function is used by template
	 * @param {Object} page - wizard page
	 * @returns {number} page number
	 */
	pageNumber (page: EditorPage): number {
		let that = this;
		return that.viewModel.pages.all().indexOf(page) + 1;
	}

	protected ensurePageContainer (page: EditorPage): JQuery {
		let that = this,
			pageSel = that._getPageByName(page.name);
		if (!pageSel.length) {
			pageSel = $("<div class='x-editor-page' style='display:none;'></div>").
			insertAfter(that.container.find(".x-editor-page").last());
			pageSel.attr("data-page", page.name);
		}
		return pageSel;
	}

	/*
	protected renderSections (index: number): void {
		let that = this,
			pages = that.viewModel.pages;

		let page = pages.get(index);
		if (page.sections) {
			if (!that.secContainer) {
				that.secContainer = $("<ul class='nav nav-pills'></ul>").appendTo(
					$("<div class='part-nav'></div>").appendTo(that.container)
				);
			} else {
				$(that.secContainer).empty();
			}
			page.sections.forEach(function(section) {
				$("<li><a href='#" + section.name + "'>" + section.title + "</a></li>").appendTo(that.secContainer);
			});
			$(that.secContainer).find("a").click(function(e) {
				e.preventDefault();
				let target = this.hash;
				core.html.scrollToElement({element: target, align: "top"});
			});
		} else {
			if (that.secContainer) {
				$(that.secContainer).empty();
			}
		}
	}
*/
}

namespace ObjectWizardPresenterBase {
	export interface Options extends ObjectEditorPresenterBase.Options {
	}
}
export = ObjectWizardPresenterBase;
