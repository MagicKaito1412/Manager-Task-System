import $ = require("jquery");
import core = require("core");
import ObjectWizardPresenterBase = require("lib/ui/editor/ObjectWizardPresenterBase");
import wizardTemplate = require("xhtmpl!lib/ui/templates/Wizard.hbs");
import resources = require("i18n!lib/nls/resources");
import "xcss!lib/ui/styles/objectWizard.css";

import ObjectWizard = require("lib/ui/editor/ObjectWizard");
import EditorPage = require("lib/ui/editor/EditorPage");
import PropertyEditor = require("lib/ui/pe/PropertyEditor");


class ObjectWizardPresenter extends ObjectWizardPresenterBase {
	static defaultOptions: ObjectWizardPresenterBase.Options = {
		template: wizardTemplate
	};

	private breadcrumbs: JQuery;
	private $topnav: JQuery;

	/**
	 * @constructs ObjectWizardPresenter
	 * @extends ObjectWizardPresenterBase
	 * @param {Object} [options]
	 */
	constructor (options?: ObjectWizardPresenterBase.Options) {
		options = ObjectWizardPresenter.mixOptions(options, ObjectWizardPresenter.defaultOptions);
		super(options);
	}

	protected doRender(domElement: JQuery|HTMLElement): void {
		let that = this;
		super.doRender(domElement);
		that.breadcrumbs = that.container.find(".x-wizard-top-nav > .breadcrumb");
	}

	protected onReady (): void {
		let that = this,
			eventPublisher = that.viewModel && that.viewModel.app && that.viewModel.app.eventPublisher;

		if (eventPublisher && that.options.affixNavigation) {
			if (that.$topnav) {
				eventPublisher.publish("ui.affix.remove_element", {
					element: that.$topnav
				});
			}

			that.$topnav = that.container.find(".x-wizard-top-nav");
			eventPublisher.publish("ui.affix.add_element", {
				element: that.container.find(".x-wizard-top-nav"),
				controlledBy: that.container.find(".x-editor-pages"),
				affixTo: "top"
			});
		}
		super.onReady();
	}

	unload (): void {
		let that = this,
			vm = that.viewModel;

		if (that.$topnav) {
			vm.app.eventPublisher.publish("ui.affix.remove_element", {
				element: that.$topnav
			});
		}

		super.unload.apply(that, arguments);
	}
}

core.ui.ObjectWizardPresenter = ObjectWizardPresenter;

export = ObjectWizardPresenter;
