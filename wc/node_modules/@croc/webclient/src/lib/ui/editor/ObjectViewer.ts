import core = require("core");
import ObjectEditor = require("lib/ui/editor/ObjectEditor");
import EditorPage = require("lib/ui/editor/EditorPage");
import PropertyEditor = require("lib/ui/pe/PropertyEditor");
import peViewOnly = require("lib/ui/pe/peViewOnly");

import lang = core.lang;
import PartCloseOptions = core.ui.PartCloseOptions;
import Menu = core.ui.Menu;
import Options = ObjectViewer.Options;
import Model = ObjectEditor.Model;
import KnownMenus = ObjectEditor.KnownMenus;

class ObjectViewer extends ObjectEditor {
	static defaultOptions: Options = {
		disableValuesNavigation: undefined,
		cssRootClass: "x-editor-base x-editor-viewer"
	};

	static defaultMenus: KnownMenus = {
		Editor: { items: [
			{ name: "CancelAndClose", title: core.nls.resources.close, icon: "close" }
		]},
		RootEditor: { items: [
			{ name: "CancelAndClose", title: core.nls.resources.close, icon: "close" }
		]}
	};

	@lang.decorators.constant(ObjectViewer.defaultMenus)
	defaultMenus: KnownMenus;

	/**
	 * context name for property editors
	 */
	@lang.decorators.constant("viewer")
	contextName: string;

	options: Options;

	/**
	 * @constructs ObjectViewer
	 * @extends ObjectEditor
	 * @param {Object} options
	 */
	constructor(options?: Options) {
		options = ObjectViewer.mixOptions(options, ObjectViewer.defaultOptions);
		super(options);
	}

	protected _onCreatePropEditor(page: EditorPage, propMd: PropertyEditor.Options, viewModel: Model): PropertyEditor.Options {
		let mixedPropMd: peViewOnly.Options = super._onCreatePropEditor(page, propMd, viewModel);
		mixedPropMd.readOnly = true;
		if (this.options.disableValuesNavigation) {
			mixedPropMd.disabled = true;
			mixedPropMd.navigable = false;
		}
		return mixedPropMd;
	}

	protected onQueryUnload(options: PartCloseOptions): lang.Promisable<string> {
		// do nothing
		return undefined;
	}
	protected onQueryUnloadWithChanges(options: PartCloseOptions): lang.Promise<string> {
		// do nothing
		return undefined;
	}

	protected queryNavigateSibling(): lang.Promisable<string> {
		// do nothing
		return undefined;
	}
}

namespace ObjectViewer {
	export interface Options extends ObjectEditor.Options {
		disableValuesNavigation?: boolean;
	}
}

ObjectViewer.mixin({
	defaultOptions: ObjectViewer.defaultOptions
});

core.ui.ObjectViewer = ObjectViewer;
export = ObjectViewer;
