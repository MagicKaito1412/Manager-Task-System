import $ = require("jquery");
import core = require("core");
import View = require("lib/ui/handlebars/View");
import ObjectWizardPresenterBase = require("lib/ui/editor/ObjectWizardPresenterBase");
import wizardStackedTemplate = require("xhtmpl!lib/ui/templates/WizardStacked.hbs");
import resources = require("i18n!lib/nls/resources");
import "xcss!lib/ui/styles/objectWizardStacked.css";

import ObjectWizard = require("lib/ui/editor/ObjectWizard");
import EditorPage = require("lib/ui/editor/EditorPage");
import PropertyEditor = require("lib/ui/pe/PropertyEditor");


View.Handlebars.registerHelper("page-summary-brief", function(options) {
	let page = options.hash.page,
		presenter = options.hash.presenter,
		summary,
		summaryHtml = "";

	if (!page) {
		throw new Error("handlebars 'page-summary' helper: page is null");
	}
	if (!presenter) {
		throw new Error("handlebars 'page-summary' helper: presenter is null");
	}

	summary = presenter.viewModel.getPageSummary(page);

	if (presenter.formatPageSummaryBrief) {
		summaryHtml = presenter.formatPageSummaryBrief(summary);
	}
	return new View.Handlebars.SafeString(summaryHtml);
});

class ObjectWizardStackedPresenter extends ObjectWizardPresenterBase {
	static defaultOptions: ObjectWizardStackedPresenter .Options = {
		template: wizardStackedTemplate,
		/* maximum len of string value presentation in brief summary */
		summaryBriefValueMaxLen: 50,
		showPageSummaryPopup: true
	};
	options: ObjectWizardStackedPresenter.Options;
	topNavPages: core.lang.ObservableCollection<EditorPage>;
	bottomNavPages: core.lang.ObservableCollection<EditorPage>;
	hideTopNav: boolean;

	/**
	 * @constructs ObjectWizardStackedPresenter
	 * @extends ObjectWizardPresenterBase
	 * @param {Object} [options]
	 */
	constructor (options?: ObjectWizardStackedPresenter.Options) {
		options = ObjectWizardStackedPresenter.mixOptions(options, ObjectWizardStackedPresenter.defaultOptions);
		super(options);
		this.topNavPages = new core.lang.ObservableCollection<EditorPage>();
		this.bottomNavPages = new core.lang.ObservableCollection<EditorPage>();
	}

	setViewModel (viewModel: ObjectWizard): void {
		let that = this;

		super.setViewModel(viewModel);

		if (viewModel) {
			that.hideTopNav = viewModel.pages.count() === 1 && viewModel.isLinear();

			viewModel.pages.bind("change", that._onNavChanged, that);
			viewModel.bind("change:currentPage", that._onNavChanged, that);
			that._onNavChanged();
		}
	}

	formatPageSummaryBrief (summary: PropertyEditor.Summary[]): string {
		let that = this,
			ret = "",
			options = that.options,
			strVal;

		if (options.formatPageSummaryBrief) {
			ret = options.formatPageSummaryBrief.call(this, summary);
		} else {
			summary.forEach((sv: PropertyEditor.Summary) => {
				ret && (ret += ",&nbsp;");
				strVal = sv.value;
				(strVal.length > options.summaryBriefValueMaxLen) &&
				(strVal = strVal.slice(0, options.summaryBriefValueMaxLen) + "...");
				ret += ("<span class='text-muted'>" + sv.title +":&nbsp;</span><span>" + strVal + "</span>");
			});
		}

		return ret;
	}

	formatPageSummary (summary: PropertyEditor.Summary[]): string {
		let that = this,
			ret = "";

		if (that.options.formatPageSummary) {
			ret = that.options.formatPageSummary.call(this, summary);
		} else {
			if (summary.length) {
				summary.forEach((sv: PropertyEditor.Summary) => {
					ret += "<div>";
					ret += ("<span class='text-muted'>" + sv.title + ": </span>");
					ret += sv.value;
					ret += "</div>";
				});
			} else {
				ret += "<div class='row'><div class='col-md-12'>" + resources["objectWizard.pageSummary.noData"] + "</div></div>";
			}
		}

		return ret;
	}

	private _initSummaryPopups (): void {
		let that = this;
		if (that.options.showPageSummaryPopup) {
			that.$domElement.find(".x-wizard-top-nav .list-group-item").not(".active").popover({
				placement: "auto",
				trigger: "hover",
				html: true,
				title: function() {
					let pageName = $(this).attr("data-page"),
						page;
					if (!pageName) { return undefined; }
					page = that.viewModel.getPageByName(pageName);
					return page.title;
				},
				content: function() {
					let pageName = $(this).attr("data-page"),
						page;
					if (!pageName) { return ""; }
					page = that.viewModel.getPageByName(pageName);
					return that.formatPageSummary(that.viewModel.getPageSummary(page));
				}
			});
		}
	}

	private _onNavChanged (): void {
		let that = this,
			allPages = that.viewModel.pages.all(),
			currentPageIdx = allPages.indexOf(that.viewModel.currentPage());
		that.topNavPages.reset(allPages.slice(0, currentPageIdx));
		that.bottomNavPages.reset(allPages.slice(currentPageIdx + 1, allPages.length));
	}

	activatePage (page: EditorPage): core.lang.Promisable<void> {
		let that = this,
			index,
			pages = that.viewModel.pages,
			// there is no page in non linear wizard on first visit - create this
			pageSel = that.ensurePageContainer(page);

		page.render(pageSel);

		if (that.options.animatePageActivation) {
			pageSel.slideDown("fast");
		} else {
			pageSel.show();
		}

		return pageSel.promise().done(() => {
			index = pages.indexOf(page);
			if (index === -1) {
				throw new Error("ObjectWizardStackedPresenter.activatePage: unknown page " + page.name || page.title);
			}

			that._initSummaryPopups();

			//that.renderSections(index);
			// restore hided errors container
			that.container.find(".x-editor-parts-container").show();

			that.notifyDOMChanged();
		});
	}

	deactivatePage (page: EditorPage): core.lang.Promisable<void> {
		let that = this,
			pageContainer = that._getPageByName(page.name);

		// temporary hide errors container during animation
		that.container.find(".x-editor-parts-container").hide();
		if (that.options.animatePageActivation) {
			pageContainer.slideUp("fast");
		} else {
			pageContainer.hide();
		}
		return pageContainer.promise();
	}

	dispose(options?: core.ui.Part.CloseOptions): void {
		let that = this;

		that.viewModel.pages.unbind("change", null, that);
		that.viewModel.unbind("change:currentPage", null, that);
		that.topNavPages.dispose();
		that.bottomNavPages.dispose();

		super.dispose(options);
	}
}

ObjectWizardStackedPresenter.mixin({
	defaultOptions: ObjectWizardStackedPresenter.defaultOptions,
});

namespace ObjectWizardStackedPresenter {
	export interface Options extends ObjectWizardPresenterBase.Options {
		formatPageSummary?: () => string;
		formatPageSummaryBrief?: () => string;
		summaryBriefValueMaxLen?: number;
		showPageSummaryPopup?: boolean;
	}
}

ObjectWizard.defaultOptions.Presenter = ObjectWizardStackedPresenter;
core.ui.ObjectWizardStackedPresenter = ObjectWizardStackedPresenter;

export = ObjectWizardStackedPresenter;
