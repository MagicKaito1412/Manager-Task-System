import lang = require("lib/core.lang");
import DataStoreBase = require("./DataStoreBase");
import DataStoreIndexedDB = require("./DataStoreIndexedDB");
import DataStoreLocalStorage = require("./DataStoreLocalStorage");
import domain = require("lib/domain/.domain");

import ModelMeta = domain.metadata.ModelMeta;

if (!DataStoreIndexedDB.prototype.isSupported && !DataStoreLocalStorage.prototype.isSupported) {
	throw new Error("Your browser doesn't support any implementation of DataStore");
}

export function create(name: string, version: number, domainModelMeta: ModelMeta, options?: DataStoreBase.Options): lang.Promise<DataStoreBase> {
	let store: DataStoreBase;
	if (!DataStoreIndexedDB.prototype.isSupported) {
		store = new DataStoreLocalStorage(name, version, domainModelMeta, options);
		return lang.resolved(store);
	}
	store = new DataStoreIndexedDB(name, version, domainModelMeta, options);
	return store.test().then(
		() => store,
		(e: Error) => {
			// NOTE: Firefox with disabled history fails on opening connection to IndexedDB,
			// all other errors will be handled inside another call DataStoreIndexedDB.test from within DataFacade
			// NOTE: this hardcoded message doesn't depend on locale (tested)
			if (e && e.message && e.message.indexOf("A mutation operation was attempted on a database that did not allow mutations") >= 0) {
				// IndexedDB isn't supported, falling back to localStore impl
				let store = new DataStoreLocalStorage(name, version, domainModelMeta, options);
				return lang.resolved(store);
			}
			return lang.resolved(store);
		});
}
