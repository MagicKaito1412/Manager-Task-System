import core = require("core");
import lang = core.lang;
import interop = require("lib/interop/.interop");
import Tree = require("lib/ui/tree/Tree");

import Application = core.Application;
import TreeLoadResponse = interop.TreeLoadResponse;
import Identity = Tree.Identity;
import Options = TreeDataSource.Options;

class TreeDataSource extends lang.CoreClass {
	app: Application;
	params: any;
	name: string;

	/**
	 * @constructs TreeDataSource
	 * @param {Application} app
	 * @param {Object} options
	 */
	constructor(app: Application, options: Options) {
		super();

		this.app = app;
		options = options || <any>{};
		this.name = options.name;
		this.params = options.params;
	}

	loadChildren(nodePath: Identity[], params?: any, options?: any): lang.Promise<TreeLoadResponse> {
		let that = this;
		if (!that.name) {
			throw new Error("TreeDataSource: name was not specified");
		}
		let url = "api/_tree/" + that.name;
		// skip ROOT node
		let urlPath = nodePath.slice(1)
			.map((identity: Identity) => {
				let s = identity.type;
				return identity.id ? s + "(" + identity.id + ")" : s;
			}).join("/");

		if (urlPath.length) {
			url += "?node=" + urlPath;
		}

		// params
		let data = that.preprocessParams(lang.extend({}, that.params, params));

		if (options && options.opId) {
			data.$opId = options.opId;
		}
		
		return that.app.dataFacade.ajax({
			url: url,
			data: data
		}, {
			supportsGetPost: true
		});
	}

	preprocessParams(json: any): any {
		return json;
	}

	/**
	 * Initialize cancellation of load via DataFacade.cancel.
	 * @param {String} opId Identified (guid) of operation to cancel
	 * @returns {Promise}
	 */
	cancel(opId: string): lang.Promise<void> {
		return this.app.dataFacade.cancel(opId);
	}
}

namespace TreeDataSource {
	export interface Options {
		name: string;
		params?: any;
	}
}

core.data = core.data || <any>{};
core.data.TreeDataSource = TreeDataSource;

export = TreeDataSource;
