import lang = require("lib/core.lang");

let timezoneRegex = /(Z|[+-]\d{2}:\d{2})$/;

function getTimezoneOffsetMilliseconds(date: Date): number {
	return date.getTimezoneOffset() * 60000;
}

function parseAbstract(s: string): Date {
	// отбрасываем зону, добавляем Z
	let inputUtc = s.replace(timezoneRegex, "").concat("Z");
	let ms = Date.parse(inputUtc);
	if (ms) {
		ms = ms + getTimezoneOffsetMilliseconds(new Date(ms));
	}
	return new Date(ms || Date.parse(s));
}

function parseGlobal(s: string): Date {
	let inputUtc = timezoneRegex.test(s) ? s : s + "Z";
	let ms = Date.parse(inputUtc) || Date.parse(s);
	return new Date(ms);
}


/**
 * "Thu Jan 24 2013 12:30:14 GMT+0400 (MSK)" станет "2013-01-24T12:30:14.596"
 * @param {Date} date
 * @return {String} дата с асболютными значениями даты/времени как в переданной дате date,
 *                  но в фомате ISO и без "Z" на конце
 */
function toISOAbstract(date: Date): string {
	// вычитаем смещение
	let s = new Date(date.getTime() - getTimezoneOffsetMilliseconds(date)).toISOString();
	// убираем Z в конце
	return s.replace(timezoneRegex, "");
}

/**
 * Парсит строку в формате ISO 8601 в Date
 * @param {string} s Входная строка в формате ISO 8601
 * @param {boolean} isGlobalTime Признак "глобального" времени:
 *  - если true, то время рассматривается как глобальное (учитывается временная зона);
 *  - если false, то время рассматривается как абстрактное (временная зона отбрасывается);
 *  - если второй аргумент не задан, то признак глобальность определяется исходя из строки (указана временная
 *  зона - время глобальное, нет - время абстрактное).
 * @return {Date}
 */
export function parseISOString(s: string, isGlobalTime?: boolean): Date {
	if (!lang.isString(s)) {
		throw new TypeError("parseISOString: argument must be a string");
	}
	if (arguments.length <= 1) {
		isGlobalTime = timezoneRegex.test(s);
	}
	return isGlobalTime ? parseGlobal(s) : parseAbstract(s);
}

/**
 * Преобразует значение типа Date в строку формата ISO 8601
 * @param {Date} date Входная дата
 * @param {boolean} isGlobalTime Признак "глобального" времени:
 *  - если true, то выходная строка содержит время в UTC и заканчивается на Z
 *  - если false или не задан, то текущая временная зона отбрасывается и выходная строка не содержит данных
 *  о временной зоне).
 * @return {string}
 */
export function toISOString(date: Date, isGlobalTime?: boolean): string {
	if (!lang.isDate(date)) {
		throw new TypeError("toISOString: argument must be a Date");
	}
	return isGlobalTime ? date.toISOString() : toISOAbstract(date);
}
