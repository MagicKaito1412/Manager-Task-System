import NotLoadedNavigationProp = require("./NotLoadedNavigationProp");

import domain = require(".domain");
import DomainObject = domain.DomainObject;
import PropertyMeta = domain.metadata.PropertyMeta;
import INavigationPropSet = domain.INavigationPropSet;
import {Promise} from "lib/core.lang";
import {LoadOptions} from "lib/interop/.interop";

class NotLoadedNavigationPropSet extends NotLoadedNavigationProp implements INavigationPropSet {
	/**
	 * Результат обращения к незагруженному массивногму навигируемому свойству.
	 * @constructs NotLoadedNavigationPropSet
	 * @extends NotLoadedNavigationProp
	 * @param {DomainObject} parent
	 * @param propMeta
	 */
	constructor(parent: DomainObject, propMeta: PropertyMeta) {
		super(parent, propMeta);
	}

	_error(): any {
		return new Error("Property " + this._propMeta.name + " is not loaded");
	}

	load(options?: LoadOptions): Promise<INavigationPropSet> {
		return <Promise<INavigationPropSet>>super.load(options);
	}

	all(): DomainObject[] {
		throw this._error();
	}

	get(index: number|string): DomainObject {
		throw this._error();
	}

	count(): number {
		throw this._error();
	}

	indexOf(item: DomainObject): number {
		throw this._error();
	}

	add(item: DomainObject[]|DomainObject): void {
		throw this._error();
	}

	remove(item: DomainObject[]|DomainObject): void {
		throw this._error();
	}

	clear(): void {
		throw this._error();
	}

	reset(items: DomainObject[]|DomainObject): void {
		throw this._error();
	}

	move(indexFrom: number, indexTo: number): void {
		throw this._error();
	}

	forEach(iterator: (item: DomainObject, index: number, array: DomainObject[]) => void, context?: any): void {
		throw this._error();
	}

	find(predicate: (item: DomainObject, index: number) => boolean, context?: any): DomainObject {
		throw this._error();
	}
}

export = NotLoadedNavigationPropSet;
