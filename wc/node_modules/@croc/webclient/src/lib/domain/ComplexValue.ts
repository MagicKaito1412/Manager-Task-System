import lang = require("lib/core.lang");
import DomainObject = require("lib/domain/DomainObject");

import { GetPropOptions, metadata, SetPropOptions } from "lib/domain/.domain";
import ComplexPropertyMeta = metadata.ComplexPropertyMeta;
import ComplexTypeMeta = metadata.ComplexTypeMeta;

/**
 * The value of the complex property
 */
class ComplexValue  {
	readonly parent: DomainObject;
	readonly propMeta: ComplexPropertyMeta;

	constructor(parent: DomainObject, propMeta: ComplexPropertyMeta) {
		this.parent = parent;
		this.propMeta = propMeta;
	}

	get(propName: string, options?: GetPropOptions): any {
		let fullPropName = this.getParentPropName(propName);
		return this.parent.get(fullPropName, options);
	}

	set(propName: string, propValue: any, options?: SetPropOptions): void {
		let fullPropName = this.getParentPropName(propName);
		this.parent.set(fullPropName, propValue);
	}

	protected getParentPropName(propName: string): string {
		return this.propMeta.name + "." + propName;
	}
}

export = ComplexValue;