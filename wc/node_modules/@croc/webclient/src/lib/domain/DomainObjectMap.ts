import lang = require("lib/core.lang");
import PairedKeyMap = require("lib/utils/PairedKeyMap");
import support = require("./support");
import domain = require(".domain");

import IDomainObject = domain.IDomainObject;
import IDomainModel = domain.IDomainModel;
import EntityNameTerm = domain.EntityNameTerm;
import EntityMeta = domain.metadata.EntityMeta;

class DomainObjectMap<T> {
	private _model: IDomainModel;
	private _map: PairedKeyMap<T>;

	/**
	 * Словарь, отображающий доменные объекты на значения произвольного типа
	 * @constructs DomainObjectMap
	 */
	constructor(model: IDomainModel) {
		this._model = model;
		this._map = new PairedKeyMap<T>();
	}

	add(obj: IDomainObject, value: T): void {
		let key = this._getKey(obj);
		this._map.set(key, obj.id, value);
	}

	remove(obj: IDomainObject): boolean {
		let key = this._getKey(obj);
		return this._map.remove(key, obj.id);
	}

	find(entityType: EntityNameTerm, id: string): T {
		let key = this._getTypeKey(entityType);
		return this._map.find(key, id);
	}

	findObj(obj: IDomainObject): T {
		let key = this._getKey(obj);
		return this._map.find(key, obj.id);
	}

	get(entityType: EntityNameTerm, id: string, defaultValue?: T): T {
		let key = this._getTypeKey(entityType);
		return this._map.get(key, id, defaultValue);
	}

	select(entityType: EntityNameTerm): T[] {
		let key = this._getTypeKey(entityType);
		return this._map.select(key);
	}

	forEach(callback: (v: T, type: string, id: string) => void, context?): void {
		this._map.forEach(callback, context);
	}

	some(callback: (v: T, type: string, id: string) => boolean, context?): boolean {
		return this._map.some(callback, context);
	}

	all(): T[] {
		return this._map.all();
	}

	private _getKey(obj: IDomainObject): string {
		return this._getRoot(obj.meta).name;
	}

	private _getTypeKey(entityType: EntityNameTerm): string {
		let entityMeta = this._model.meta.entities[support.typeNameOf(entityType)];
		return this._getRoot(entityMeta).name;
	}

	private _getRoot(entityMeta: EntityMeta): EntityMeta {
		let parentMeta;
		while (parentMeta = entityMeta.base) {
			entityMeta = parentMeta;
		}
		return entityMeta;
	}
}

export = DomainObjectMap;
