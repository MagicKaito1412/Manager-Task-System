import lang = require("lib/core.lang");
import DataSource = require("lib/data/DataSource");

import domain = require(".domain");
import interop = require("lib/interop/.interop");
import DomainObject = domain.DomainObject;
import UnitOfWork = domain.UnitOfWork;
import LoadOptions = domain.LoadOptions;
import INavigationPropSet = domain.INavigationPropSet;

/**
 * Loadable collection of DomainObjects. Can be used in peObjectList as a value of calculated property.
 */
class DomainCollection extends lang.ObservableCollection<DomainObject> implements INavigationPropSet {
	uow: UnitOfWork;
	options: DomainCollection.Options;
	entityType: string;

	@lang.decorators.constant(false)
	isGhost: boolean;

	constructor(uow: UnitOfWork, options: DomainCollection.Options) {
		super();

		this.uow = uow;
		this.options = options;
		this.entityType = options.entityType;
	}

	isLoaded: boolean = false;

	load(options?: LoadOptions): lang.Promise<this> {
		let that = this;
		options = lang.extend(options || {}, that.options);
		return that.uow.loadAll(that.entityType, options).then((objects) => {
			that.add(objects);
			that.isLoaded = true;
			return that;
		});
	}
}

namespace DomainCollection {
	export interface Options {
		entityType: string;
		params?: interop.LoadQueryParams;
	}
}

export = DomainCollection;
