define(["require", "exports", "./NotLoadedNavigationProp"], function (require, exports, NotLoadedNavigationProp) {
    "use strict";
    var NotLoadedNavigationPropSet = (function (_super) {
        __extends(NotLoadedNavigationPropSet, _super);
        /**
         * Результат обращения к незагруженному массивногму навигируемому свойству.
         * @constructs NotLoadedNavigationPropSet
         * @extends NotLoadedNavigationProp
         * @param {DomainObject} parent
         * @param propMeta
         */
        function NotLoadedNavigationPropSet(parent, propMeta) {
            return _super.call(this, parent, propMeta) || this;
        }
        NotLoadedNavigationPropSet.prototype._error = function () {
            return new Error("Property " + this._propMeta.name + " is not loaded");
        };
        NotLoadedNavigationPropSet.prototype.load = function (options) {
            return _super.prototype.load.call(this, options);
        };
        NotLoadedNavigationPropSet.prototype.all = function () {
            throw this._error();
        };
        NotLoadedNavigationPropSet.prototype.get = function (index) {
            throw this._error();
        };
        NotLoadedNavigationPropSet.prototype.count = function () {
            throw this._error();
        };
        NotLoadedNavigationPropSet.prototype.indexOf = function (item) {
            throw this._error();
        };
        NotLoadedNavigationPropSet.prototype.add = function (item) {
            throw this._error();
        };
        NotLoadedNavigationPropSet.prototype.remove = function (item) {
            throw this._error();
        };
        NotLoadedNavigationPropSet.prototype.clear = function () {
            throw this._error();
        };
        NotLoadedNavigationPropSet.prototype.reset = function (items) {
            throw this._error();
        };
        NotLoadedNavigationPropSet.prototype.move = function (indexFrom, indexTo) {
            throw this._error();
        };
        NotLoadedNavigationPropSet.prototype.forEach = function (iterator, context) {
            throw this._error();
        };
        NotLoadedNavigationPropSet.prototype.find = function (predicate, context) {
            throw this._error();
        };
        return NotLoadedNavigationPropSet;
    }(NotLoadedNavigationProp));
    return NotLoadedNavigationPropSet;
});
//# sourceMappingURL=NotLoadedNavigationPropSet.js.map