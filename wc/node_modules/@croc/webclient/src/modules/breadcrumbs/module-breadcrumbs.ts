import $ = require("jquery");
import core = require("core");
import { IPart, IStatefulPart } from "lib/ui/.ui";
import { Area } from "lib/core.composition";
import { AppStateChangeEvent, AreaStateActivateOptions } from "lib/.core";
import { SafeHtml } from "lib/formatters";

/**
* @typedef {Object} BreadcrumbsOptions
* @property {String} containerSelector
* @property {Boolean} disableLinks
* @property {Boolean} excludeArea
* @property {Boolean} excludeAreaState
* @property {Boolean} excludeLastPart
* @property {Boolean} excludeRegionState
* */
/** */
export interface BreadcrumbsOptions {
	containerSelector?: string;
	disableLinks?: boolean;
	excludeArea?: boolean;
	excludeAreaState?: boolean;
	excludeLastPart?: boolean;
	excludeRegionState?: boolean;
}


interface BreadcrumbItem {
	title?: string | SafeHtml;
	areaState?: string | AreaStateActivateOptions;
	url?: string;
}

function appendState(items: Array<BreadcrumbItem>, item: BreadcrumbItem): boolean {
	if (items.length > 0) {
		let prev = items[items.length - 1];
		if (prev.title === item.title) {
			return false;
		}
	}
	if (item && item.title) {
		items.push(item);
		return true;
	}
	return  false;
}


core.createModule("breadcrumbs",
	/**
	 * @param {Application} app
	 * @param {BreadcrumbsOptions} options
	 * @returns {Object}
	 */
	function (app: core.Application, options?: BreadcrumbsOptions) {
		options = options || {};

		function onAppStateChange(ev: AppStateChangeEvent): void {
			let $breadcrumb = $(options.containerSelector || ".x-breadcrumb"),
				appState = ev.args.state,
				area: Area,
				items: Array<BreadcrumbItem> = [],
				regionStateAdded = false,
				navRegion,
				parts;

			if ($breadcrumb.length === 0) {
				return;
			}
			$breadcrumb.off();
			$breadcrumb.empty();

			if (!appState || core.lang.isEmptyObject(appState)) {
				return;
			}
			area = app.areaManager.getArea(appState.area);
			if (!area) {
				return;
			}

			let extOpts = area.extensions && area.extensions["breadcrumbs"];
			if (extOpts && extOpts.hidden) {
				return;
			}

			// Step 1: collect all items to display

			if (!options.excludeArea && !(extOpts && extOpts.excludeArea)) {
				items.push({
					title: area.title || area.name,
					url: app.stateManager.getAreaUrl(area.name)
				});
			}
			if (!options.excludeAreaState && !(extOpts && extOpts.excludeAreaState) && appState.areaState) {
				if (!appState.areaState.title) {
					// if there's no AreaState's title in AppState then pick it up from AreaState object
					let areaState = area.getState(appState.areaState.name);
					if (areaState) {
						appState.areaState.title = areaState.title;
					}
				}
				appendState(items, {
					title: appState.areaState.title || appState.areaState.name,
					areaState: appState.areaState.name,
					url: app.stateManager.getStateUrl({
						area: area.name,
						areaState: {name: appState.areaState.name, isDefault: appState.areaState.isDefault }
					})
				});
			}
			navRegion = area.regionManager.getNavigableRegion();
			if (navRegion && navRegion.getPartsHistory) {
				parts = navRegion.getPartsHistory(/*includeSource*/true);
				if (parts && parts.length) {
					parts.forEach(function (part: IPart, i: number): void {
						if ((options.excludeLastPart || (extOpts && extOpts.excludeLastPart))
							&& (i === parts.length - 1)) {
							// NOTE: append a fake item without any title - so previous part will not be active
							items.push({});
							return;
						}

						let partTitle: string;
						if (part.extensions && part.extensions["breadcrumbs"]) {
							partTitle = part.extensions["breadcrumbs"];
						}
						if (!partTitle) {
							partTitle = core.lang.get(part, "title");
						}
						if (partTitle) {
							regionStateAdded = appendState(items, {
								title: partTitle,
								areaState: {
									name: appState.areaState.name,
									regionState: {
										part: part
									}
								},
								url: app.stateManager.getStateUrl({
									area: area.name,
									areaState: {
										name: appState.areaState.name,
										isDefault: appState.areaState.isDefault
									},
									regionState: {
										part: part.name,
										partOptions: (<IStatefulPart>part).getState ? (<IStatefulPart>part).getState() : {}
									}
								})
							});
						}
					});
				}
			}
			if (!regionStateAdded && !options.excludeRegionState && !(extOpts && extOpts.excludeRegionState)) {
				if (options.excludeLastPart || (extOpts && extOpts.excludeLastPart)) {
					items.push({});
				} else if (appState.regionState) {
					appendState(items, {
						title: appState.regionState.title
					});
				}
			}

			// Step 2: create DOM elements for collected items
			items.forEach(function (item: BreadcrumbItem, i: number): void {
				if (!item.title) {
					return;
				}

				let $li = $("<li></li>"),
					isLast = i === items.length - 1;

				if (options.disableLinks || (extOpts && extOpts.disableLinks) || isLast) {
					$li.text(item.title.toString());
				} else {
					let url = item.url || "#";
					$("<a href='" + url + "'></a>").text(item.title.toString()).appendTo($li).click(function (e: JQueryEventObject): void {
						if (core.html.isExternalClick(e)) {
							return;
						}
						e.preventDefault();
						e.stopPropagation();
						app.areaManager.activateState(area.name, item.areaState);
					});
				}

				if (isLast) {
					$li.addClass("active");
				}
				$li.appendTo($breadcrumb);
			});
		}

		return {
			handlers: {
				"app.statechange": function (ev: AppStateChangeEvent): void {
					onAppStateChange(ev);
				}
			}
		};
	}
);
