import $ = require("jquery");
import core = require("core");
import template = require("xhtmpl!modules/admin/ui/templates/logs.hbs");
import moment = require("moment");
import View = require("lib/ui/handlebars/View");
import PanelResizer = require("./PanelResizer");
import { AppEvent } from "lib/.core";

import lang = core.lang;
core.ui.PanelResizer = PanelResizer;

class LogPart extends View {
	items: lang.ObservableCollection<LogPart.LogItem>;
	/**
	 * @observable-property {Boolean}
	 */
	@lang.decorators.observableAccessor()
	autoScroll: lang.ObservableProperty<boolean>;
	_doScroll: () => {};

	constructor(app: core.IApplication, logItems) {
		super({
			template: template
		});
		this.items = new lang.ObservableCollection<LogPart.LogItem>();
		this.autoScroll(true);
		app.eventPublisher.subscribe("admin.log", (evn) => { this.addItems(evn.args.items);});

		this._doScroll = lang.debounce(this.doScroll.bind(this), 100);

		if (logItems) {
			this.addItems(logItems);
		}
	}

	createRowModel(item: LogPart.LogItem, now: Date): LogPart.LogItem {
		// init formatted timestamp
		let ts = item.timestamp;
		if (ts) {
			ts = new Date(ts);
			item.timestamp = ts;
			let ts2 = moment(ts);
			let formatted;
			if (ts2.isBefore(now)) {
				formatted = ts2.format("HH:mm:ss DD/MM");
			} else {
				formatted = ts2.format("HH:mm:ss");
			}
			item.timestampFormatted = formatted;
		}
		// init message
		let message = item.eventName;
		if (item.eventData) {
			message += " : " + item.eventData;
		}
		item.message = message;

		return item;
	}

	protected doRender(domElement: JQuery|HTMLElement): lang.Promisable<void> {
		let that = this;
		super.doRender(domElement);

		that.jqOn(that.$domElement, "click", function (e) {
			let $selected = $(e.target).parents("[data-id]");
			if ($selected.length) {
				that.$domElement.find(".message-row.selected").removeClass("selected");
				$selected.addClass("selected");
				let id = parseInt($selected.attr("data-id"));
				let item = that.items.find((item) => {
					return item.id === id;
				});
				if (item) {
					that.onItemSelected(item);
				}
			}
			//console.log($row.text());
		});
		that.jqOn(this.$domElement.find(".tabs li a"), "click", function() {
			let $this = $(this);
			let isActive = $this.hasClass("active");
			if (isActive) { return false; }
			that.$domElement.find(".tabs li a.active").removeClass("active");
			$this.addClass("active");

			let tabName = $this.data("tab-name");
			that.$domElement.find(".message-info > .content.active").removeClass("active");
			that.$domElement.find(`.message-info > .content[data-tab-content='${tabName}']`).addClass("active");
			return false;
		});
	}

	onItemSelected (item) {
		let html = "<dl>";
		html += `<dd>${lang.encodeHtml(item.message)}</dd>`;
		html += `<dt>Timestamp:</dt><dd>${item.timestamp}</dd>`;
		if (item.eventName) {
			html += `<dt>EventName:</dt><dd>${item.eventName}</dd>`;
		}
		let stack = "";
		let keys = lang.sort(Object.keys(item.details), lang.compare);
		keys.forEach((name) => {
			let value = item.details[name];
			let nameLo = name.toLowerCase();
			if (lang.isPlainObject(value)) {
				value = JSON.stringify(
					value,
					(key, val) => {
						if (val && key.toLowerCase() === "stacktrace") {
							val = val.replace(/\\/gi, "\\");
						}
						return val;
						//return val && typeof val === "string" ? val.replace(/\r\n/gi, "<br>") : val;
					},
					"  ");
			} else if (nameLo === "stacktrace") {
				stack = value;
				value = "";
			}
			if (value) {
				html += "<dt>" + lang.encodeHtml(name) + ":</dt>";
				// NOTE: строки с переносами после JSON.stringify становятся с \r\n (не экспейп, а именно "\" + "r"..)
				html += "<dd>" + lang.encodeHtml(value).replace(/\r\n/gi, "<br>").replace(/\\r\\n/gi, "<br>") + "</dd>";
			}
		});
		html += "</dl>";
		// info
		$(".message-info .content[data-tab-content='info'] pre").html(html);

		// stack
		if (stack) {
			html = `<dl><dt>StackTrace:</dt><dd>${lang.encodeHtml(stack)}</dd></dl>`;
		} else {
			html = "";
		}
		$(".message-info .content[data-tab-content='stack'] pre").html(html);

		// env
		html = "<dl>";
		lang.forEach(item.env, function (value, name) {
			html += "<dt>" + lang.encodeHtml(name) + ":</dt>";
			html += "<dd>" + lang.encodeHtml(value) + "</dd>";
		});
		html += "</dl>";
		$(".message-info .content[data-tab-content='env'] pre").html(html);
	}

	addItems(items) {
		if (!items || !items.length) { return; }
		let now = new Date();
		now = new Date(now.getFullYear(), now.getMonth(), now.getDate());

		let id = this.items.count();

		for (let i = 0; i < items.length; i++) {
			let item = this.createRowModel(items[i], now);
			item.id = id++;
			this.items.add(item);
		}
		if (this.autoScroll()) {
			this._doScroll();
		}
	}
	doScroll(): void {
		let $panel = $("#top-panel");
		$panel.animate( { scrollTop: $panel[0].scrollHeight }, 100, null);
	}
}

namespace LogPart {
	export interface LogItem {
		id?: number;
		category?: string;
		eventName?: string;
		eventData?: string;
		message?: string;
		timestamp?: any;
		timestampFormatted?: string;
		details?: any;
	}
}

export = LogPart;
