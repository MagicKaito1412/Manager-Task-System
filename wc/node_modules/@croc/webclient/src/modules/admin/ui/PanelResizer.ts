import core = require("core");

class PanelResizer extends core.ui.Part {
	divider: JQuery;
	topPanel: JQuery;
	bottomPanel: JQuery;

	doRender(domElement) {
		let that = this;

		super.doRender.call(that, domElement);

		// inspired by http://plugins.jquery.com/misc/textarea.js
		this.divider = $("<div class='divider'></div></div>")
			.appendTo(that.$domElement);
		this.topPanel = $("#top-panel");
		this.bottomPanel = $("#bottom-panel");

		let $win = $(window),
			resizing = false;

		let performDrag = function (e) {
			if (!resizing) {
				return;
			}
			that.divideView(e.clientY, $win);
		};

		let endDrag = function () {
			$("#overlay").remove();
			resizing = false;

			core.settings.setItem("admin.logs.divider", that.divider.css("bottom"));

			$(document)
				.unbind('mousemove', performDrag)
				.unbind('mouseup', endDrag);
		};

		that.divider.on("mousedown", function () {
			$("<div id='overlay'></div>").appendTo($("body"));
			resizing = true;
			$(document)
				.mousemove(core.lang.debounce(performDrag, 1))
				.mouseup(endDrag);
		}).append("<div class='line-1'></div><div class='line-2'></div><div class='line-3'></div>");

		let fromTop: any = core.settings.getItem("admin.logs.divider");
		if (fromTop) {
			fromTop = $win.height() - parseInt(fromTop);
			that.divideView(fromTop, $win);
		}
	}

	divideView(fromTop, win) {
		let $win = win || $(window);
		let height = $win.height();
		let fromBottom = $win.height() - fromTop;

		if (fromTop < 100 || fromTop + 100 > height) {
			return;
		}

		this.topPanel.css("bottom", fromBottom + 5);
		this.bottomPanel.css("height", fromBottom - 5);
		this.divider.css("bottom", fromBottom - 5);
	}

	unload() {
		$(".divider").off("mousedown");
	}
}

export = PanelResizer;