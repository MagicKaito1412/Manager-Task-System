import $ = require("jquery");
import core = require("core");
import Carousel = require("lib/ui/Carousel");
import tmplNotificationBar = require("xhtmpl!./templates/NotificationBar.hbs");
import html = require("lib/core.html");
import lang = core.lang;

class NotificationBar extends Carousel<core.SystemEvent> {
	static defaultOptions: NotificationBar.Options = {
		template: tmplNotificationBar,
		unbound: false
	};
	options: NotificationBar.Options;

	/**
	 * Obtrusive notification.
	 * @class NotificationBar
	 * @extends View
	 */
	constructor (options?: NotificationBar.Options) {
		options = NotificationBar.mixOptions(options, NotificationBar.defaultOptions);
		super(options);

		this.items().bind("change", this._onEventsChanged.bind(this));
		/*
		 * TODO: поддержка priority=max - отображение модальной полоски в стиле win8
		 * (http://www.jqueryscript.net/demo/Creating-Windows-8-Style-Toast-Notifications-with-jQuery-CSS3-Win8-Notify/)
		 */
	}

	add (sysEvent: core.SystemEvent): void {
		if (sysEvent.uid) {
			// event has unique id, find and replace existing event with the new one
			let item = this.items().find((item: core.SystemEvent) => {
				return item.uid === sysEvent.uid;
			});
			if (item) {
				this.items().remove(item);
			}
		}
		this.items().add(sysEvent);
	}

	_onEventsChanged (sender, ea: lang.ObservableCollectionChangeArgs<core.SystemEvent>): void {
		var that = this,
			items = that.items(),
			count = items.count();

		if (ea.added) {
			core.lang.forEach(ea.added, (item: core.SystemEvent) => {
				// Once any menu item executed remove the event
				item.menu.onceExecuted((args) => {
					if (!args || args.result !== false) {
						that.items().remove(item);
					} else {
						return false;
					}
				});
			});
		}

		if (that.position() >= count) {
			that.position(Math.max(count - 1, 0));
		}

		if (count === 0) {
			that.unload();
			html.notifyDOMChanged();
		} else if (!that.domElement) {
			that.render();
			html.notifyDOMChanged();
		}
	}

	render () {
		super.render(null);
	}

	protected doRender(domElement: JQuery | HTMLElement): lang.Promisable<void> {
		var that = this,
			$navbar = $(".x-app-navbar"),
			$element = $("<div class='x-notification-bar-container'></div>");

		if ($navbar.length === 0) {
			if (document.body.firstChild) {
				$element.insertBefore(<Element>document.body.firstChild);
			} else {
				$element.appendTo(document.body);
			}
		} else {
			$navbar.after($element);
		}

		super.doRender($element);
		core.Application.current.eventPublisher.publish("ui.affix.add_element", {
			element: $element,
			stuckBehaviors: [] // reset default behaviors
		});
		core.html.notifyDOMChanged($element);

		$element.on("click", ".x-cmd-link", function (e) {
			let event = that.current();
			if (event && event.menu) {
				if (core.commands.tryToExecuteHtmlCommand($(this), event.menu)) {
					e.preventDefault();
				}
			}
		});
	}

	unload (): void {
		var that = this,
			$element = that.$domElement;
		// that.domElement - это элемент, в который отрендерился шаблон (x-notification-bar),
		// но мы еще создавали контейнер, его тоже надо удалить
		core.Application.current.eventPublisher.publish("ui.affix.remove_element", {
			element: that.domElement
		});
		super.unload();
		$element.remove();
	}
}
namespace NotificationBar {
	export interface Options extends Carousel.Options {}
}
NotificationBar.mixin({
	defaultOptions: NotificationBar.defaultOptions
});

core.ui.NotificationBar = NotificationBar;

export = NotificationBar;

