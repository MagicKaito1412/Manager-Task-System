import $ = require("jquery");
import core = require("core");
import resourcesModule = require("i18n!modules/clipboard/nls/resources");
import "xcss!modules/clipboard/styles/copy-button.css";

export let isSupported = document.queryCommandSupported && document.queryCommandSupported("copy");

if (isSupported) {
	// Additionally check version of the browser. See:
	//  https://hacks.mozilla.org/2015/09/flash-free-clipboard-for-the-web/
	//  https://developers.google.com/web/updates/2015/04/cut-and-copy-commands
	// Supported in: Chrome - 43+, Firefox - 41+, IE - 8+, Opera - 29+, Safari - Nope

	let browser = core.platform.browser;
	if (browser.webkit && browser.webkit.version < 43 ||
		browser.firefox && browser.firefox.version < 41) {
		//browser.ie && browser.ie.version < 9 /* browser.ie && browser.opera.version<29 || browser.safari */) {
		isSupported = false;
	}
}

/**
 * Copies text data to clipboard
 * @param {string} data
 * @returns {boolean}
 */
export function copy(data: string): boolean {
	if (!data || !isSupported) { return false; }

	let $element = $("<textarea></textarea>");
	try {
		// Prevent zooming on iOS
		$element
			.css({
				// Prevent zooming on iOS
				fontSize: "12pt",
				position: "absolute",
				left: "-1000px",
				// Move element to the same position vertically
				top: (window.pageYOffset || document.documentElement.scrollTop) + "px"
			})
			.val(data)
			// Bootstrap Modal catches 'focusin' on the document and returns focus to the modal.
			// Prevent that behavior because it cancels selection.
			.focusin(() => { return false; })
			.appendTo(document.body)
			// We should call 'select' after adding the element to the document
			.select();

		// NOTE: select won't work on iOS it should be:
		// $element.focus();
		// $element[0].setSelectionRange(0, data.length);
		// but execCommand("copy") also won't work on iOS and Safari

		return document.execCommand("copy");
	} catch (ex) {
		// an error signals that copy to clipboard is not supported
		isSupported = false;
		return false;
	} finally {
		$element.remove();
	}
}

export class CopyButton {
	$element: JQuery;
	options: CopyButton.Options;

	private _click: (e: JQueryMouseEventObject) => void;
	private _tooltipTitle: string;

	constructor (target: HTMLElement, options: CopyButton.Options) {
		if (!isSupported) { return; }

		let that = this,
			$element = $(target);

		that.$element = $element;
		that.options = options;

		that._click = that.onClick.bind(that);
		$element.click(that._click);

		let tooltipOpts: TooltipOptions = that.options.tooltip;
		if (tooltipOpts) {
			that._tooltipTitle = resourcesModule["clipboard.copy"];
			tooltipOpts = core.lang.extend({
				title: () => that._tooltipTitle,
				placement: "top",
				trigger: "hover",
				delay: { show: 200, hide: 0 }
			}, tooltipOpts);
			$element.tooltip(tooltipOpts);
		}
	}

	protected onClick(): void {
		let that = this,
			text = that.options.text(),
			copied = copy(text);
		if (copied && that.options.tooltip) {
			that._tooltipTitle = resourcesModule["clipboard.copied"];
			that.$element.tooltip("show");
			that._tooltipTitle = resourcesModule["clipboard.copy"];
		}

		// TODO: error handling
	}

	dispose(): void {
		let that = this;
		that.$element.off("click", that._click);

		if (that.options.tooltip) {
			that.$element.tooltip("destroy");
		}
	}
}

export namespace CopyButton {
	export interface Options {
		text: () => string; //getter of text to copy
		tooltip?: TooltipOptions; // Bootstrap tooltip plugin's options
		[key: string]: any;
	}
}

core.ui.clipboard = {
	isSupported: isSupported,
	copy: copy,
	CopyButton: CopyButton
};

