import core = require("core");
import resources = require("i18n!./nls/resources");

const traceSource = new core.diagnostics.TraceSource("app.drafts");

class DraftManager extends core.lang.Observable {
	static Event_CreateDraft: string = "app.createDraft";

	app: core.Application;
	private _stack: DraftManager.Draft[];
	private _subscription: core.lang.IDisposable;

	/**
	 * @constructs DraftManager
	 * @extends Observable
	 * @param {Application} app
	 */
	constructor(app: core.Application) {
		super();
		this.app = app;
		try {
			this._stack = this._loadData() || [];
		} catch (e) {
			// не удалось восстановить, убъем
			traceSource.error("Error during restoring drafts from localStorage: " + e.message);
			traceSource.error(e);
			this._stack = [];
			this._saveData();
		}
		this.count(this._stack.length);

		this._subscription = app.eventPublisher.subscribe(DraftManager.Event_CreateDraft, (ev) => {
			if (!ev.args) {
				return;
			}

			let draft = core.lang.extend({}, ev.args);
			this.addDraft(draft);
		});
	}

	/**
	 * Count of active events.
	 * @observable-property {Number}
	 */
	@core.lang.decorators.observableAccessor()
	count: core.lang.ObservableProperty<number>;

	getDrafts (): DraftManager.Draft[] {
		return this._stack;
	}

	addDraft (draft: DraftManager.Draft): void {
		let that = this;
		if (!draft || !draft.title) {
			throw new Error("DraftManager.createDraft: expected draft object with action and title fields");
		}
		draft.created = new Date();
		that._stack.push(draft);
		that.count(that._stack.length);
		that._saveData();

		that.app.eventPublisher.publish("app.draftCreated", core.SystemEvent.create({
			kind: core.SystemEvent.Kind.notification,
			priority: "normal",
			message: resources["drafts.draft_created"]
		}));
	}

	removeDraft (draft: any): void {
		let that = this;
		core.lang.arrayRemove(that._stack, draft);
		that.count(that._stack.length);
		that._saveData();
		that._notify();
	}

	removeAllDrafts (): void {
		let that = this;
		that._stack = [];
		that.count(0);
		that._saveData();
		that._notify();
	}

	updateDraft (draft) {
		this._saveData();
		this._notify();
	}

	restoreDraft (draft: DraftManager.Draft): void {
		let defer = this.app.stateManager.switchState(draft.appState);
		core.lang.when(defer).done(() => {
			this.removeDraft(draft);
		});
	}

	protected _loadData (): DraftManager.Draft[] {
		return core.localStorage.getObject("drafts") || [];
	}

	protected _saveData (): void {
		core.localStorage.setObject("drafts", this._stack);
	}

	protected _notify(): void {
		this.trigger("draftsChange", this);
	}

	dispose(): void {
		let that = this;
		if (that._subscription) {
			that._subscription.dispose();
			that._subscription = undefined;
		}
	}
}
DraftManager.mixin({
	draftAppEvent: DraftManager.Event_CreateDraft
});
namespace DraftManager {
	export interface Draft {
		created: Date;
		title: string;
		appState: core.AppState;
		autoRecovery?: boolean;
		description?: string;
	}
}

/**
 * @namespace core.drafts
 */
core.drafts = core.drafts || { DraftManager: DraftManager};

core.drafts.DraftManager = DraftManager;

export = DraftManager;

