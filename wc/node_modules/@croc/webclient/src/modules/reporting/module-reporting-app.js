define(["require", "exports", "core", "./module-reporting"], function (require, exports, core, reporting) {
    "use strict";
    exports.__esModule = true;
    var Application = (function (_super) {
        __extends(Application, _super);
        /**
         * constructs Application
         * @extends Application
         * @article [App-Module](docs:app-module)
         * @param {XConfig} xconfig
         * @param {Object} reportModel
         */
        function Application(xconfig, reportModel) {
            var _this = this;
            // change options for breadcrumbs module
            xconfig = core.lang.appendEx(xconfig, { modules: { breadcrumbs: Application.breadcrumbsConfig } }, { deep: true });
            // TODO: use root instead?
            xconfig.startPath = document.location.pathname;
            //xconfig.root = document.location.pathname;
            _this = _super.call(this, xconfig) || this;
            _this.pageModel = reportModel;
            return _this;
        }
        Application.prototype.initialize = function () {
            var that = this, reportName = that.pageModel.reportName, states = {};
            that.registerPart("ReportPagePart", function (options) {
                return new reporting.ReportPagePart(that, options);
            });
            // NOTE: we're using report's name as Area's state name,
            // it's important as the state is already in the page url (/display/report/{reportName})
            var areaReport = that.areaManager.getArea("");
            var region = areaReport.regionManager.getNavigableRegion();
            var regionName = region ? region.name : "mainRegion";
            states[regionName] = "ReportPagePart:" + reportName;
            areaReport.addState({ name: reportName }, states);
        };
        Application.prototype.onUnknownArea = function () {
            return _super.prototype.onUnknownArea.call(this, "report");
        };
        Application.breadcrumbsConfig = {
            excludeArea: true,
            excludeAreaState: true,
            excludeLastPart: true,
            excludeRegionState: true
        };
        return Application;
    }(core.Application));
    exports.Application = Application;
    reporting.Application = Application;
});
/*
declare module "core.ui" {
    export import Application = require("modules/reporting/ui/Application");
}
*/
/*
var xconfig = {
    "software":{"stage":null,
        "clientLibVersion":"1.27.0",
        "serverLibVersion":"1.28.0-SNAPSHOT-e2b9ec3eead1cf3e7d2a7fcc27c4ff9c901addad",
        "appVersion":"1.28.0-SNAPSHOT-e2b9ec3eead1cf3e7d2a7fcc27c4ff9c901addad"
    },
    "appName":"Croc Survey Portal",
    "supportedLanguages":{
        "ru":{"title":"Русский"},
        "en":{"title":"English"}
    },
    "modules":{
        "files":{
            "uploadChunkSize":536870912,
            "apiRoute":"api/_file"
        },
        "reporting":{
            "formats":[
                {"name":"HTML","format":"HTML","mime":"text/html"},
                {"name":"PDF","format":"PDF","mime":"application/pdf"},
                {"name":"WORD","format":"WORD","mime":"application/msword"},
                {"name":"XPS","format":"XPS","mime":"application/vnd.ms-xpsdocument"},
                {"name":"EXCEL","format":"EXCEL","mime":"application/vnd.ms-excel"},
                {"name":"XSL-FO","format":"XSL-FO","mime":"text/xml"}
            ]
        },
        "transfer":{
            "apiRoute":"api/_transfer"
        }
    },
    "root":"/survey-dev/",
    "clientBase":"client",
    "isDebug":false,
    "security":{
        "autoLogin":false,
        "windowsAuth":{
            "loginUrl":"auth/login_windows",
            "title":null,
            "isDefault":false},
        "formsAuth":{
            "loginUrl":"api/_security/login_forms",
            "authenticationScheme":null,
            "title":null,
            "isDefault":true
        },
        "openAuth":{
            "loginUrl":"api/_security/login_oath",
            "providers":[{"name":"Facebook"}],
            "title":null,
            "isDefault":false
        },
        "logoutUrl":"api/_security/logout",
        "persistentCookie":true
    },
    "supportOffline":false
};

var xmodel = {
    "reportName":"Surveys",
    "reports":{
        "survey":{"name":"Survey","title":"Voting"},
        "surveys":{"name":"Surveys","title":"List of surveys"}
    }
};
*/
//export = reporting;
//# sourceMappingURL=module-reporting-app.js.map