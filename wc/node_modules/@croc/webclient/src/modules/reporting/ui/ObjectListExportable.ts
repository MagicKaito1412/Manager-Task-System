import $ = require("jquery");
import core = require("core");
import ObjectList = require("lib/ui/list/ObjectList");
import resources = require("i18n!lib/nls/resources");

import lang = core.lang;
import interop = require("lib/interop/.interop");
import list = require("lib/ui/list/.list");

import Promise = lang.Promise;
import LoadQuery = interop.LoadQuery;
import LoadQueryParams = interop.LoadQueryParams;
import LoadOptions = ObjectList.LoadOptions;
import DataLoadEventArgs = ObjectList.DataLoadEventArgs;

// Extend ObjectListColumn with `export` option.
declare module "lib/ui/list/.list" {
    interface ObjectListColumn  {
		/**
		 * Export-specific column options.
		 */
		export?: ObjectListColumn;
    }
}

import ObjectListColumn = list.ObjectListColumn;

interface ExportColumn {
	name?: string;
	prop?: string;
	title?: string;
	vt?: string;
	role?: string;
	width?: number;
	format?: string;
}

interface ExportLayout {
	pageFormat?: string;
	pageOrientation?: string;
	pageMargin?: string;
}

/**
 * Data to send to server
 */
interface ExportOutput {
	format?: string;
	fileName?: string;
	fileNamePrefix?: string;
	layout?: ExportLayout;
}

interface ExportDataOutput extends ExportOutput {
	columns: ExportColumn[];
	rows: any[];
}

interface ExportAllOutput extends ExportOutput, LoadOptions {
	columns?: ExportColumn[];
}

/**
 * Options of the command "Export"
 */
interface ExportOptions extends ExportOutput {
	/**
	 * Send client data to server even if server export is supported
	 */
	forceClientData?: boolean;
	/**
	 * @deprecated Use fileNamePrefix option
	 */
	prefix?: string;
	/**
	 * @deprecated Use layout option
	 */
	layoutOptions?: string;
}

interface ExportAllOptions extends ExportOptions, LoadOptions {
}

var stripElement = $("<div />");
function stripHtml(value) {
	return stripElement.html(value).text();
}

// original methods to override
var base: typeof ObjectListExportable.prototype = <any>{};
["createCommands", "onDataLoaded"].forEach(name => {
	base[name] = ObjectList.prototype[name];
});

// HACK: typed implementation of partial class ObjectList
class ObjectListExportable extends ObjectList {
	columns: ObjectListColumn[]; // override type

	private _exportable: boolean;

	protected createCommands() {
		var that = this,
			commands = base.createCommands.call(that); // NOTE: don't call super - endless recursion

		commands.Export = new core.commands.BoundCommand(that.doExport, that.canExport, that);
		return commands;
	}

	protected onDataLoaded(args: DataLoadEventArgs) {
		var that = this;
		that._exportable = args.hints && args.hints["exportable"];

		base.onDataLoaded.call(that, args); // NOTE: don't call super - endless recursion
	}

	protected doExport(args: ExportOptions) {
		var that = this;
		args = that.getCommandOptions(args, "Export");

		if (!args.forceClientData && that.canExportAll()) {
			return that.doExportAll(args);
		}
		if (that.canExportData()) {
			return that.doExportData(args);
		}
	}

	protected canExport() {
		var that = this;
		return that.canExportAll() || that.canExportData();
	}

	/**
	 *
	 * @param {Object} [args]
	 * @param {String} [args.format] Format name for XFW3 ReportService subsystem
	 * @param {String} [args.fileName] File name (w/o extension) to download
	 * @param {String} [args.prefix] File name prefix
	 * @param {Object} [args.layoutOptions] Options for report layout
	 * @param {String} [args.layoutOptions.pageFormat] Page format: "A4", "A5", "A3", "Letter")
	 * @param {String} [args.layoutOptions.pageOrientation] Page orientation: "0", "90", "landscape", "portrait"
	 * @param {String} [args.layoutOptions.pageMargin] Margin for page body: "20mm"
	 * @return {*}
	 */
	protected doExportData(args: ExportOptions) {
		args = args || {};
		var that = this,
			exportOptions = that._normalizeExportOptions<ExportDataOutput>(args),
			exportColumns: ExportColumn[],
			exportRows = [],
			dataColumns: ObjectListColumn[] = [],
			exportDeferreds: Promise<any>[] = [];

		exportColumns = that._normalizeExportColumns(function (col: ObjectListColumn) {
			// NOTE: merge the column with nested `export` object (if any) to override export-specific options
			let dataColumn: ObjectListColumn = !col.export ?
				col :
				lang.extendEx({}, col, col.export, { deep: true });
			if (dataColumn.role === "data") {
				dataColumns.push(dataColumn);
			}
			return true;
		});
		exportColumns.forEach(function (col: ExportColumn) {
			col.vt = "string"; // we send formatted values only
		});

		lang.forEach(that.items.all(), function (item) {
			var exportRow = {};
			lang.forEach(dataColumns, function(col) {
				let deferred = lang.loadExpression(that.getCellHtml, that, item, col);
				deferred.done(function (v) {
					exportRow[col.name] = stripHtml(v);
				});
				if (deferred.state() !== "resolved") {
					exportDeferreds.push(deferred);
				}
			});

			exportRows.push(exportRow);
		});

		return lang.when.apply(that, exportDeferreds)
			.fail(function (ex) {
				var message = resources["objectList.exportError"];
				if (ex && ex.message) {
					message = message + ": " + ex.message;
				}
				that.app.eventPublisher.publish("objectList.export.error", core.SystemEvent.create({
					severity: "error",
					message: message,
					error: ex
				}));
			})
			.then(() => {
				exportOptions.columns = exportColumns;
				exportOptions.rows = exportRows;

				return that.app.dataFacade.ajax({
					url: "api/_export/_plain",
					data: { $export: JSON.stringify(exportOptions) },
					type: "POST"
				}, {
					fileDownload: true,
					processEvent: { message: resources["interop.retrieving_data"] }
				});
			})
			.done((result) => {
				that.onAfterExport(result, args);
			});
	}

	protected canExportData(): boolean {
		return this.state() === this.states.loaded;
	}

	protected doExportAll(args: ExportAllOptions) {
		args = args || {};
		var that = this,
			params: LoadQueryParams = that._lastLoadParams;
		if (params == null) { return; }
		if (!that.loader.buildQuery) { return; }

		return lang.async.chain().then(function () {
			var query: LoadQuery,
				exportOptions = that._normalizeExportOptions<ExportAllOutput>(args);
			exportOptions.columns = that._normalizeExportColumns();

			params = lang.append({ $export: exportOptions }, args.params, params);
			query = that.loader.buildQuery(that, params);

			// fix URL
			query.route = "_export";

			return that.app.dataFacade.load(query, {
				policy: "remoteOnly",
				fileDownload: true,
				processEvent: { message: resources["interop.retrieving_data"] }
			});
		}).done(function (result) {
			that.onAfterExport(result, args);
		}).value();
	}

	protected canExportAll() {
		var that = this;
		return that.loader && that.loader.buildQuery && that._exportable && that.state() === that.states.loaded;
	}

	protected _normalizeExportOptions<T extends ExportOutput>(args: ExportOptions): T {
		return <T><ExportOutput>{
			format: args.format,
			fileName: args.fileName,
			fileNamePrefix: args.fileNamePrefix || args.prefix || this.entityType,
			layout: args.layout || args.layoutOptions
		};
	}

	protected _normalizeExportColumns(iterator?: (col: ObjectListColumn) => boolean): ExportColumn[] {
		var that = this;
		return that.columns
			.filter(function (col: ObjectListColumn) {
				var exportOpt = col["export"],
					hidden = lang.coalesce(exportOpt && exportOpt.hidden, col.hidden),
					role = lang.coalesce(exportOpt && exportOpt.role, col.role);
				if (hidden || role !== "data" && role !== "aux" && role !== "number") { return false; }
				return iterator ? iterator(col) : true;
			})
			.map(function (col: ObjectListColumn) {
				return lang.extend({
					name: col.name,
					title: col.title,
					prop: col.prop,
					role: col.role,
					width: col.width,
					vt: col.vt
				}, col["export"]);
			});
	}

	protected onAfterExport(result, args) {
		let that = this;
		that.app.eventPublisher.publish("objectList.export.success", core.SystemEvent.create({
			kind: core.SystemEvent.Kind.notification,
			priority: "low",
			severity: "success",
			message: resources["objectList.exportDownloaded"]
		}));
	}
}

lang.extend(ObjectList.prototype, ObjectListExportable.prototype);

export = ObjectList;
