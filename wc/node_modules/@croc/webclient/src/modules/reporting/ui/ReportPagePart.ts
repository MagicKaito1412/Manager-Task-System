import core = require("core");
import utils = require("lib/utils");
import ReportPartBase = require("./ReportPartBase");
import Menu = require("lib/ui/menu/Menu");
import resources = require("i18n!lib/nls/resources");
import reporting = require("modules/reporting/module-reporting-app");

import lang = core.lang;
import Application = core.Application;
import Command = core.commands.Command;
import KnownCommands = ReportPagePart.KnownCommands;

class ReportPagePart extends ReportPartBase {

	static defaultOptions: ReportPagePart.Options = {};

	static defaultMenu: Menu.Options = {
		items: [
			{
				name: "GoBack",
				title: resources.back,
				hideIfDisabled: true,
				icon: "arrow-left",
				order: 10
			}, {
				name: "Build",
				title: resources.reload,
				icon: "refresh",
				isDefaultAction: true,
				order: 10
			}, {
				name: "Print",
				title: resources.print,
				icon: "print",
				order: 20
			}
		]
	};

	options: ReportPagePart.Options;
	commands: ReportPagePart.KnownCommands;

	/**
	 * @constructs ReportPagePart
	 * @extends ReportPartBase
	 * @param {Application} app
	 * @param {Object} options
	 */
	constructor(app: reporting.Application, options: ReportPagePart.Options) {
		options = ReportPagePart.mixOptions(options, ReportPagePart.defaultOptions);
		super(app, options);

		if (app.pageModel.reports){
			if (options.showTitle && !options.title) {
				// NOTE: that.options.reportName was initialized in ReportPartBase._initializeProps
				// 		even if it wasn't specified explicitly (taken from urlSuffix)
				let report = app.pageModel.reports[this.options.reportName.toLocaleLowerCase()];
				if (report)
					this.title(report.title);
			}
		}

		this.commands.Build.execute();
	}

	/**
	 * Create commands
	 * @protected
	 * @override
	 * @returns {Object.<string, Command>}
	 */
	protected createCommands(): KnownCommands {
		let that = this;

		let commands: KnownCommands = super.createCommands();
		commands.Print = core.createCommand({
			name: "Print",
			execute: that._doPrint.bind(that)
		});
		commands.GoBack = core.createCommand({
			name: "GoBack",
			canExecute: false,
			execute: that._doGoBack.bind(that)
		});
		return commands;
	}

	protected _createMenuDefaults(): Menu.Options {
		return Menu.defaultsFor(ReportPagePart.defaultMenu, "ReportPagePart", this.options.reportName);
	}

	protected invalidateCommands(): void {
		let that = this;
		super.invalidateCommands();
		that.commands.Print.canExecute(that._commandsAvailable);

		// проверим, что в истории есть хотя бы один парт
		let area = that.app.areaManager.getActiveArea(),
			region = area.regionManager.getNavigableRegion(),
			history = region.getPartsHistory(false);

		if (history && history.length){
			// считаем, что отчет является вложенным
			that.commands.GoBack.canExecute(true);
		}
	}

	protected _doPrint(): void {
		window.print();
	}

	protected _getReportPartName(): string {
		return "ReportPagePart";
	}
}
namespace ReportPagePart {
	export interface Options extends ReportPartBase.Options {
	}

	export interface KnownCommands extends ReportPartBase.KnownCommands {
		Print?: Command;
		GoBack?: Command;
	}
}

ReportPagePart.mixin({
	defaultOptions: ReportPagePart.defaultOptions,
	defaultMenu: ReportPagePart.defaultMenu
});

//core.reporting.ReportPagePart = ReportPagePart;

export = ReportPagePart;

