import core = require("core");
import utils = require("lib/utils");
import ReportPartBase = require("./ReportPartBase");
import Menu = require("lib/ui/menu/Menu");
import PartWithFilterMixin = require("lib/ui/PartWithFilterMixin");
import resources = require("i18n!lib/nls/resources");
import resourcesModule = require("i18n!modules/reporting/nls/resources");

import lang = core.lang;
import Application = core.Application;
import Command = core.commands.Command;
import KnownCommands = ReportPart.KnownCommands;
import IFilterPart = core.ui.IFilterPart;

class ReportPart extends ReportPartBase {

	static defaultOptions: ReportPart.Options = {
		filterExpanded: true,
		/**
		 * @type Boolean
		 */
		filterCollapsable: true,
		autoGenerate: false,
		expandFilterTitle: resources["objectFilter.show"],
		collapseFilterTitle: resources["objectFilter.hide"],
		userSettings: {
			props: {
				"filterExpanded": true,
				"filter": true
			}
		}
	};

	static defaultMenu: Menu.Options = {
		items: [
			{
				name: "GoBack",
				title: resources.back,
				hideIfDisabled: true,
				icon: "arrow-left",
				order: 10
			}, {
				name: "Build",
				title: resourcesModule["reportPart.build"],
				icon: "report",
				isDefaultAction: true,
				order: 10
			}
		]
	};

	options: ReportPart.Options;
	commands: ReportPart.KnownCommands;
	filter: IFilterPart;
	protected _fieldWithFilterMenu: string;		// it's for PartWithFilterMixin

	/**
	 * @constructs ReportPart
	 * @extends ReportPartBase
	 * @param {Application} app
	 * @param {Object} options
	 */
	constructor(app: Application, options: ReportPart.Options) {
		options = ReportPart.mixOptions(options, ReportPart.defaultOptions);
		super(app, options);

		if (this.options.autoGenerate) {
			this.commands.Build.execute();
		} else {
			this.stateMessage(resources["reportPart.pressToBuild"]);
		}
		if (this.options.isNested) {
			this.commands.GoBack.canExecute(true);
		}
	}

	protected _initializeProps(): void {
		let that = this;
		super._initializeProps();

		that.initFilter(that.options, that.userSettings);
	}

	protected _createMenuDefaults(): Menu.Options {
		let that = this;
		let menu = Menu.defaultsFor(ReportPart.defaultMenu, "ReportPart", this.options.reportName);
		// replace command title 'Build' onto 'Reload' if there are no filter
		if (menu && menu.items.length && !that.filter && that.options.autoGenerate) {
			core.lang.some(menu.items, (item) => {
				if (item.name === "Build") {
					item.title = resources.reload;
					return true;
				}
			});
		}
		return menu;
	}

	protected _createMenu(): Menu {
		let that = this;
		let menu = super._createMenu();
		if (that.filter && that.filter.menu) {
			menu.mergeWith(that.filter.menu);
			that._fieldWithFilterMenu = "menu";
		}
		return menu;
	}

	/**
	 * Create commands
	 * @protected
	 * @override
	 * @returns {Object.<string, Command>}
	 */
	protected createCommands(): KnownCommands {
		let that = this,
			commands = super.createCommands();

		return core.lang.extend(commands, {
			Navigate: core.createCommand({
				name: "Navigate",
				execute: that._doNavigate.bind(that)
			}),
			GoBack: core.createCommand({
				name: "GoBack",
				canExecute: false,
				execute: that._doGoBack.bind(that)
			})
		});
	}

	protected _doNavigate(cmdOptions): void {
		let that = this;
		if (that.navigationService) {
			that.openPart(cmdOptions.partName, cmdOptions.partOptions);
		}
	}

	protected getParams(): any {
		let params = this.getFilterRestrictions();
		if (params == null) { return; }
		// TODO: или наоборот: extend({}, params, this.options.params) ?
		return core.lang.extend({}, this.options.params, params);
	}

	protected showFilterError(error: string): void {
		this.hintMessage(resources["reportPart.getRestrictionsError"] + error);
	}

	dispose(options?: core.ui.Part.CloseOptions): void {
		this.disposeFilter();
		super.dispose(options);
	}
}

interface ReportPart extends PartWithFilterMixin { }

namespace ReportPart {
	export interface Options extends ReportPartBase.Options, PartWithFilterMixin.Options {
		autoGenerate?: boolean;
		isNested?: boolean;
	}

	export interface KnownCommands extends ReportPartBase.KnownCommands {
		Navigate?: Command;
		GoBack?: Command;
	}
}
ReportPart.mixin({
	defaultOptions: ReportPart.defaultOptions,
	defaultMenu: ReportPart.defaultMenu
});
ReportPart.mixin(PartWithFilterMixin);

//core.reporting.ReportPart = ReportPart;
export = ReportPart;
