import core = require("core");
import View = require("lib/ui/handlebars/View");
import template = require("xhtmpl!modules/transfer/ui/templates/ExportPart.hbs")
import Menu = require("lib/ui/menu/Menu");
type ICommand = core.commands.ICommand;
type MenuOptions = Menu.Options;

import transfer = require("modules/transfer/Transfer");
import resourcesModule = require("i18n!modules/transfer/nls/resources");

/**
 * @enum
 */
enum ExportPartState {
	connecting,
	initial,
	uploading,
	startingUp,
	importing,
	aborting,
	aborted,
	failed,
	suspended,
	completed,
	disposed
}

class ExportPart extends View {
	static State = ExportPartState;

	static defaultOptions: ExportPart.Options = {
		template: template,
		scenario: undefined,
		client: undefined,
		commands: undefined,
		menu: {items: [
			{name: "Abort", title: resourcesModule["transfer.cmd.abort"], order: 50},
			{name: "Close", title: resourcesModule["transfer.cmd.close"], order: 100}
		]},
	};

	app: core.Application;
	options: ExportPart.Options;
	client: transfer.ExportClient;
	state: core.lang.ObservableProperty<ExportPartState>;
	progress: core.lang.ObservableProperty<number>;
	menu: Menu;

	constructor(app: core.Application, options: ExportPart.Options) {
		options = ExportPart.mixOptions(options, ExportPart.defaultOptions);
		super(options);

		this.app = app;
		this.client = this.options.client || new transfer.ExportClient(app);
	}
}
ExportPart.mixin(/** @lends ImportPart.prototype */{
	defaultOptions: ExportPart.defaultOptions,
	/**
	 * @observable-property {ImportPart#states}
	 */
	state: core.lang.Observable.accessor("state"),
	/**
	 * @observable-property {number}
	 */
	progress: core.lang.Observable.accessor("progress")
});
namespace ExportPart {
	export interface Options extends View.Options {
		scenario?: string;
		client?: transfer.ExportClient;
		commands?: core.lang.Map<ICommand>;
		menu?: MenuOptions;
	}

	export type State = ExportPartState;
}

export = ExportPart
