import $ = require("jquery");
import core = require("core");
import Component = require("lib/ui/Component");
import Menu = require("lib/ui/menu/Menu");
import DropDownMenuPresenter = require("lib/ui/menu/DropDownMenuPresenter");
import resources = require("i18n!./../nls/resources");

import interop = require("lib/interop/.interop");
import lang = core.lang;
import ICommand = core.commands.ICommand;

class AuthMenu extends Component /** @lends AuthMenu.prototype */ {
	/**
	 * @type {Object}
	 * @property {String} defaultTitle
	 * @property {Object} commands
	 * @property {Object} menu
	 * @property {String} userDisplayField Name of field of user json object to display
	 */
	static defaultOptions: AuthMenu.Options = {
		defaultTitle: resources["security.not_logged_in"], // {en: "Not logged in", ru: "Вход не выполнен"},
		userDisplayField: "login"
	};

	/**
	 * Static (used by all instances) default menu metadata.
	 * @type {Object}
	 */
	static defaultMenu: Menu.Options = {
		items: [
			{
				name: "Login",
				title: resources["security.login"],
				hidden: true
			}, {
				name: "Logout",
				title: resources["security.logout"],
				hidden: true
			}
		]
	};

	/**
	 * Title for menu root element.
	 * @observable-property {string}
	 */
	@lang.decorators.observableAccessor()
	rootTitle: lang.ObservableProperty<string>;

	options: AuthMenu.Options;
	menu: Menu;
	commands: core.commands.ICommandLazyMap;
	dataFacade: interop.IDataFacade;
	private _disposes: lang.IDisposable[];

	/**
	 * @constructs AuthMenu
	 * @extends Component
	 * @param {DataFacadeBase} dataFacade
	 * @param {EventPublisher} eventPublisher
	 * @param {AuthMenu#defaultOptions} [options]
	 */
	constructor(dataFacade: interop.IDataFacade, eventPublisher: core.IEventPublisher, options: AuthMenu.Options) {
		if (!dataFacade) {
			throw new Error("AuthMenu.ctor: dataFacade wasn't specified");
		}
		options = AuthMenu.mixOptions(options, AuthMenu.defaultOptions);
		super(options);
		let that = this;
		that.dataFacade = dataFacade;
		that.commands = core.lang.extend(that.createCommands(), that.options.commands || {});
		that.menu = that.createMenu();
		if (that.menu) {
			that.menu.bindToPart(that);
		}

		that.presenter = that.options.presenter;

		if (eventPublisher) {
			eventPublisher.subscribe("security.login", (ev) => {
				that.activateAuthorizedMenu(ev.args.user);
			});
			eventPublisher.subscribe("security.logout", (ev) => {
				that.activateUnauthorizedMenu();
			});

			eventPublisher.subscribe("app.start", () => {
				let jsonOrDefer = dataFacade.getCurrentUser();
				if (jsonOrDefer) {
					core.lang.when(jsonOrDefer).then((userDto) => {
						if (userDto) {
							that.activateAuthorizedMenu(userDto);
						} else {
							that.activateUnauthorizedMenu();
						}
					});
				}
			});
		}

		that.activateUnauthorizedMenu();
	}

	/**
	 * Create commands
	 * @protected
	 * @returns {{Login: (Command), Logout: (Command)}}
	 */
	protected createCommands(): lang.Map<ICommand> {
		let that = this,
			cmdLogin = core.createCommand({
				name: "login",
				execute: () => {
					that.dataFacade.login();
				}
			}),
			cmdLogout = core.createCommand({
				name: "logout",
				execute: () => {
					that.dataFacade.logout();
				}
			});

		return {
			Login: cmdLogin,
			Logout: cmdLogout
		};
	}

	/**
	 * Create menu.
	 * @protected
	 * @return {Menu}
	 */
	protected createMenu(): Menu {
		return new Menu(this.createDefaultMenu(), this.options.menu);
	}

	/**
	 * Get default menu metadata.
	 * @protected
	 * @return {Object}
	 */
	protected createDefaultMenu(): Menu.Options {
		return Menu.defaultsFor(AuthMenu.defaultMenu, "AuthMenu");
	}

	dispose(options?: core.ui.Part.CloseOptions): void {
		let that = this;
		super.dispose(options);
		if (that._disposes) {
			that._disposes.forEach((d) => {
				if (d && typeof d.dispose === "function") {
					d.dispose();
				}
			});
			delete that._disposes;
		}
	}

	/**
	 * Update menu for "unauthorized" state (no user logged in)
	 * @protected
	 */
	activateUnauthorizedMenu(): void {
		let that = this;
		that.onSetRootTitle();
		let item = that.menu.getItem("Login");
		if (item) {
			item.hidden = false;
		}
		item = that.menu.getItem("Logout");
		if (item) {
			item.hidden = true;
		}
		that.menu.trigger("change", that);
	}

	/**
	 * Update menu for "authorized" state (a user logged in)
	 * @protected
	 * @param {Object} [user]
	 */
	activateAuthorizedMenu(user: Object): void {
		let that = this;
		that.onSetRootTitle(user);
		let item = that.menu.getItem("Login");
		if (item) {
			item.hidden = true;
		}
		item = that.menu.getItem("Logout");
		if (item) {
			item.hidden = false;
		}
		that.menu.trigger("change", that);
	}

	/**
	 * @protected
	 * @param {Object} [user]
	 */
	protected onSetRootTitle(user?: Object): void {
		let that = this,
			title;
		if (user) {
			title = user[that.options.userDisplayField] || resources["security.unable_get_username"];
		} else {
			title = core.platform.localize(that.options.defaultTitle);
		}
		that.rootTitle(title);
	}

	/**
	 * @inheritDoc
	 */
	protected doRender(domElement: JQuery|HTMLElement): lang.Promisable<void> {
		let that = this,
			sel,
			anchor,
			rootTitlePresentation,
			disposable;

		if (that.presenter) {
			that.registerChild(that.presenter, {disposeOnUnload: false, keepOnUnload: false, trackStatus: true});
			return that.presenter.render(domElement);
		}

		sel = $(domElement);
		sel.addClass("dropdown");
		anchor = $("<a href='#' class='dropdown-toggle' role='button'>" +
			"<span class='x-icon x-icon-user'></span>" +
			"<span class='hidden-xs'></span>" +
			"<b class='caret'></b></a>").appendTo(sel);

		that.presenter = core.ui.DropDownMenuPresenter.create({ viewModel: that.menu });
		that.presenter.render(domElement);

		rootTitlePresentation = anchor.find("span").not(".x-icon-user");


		disposable = core.binding.databind(
			core.binding.html(rootTitlePresentation, "text"),
			core.binding.expr(that, that.rootTitle));

		that._disposes = that._disposes || [];
		that._disposes.push(disposable);
	}
}
namespace AuthMenu {
	export interface Options extends Component.Options {
		defaultTitle?: string;
		commands?: lang.Map<ICommand>;
		menu?: Menu.Options;
		userDisplayField?: string;
	}
}
// backward compatibility:
AuthMenu.mixin({
	defaultOptions: AuthMenu.defaultOptions,
	defaultMenu: AuthMenu.defaultMenu
});

core.ui.AuthMenu = AuthMenu;

export = AuthMenu;